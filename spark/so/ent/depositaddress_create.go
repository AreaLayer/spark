// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/depositaddress"
	"github.com/lightsparkdev/spark-go/so/ent/signingkeyshare"
)

// DepositAddressCreate is the builder for creating a DepositAddress entity.
type DepositAddressCreate struct {
	config
	mutation *DepositAddressMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (dac *DepositAddressCreate) SetCreateTime(t time.Time) *DepositAddressCreate {
	dac.mutation.SetCreateTime(t)
	return dac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dac *DepositAddressCreate) SetNillableCreateTime(t *time.Time) *DepositAddressCreate {
	if t != nil {
		dac.SetCreateTime(*t)
	}
	return dac
}

// SetUpdateTime sets the "update_time" field.
func (dac *DepositAddressCreate) SetUpdateTime(t time.Time) *DepositAddressCreate {
	dac.mutation.SetUpdateTime(t)
	return dac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dac *DepositAddressCreate) SetNillableUpdateTime(t *time.Time) *DepositAddressCreate {
	if t != nil {
		dac.SetUpdateTime(*t)
	}
	return dac
}

// SetAddress sets the "address" field.
func (dac *DepositAddressCreate) SetAddress(s string) *DepositAddressCreate {
	dac.mutation.SetAddress(s)
	return dac
}

// SetID sets the "id" field.
func (dac *DepositAddressCreate) SetID(u uuid.UUID) *DepositAddressCreate {
	dac.mutation.SetID(u)
	return dac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dac *DepositAddressCreate) SetNillableID(u *uuid.UUID) *DepositAddressCreate {
	if u != nil {
		dac.SetID(*u)
	}
	return dac
}

// SetKeyshareID sets the "keyshare" edge to the SigningKeyshare entity by ID.
func (dac *DepositAddressCreate) SetKeyshareID(id uuid.UUID) *DepositAddressCreate {
	dac.mutation.SetKeyshareID(id)
	return dac
}

// SetNillableKeyshareID sets the "keyshare" edge to the SigningKeyshare entity by ID if the given value is not nil.
func (dac *DepositAddressCreate) SetNillableKeyshareID(id *uuid.UUID) *DepositAddressCreate {
	if id != nil {
		dac = dac.SetKeyshareID(*id)
	}
	return dac
}

// SetKeyshare sets the "keyshare" edge to the SigningKeyshare entity.
func (dac *DepositAddressCreate) SetKeyshare(s *SigningKeyshare) *DepositAddressCreate {
	return dac.SetKeyshareID(s.ID)
}

// Mutation returns the DepositAddressMutation object of the builder.
func (dac *DepositAddressCreate) Mutation() *DepositAddressMutation {
	return dac.mutation
}

// Save creates the DepositAddress in the database.
func (dac *DepositAddressCreate) Save(ctx context.Context) (*DepositAddress, error) {
	dac.defaults()
	return withHooks(ctx, dac.sqlSave, dac.mutation, dac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dac *DepositAddressCreate) SaveX(ctx context.Context) *DepositAddress {
	v, err := dac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dac *DepositAddressCreate) Exec(ctx context.Context) error {
	_, err := dac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dac *DepositAddressCreate) ExecX(ctx context.Context) {
	if err := dac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dac *DepositAddressCreate) defaults() {
	if _, ok := dac.mutation.CreateTime(); !ok {
		v := depositaddress.DefaultCreateTime()
		dac.mutation.SetCreateTime(v)
	}
	if _, ok := dac.mutation.UpdateTime(); !ok {
		v := depositaddress.DefaultUpdateTime()
		dac.mutation.SetUpdateTime(v)
	}
	if _, ok := dac.mutation.ID(); !ok {
		v := depositaddress.DefaultID()
		dac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dac *DepositAddressCreate) check() error {
	if _, ok := dac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "DepositAddress.create_time"`)}
	}
	if _, ok := dac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "DepositAddress.update_time"`)}
	}
	if _, ok := dac.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "DepositAddress.address"`)}
	}
	if v, ok := dac.mutation.Address(); ok {
		if err := depositaddress.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "DepositAddress.address": %w`, err)}
		}
	}
	return nil
}

func (dac *DepositAddressCreate) sqlSave(ctx context.Context) (*DepositAddress, error) {
	if err := dac.check(); err != nil {
		return nil, err
	}
	_node, _spec := dac.createSpec()
	if err := sqlgraph.CreateNode(ctx, dac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dac.mutation.id = &_node.ID
	dac.mutation.done = true
	return _node, nil
}

func (dac *DepositAddressCreate) createSpec() (*DepositAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &DepositAddress{config: dac.config}
		_spec = sqlgraph.NewCreateSpec(depositaddress.Table, sqlgraph.NewFieldSpec(depositaddress.FieldID, field.TypeUUID))
	)
	if id, ok := dac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dac.mutation.CreateTime(); ok {
		_spec.SetField(depositaddress.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := dac.mutation.UpdateTime(); ok {
		_spec.SetField(depositaddress.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := dac.mutation.Address(); ok {
		_spec.SetField(depositaddress.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if nodes := dac.mutation.KeyshareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   depositaddress.KeyshareTable,
			Columns: []string{depositaddress.KeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.signing_keyshare_deposit_address = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DepositAddressCreateBulk is the builder for creating many DepositAddress entities in bulk.
type DepositAddressCreateBulk struct {
	config
	err      error
	builders []*DepositAddressCreate
}

// Save creates the DepositAddress entities in the database.
func (dacb *DepositAddressCreateBulk) Save(ctx context.Context) ([]*DepositAddress, error) {
	if dacb.err != nil {
		return nil, dacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dacb.builders))
	nodes := make([]*DepositAddress, len(dacb.builders))
	mutators := make([]Mutator, len(dacb.builders))
	for i := range dacb.builders {
		func(i int, root context.Context) {
			builder := dacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DepositAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dacb *DepositAddressCreateBulk) SaveX(ctx context.Context) []*DepositAddress {
	v, err := dacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dacb *DepositAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := dacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dacb *DepositAddressCreateBulk) ExecX(ctx context.Context) {
	if err := dacb.Exec(ctx); err != nil {
		panic(err)
	}
}
