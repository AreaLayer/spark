// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lightsparkdev/spark-go/so/ent/predicate"
	"github.com/lightsparkdev/spark-go/so/ent/preimageshare"
)

// PreimageShareUpdate is the builder for updating PreimageShare entities.
type PreimageShareUpdate struct {
	config
	hooks    []Hook
	mutation *PreimageShareMutation
}

// Where appends a list predicates to the PreimageShareUpdate builder.
func (psu *PreimageShareUpdate) Where(ps ...predicate.PreimageShare) *PreimageShareUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetUpdateTime sets the "update_time" field.
func (psu *PreimageShareUpdate) SetUpdateTime(t time.Time) *PreimageShareUpdate {
	psu.mutation.SetUpdateTime(t)
	return psu
}

// Mutation returns the PreimageShareMutation object of the builder.
func (psu *PreimageShareUpdate) Mutation() *PreimageShareMutation {
	return psu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PreimageShareUpdate) Save(ctx context.Context) (int, error) {
	psu.defaults()
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PreimageShareUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PreimageShareUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PreimageShareUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *PreimageShareUpdate) defaults() {
	if _, ok := psu.mutation.UpdateTime(); !ok {
		v := preimageshare.UpdateDefaultUpdateTime()
		psu.mutation.SetUpdateTime(v)
	}
}

func (psu *PreimageShareUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(preimageshare.Table, preimageshare.Columns, sqlgraph.NewFieldSpec(preimageshare.FieldID, field.TypeUUID))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.UpdateTime(); ok {
		_spec.SetField(preimageshare.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{preimageshare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PreimageShareUpdateOne is the builder for updating a single PreimageShare entity.
type PreimageShareUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PreimageShareMutation
}

// SetUpdateTime sets the "update_time" field.
func (psuo *PreimageShareUpdateOne) SetUpdateTime(t time.Time) *PreimageShareUpdateOne {
	psuo.mutation.SetUpdateTime(t)
	return psuo
}

// Mutation returns the PreimageShareMutation object of the builder.
func (psuo *PreimageShareUpdateOne) Mutation() *PreimageShareMutation {
	return psuo.mutation
}

// Where appends a list predicates to the PreimageShareUpdate builder.
func (psuo *PreimageShareUpdateOne) Where(ps ...predicate.PreimageShare) *PreimageShareUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PreimageShareUpdateOne) Select(field string, fields ...string) *PreimageShareUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PreimageShare entity.
func (psuo *PreimageShareUpdateOne) Save(ctx context.Context) (*PreimageShare, error) {
	psuo.defaults()
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PreimageShareUpdateOne) SaveX(ctx context.Context) *PreimageShare {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PreimageShareUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PreimageShareUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *PreimageShareUpdateOne) defaults() {
	if _, ok := psuo.mutation.UpdateTime(); !ok {
		v := preimageshare.UpdateDefaultUpdateTime()
		psuo.mutation.SetUpdateTime(v)
	}
}

func (psuo *PreimageShareUpdateOne) sqlSave(ctx context.Context) (_node *PreimageShare, err error) {
	_spec := sqlgraph.NewUpdateSpec(preimageshare.Table, preimageshare.Columns, sqlgraph.NewFieldSpec(preimageshare.FieldID, field.TypeUUID))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PreimageShare.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, preimageshare.FieldID)
		for _, f := range fields {
			if !preimageshare.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != preimageshare.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.UpdateTime(); ok {
		_spec.SetField(preimageshare.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &PreimageShare{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{preimageshare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
