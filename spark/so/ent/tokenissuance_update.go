// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/predicate"
	"github.com/lightsparkdev/spark-go/so/ent/tokenissuance"
	"github.com/lightsparkdev/spark-go/so/ent/tokentransactionreceipt"
)

// TokenIssuanceUpdate is the builder for updating TokenIssuance entities.
type TokenIssuanceUpdate struct {
	config
	hooks    []Hook
	mutation *TokenIssuanceMutation
}

// Where appends a list predicates to the TokenIssuanceUpdate builder.
func (tiu *TokenIssuanceUpdate) Where(ps ...predicate.TokenIssuance) *TokenIssuanceUpdate {
	tiu.mutation.Where(ps...)
	return tiu
}

// SetUpdateTime sets the "update_time" field.
func (tiu *TokenIssuanceUpdate) SetUpdateTime(t time.Time) *TokenIssuanceUpdate {
	tiu.mutation.SetUpdateTime(t)
	return tiu
}

// SetTokenTransactionReceiptIssuanceID sets the "token_transaction_receipt_issuance" edge to the TokenTransactionReceipt entity by ID.
func (tiu *TokenIssuanceUpdate) SetTokenTransactionReceiptIssuanceID(id uuid.UUID) *TokenIssuanceUpdate {
	tiu.mutation.SetTokenTransactionReceiptIssuanceID(id)
	return tiu
}

// SetNillableTokenTransactionReceiptIssuanceID sets the "token_transaction_receipt_issuance" edge to the TokenTransactionReceipt entity by ID if the given value is not nil.
func (tiu *TokenIssuanceUpdate) SetNillableTokenTransactionReceiptIssuanceID(id *uuid.UUID) *TokenIssuanceUpdate {
	if id != nil {
		tiu = tiu.SetTokenTransactionReceiptIssuanceID(*id)
	}
	return tiu
}

// SetTokenTransactionReceiptIssuance sets the "token_transaction_receipt_issuance" edge to the TokenTransactionReceipt entity.
func (tiu *TokenIssuanceUpdate) SetTokenTransactionReceiptIssuance(t *TokenTransactionReceipt) *TokenIssuanceUpdate {
	return tiu.SetTokenTransactionReceiptIssuanceID(t.ID)
}

// Mutation returns the TokenIssuanceMutation object of the builder.
func (tiu *TokenIssuanceUpdate) Mutation() *TokenIssuanceMutation {
	return tiu.mutation
}

// ClearTokenTransactionReceiptIssuance clears the "token_transaction_receipt_issuance" edge to the TokenTransactionReceipt entity.
func (tiu *TokenIssuanceUpdate) ClearTokenTransactionReceiptIssuance() *TokenIssuanceUpdate {
	tiu.mutation.ClearTokenTransactionReceiptIssuance()
	return tiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiu *TokenIssuanceUpdate) Save(ctx context.Context) (int, error) {
	tiu.defaults()
	return withHooks(ctx, tiu.sqlSave, tiu.mutation, tiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiu *TokenIssuanceUpdate) SaveX(ctx context.Context) int {
	affected, err := tiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiu *TokenIssuanceUpdate) Exec(ctx context.Context) error {
	_, err := tiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiu *TokenIssuanceUpdate) ExecX(ctx context.Context) {
	if err := tiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiu *TokenIssuanceUpdate) defaults() {
	if _, ok := tiu.mutation.UpdateTime(); !ok {
		v := tokenissuance.UpdateDefaultUpdateTime()
		tiu.mutation.SetUpdateTime(v)
	}
}

func (tiu *TokenIssuanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tokenissuance.Table, tokenissuance.Columns, sqlgraph.NewFieldSpec(tokenissuance.FieldID, field.TypeUUID))
	if ps := tiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiu.mutation.UpdateTime(); ok {
		_spec.SetField(tokenissuance.FieldUpdateTime, field.TypeTime, value)
	}
	if tiu.mutation.TokenTransactionReceiptIssuanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tokenissuance.TokenTransactionReceiptIssuanceTable,
			Columns: []string{tokenissuance.TokenTransactionReceiptIssuanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.TokenTransactionReceiptIssuanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tokenissuance.TokenTransactionReceiptIssuanceTable,
			Columns: []string{tokenissuance.TokenTransactionReceiptIssuanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokenissuance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tiu.mutation.done = true
	return n, nil
}

// TokenIssuanceUpdateOne is the builder for updating a single TokenIssuance entity.
type TokenIssuanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TokenIssuanceMutation
}

// SetUpdateTime sets the "update_time" field.
func (tiuo *TokenIssuanceUpdateOne) SetUpdateTime(t time.Time) *TokenIssuanceUpdateOne {
	tiuo.mutation.SetUpdateTime(t)
	return tiuo
}

// SetTokenTransactionReceiptIssuanceID sets the "token_transaction_receipt_issuance" edge to the TokenTransactionReceipt entity by ID.
func (tiuo *TokenIssuanceUpdateOne) SetTokenTransactionReceiptIssuanceID(id uuid.UUID) *TokenIssuanceUpdateOne {
	tiuo.mutation.SetTokenTransactionReceiptIssuanceID(id)
	return tiuo
}

// SetNillableTokenTransactionReceiptIssuanceID sets the "token_transaction_receipt_issuance" edge to the TokenTransactionReceipt entity by ID if the given value is not nil.
func (tiuo *TokenIssuanceUpdateOne) SetNillableTokenTransactionReceiptIssuanceID(id *uuid.UUID) *TokenIssuanceUpdateOne {
	if id != nil {
		tiuo = tiuo.SetTokenTransactionReceiptIssuanceID(*id)
	}
	return tiuo
}

// SetTokenTransactionReceiptIssuance sets the "token_transaction_receipt_issuance" edge to the TokenTransactionReceipt entity.
func (tiuo *TokenIssuanceUpdateOne) SetTokenTransactionReceiptIssuance(t *TokenTransactionReceipt) *TokenIssuanceUpdateOne {
	return tiuo.SetTokenTransactionReceiptIssuanceID(t.ID)
}

// Mutation returns the TokenIssuanceMutation object of the builder.
func (tiuo *TokenIssuanceUpdateOne) Mutation() *TokenIssuanceMutation {
	return tiuo.mutation
}

// ClearTokenTransactionReceiptIssuance clears the "token_transaction_receipt_issuance" edge to the TokenTransactionReceipt entity.
func (tiuo *TokenIssuanceUpdateOne) ClearTokenTransactionReceiptIssuance() *TokenIssuanceUpdateOne {
	tiuo.mutation.ClearTokenTransactionReceiptIssuance()
	return tiuo
}

// Where appends a list predicates to the TokenIssuanceUpdate builder.
func (tiuo *TokenIssuanceUpdateOne) Where(ps ...predicate.TokenIssuance) *TokenIssuanceUpdateOne {
	tiuo.mutation.Where(ps...)
	return tiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tiuo *TokenIssuanceUpdateOne) Select(field string, fields ...string) *TokenIssuanceUpdateOne {
	tiuo.fields = append([]string{field}, fields...)
	return tiuo
}

// Save executes the query and returns the updated TokenIssuance entity.
func (tiuo *TokenIssuanceUpdateOne) Save(ctx context.Context) (*TokenIssuance, error) {
	tiuo.defaults()
	return withHooks(ctx, tiuo.sqlSave, tiuo.mutation, tiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiuo *TokenIssuanceUpdateOne) SaveX(ctx context.Context) *TokenIssuance {
	node, err := tiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tiuo *TokenIssuanceUpdateOne) Exec(ctx context.Context) error {
	_, err := tiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiuo *TokenIssuanceUpdateOne) ExecX(ctx context.Context) {
	if err := tiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiuo *TokenIssuanceUpdateOne) defaults() {
	if _, ok := tiuo.mutation.UpdateTime(); !ok {
		v := tokenissuance.UpdateDefaultUpdateTime()
		tiuo.mutation.SetUpdateTime(v)
	}
}

func (tiuo *TokenIssuanceUpdateOne) sqlSave(ctx context.Context) (_node *TokenIssuance, err error) {
	_spec := sqlgraph.NewUpdateSpec(tokenissuance.Table, tokenissuance.Columns, sqlgraph.NewFieldSpec(tokenissuance.FieldID, field.TypeUUID))
	id, ok := tiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TokenIssuance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tokenissuance.FieldID)
		for _, f := range fields {
			if !tokenissuance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tokenissuance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiuo.mutation.UpdateTime(); ok {
		_spec.SetField(tokenissuance.FieldUpdateTime, field.TypeTime, value)
	}
	if tiuo.mutation.TokenTransactionReceiptIssuanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tokenissuance.TokenTransactionReceiptIssuanceTable,
			Columns: []string{tokenissuance.TokenTransactionReceiptIssuanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.TokenTransactionReceiptIssuanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tokenissuance.TokenTransactionReceiptIssuanceTable,
			Columns: []string{tokenissuance.TokenTransactionReceiptIssuanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TokenIssuance{config: tiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokenissuance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tiuo.mutation.done = true
	return _node, nil
}
