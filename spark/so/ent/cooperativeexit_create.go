// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/cooperativeexit"
	"github.com/lightsparkdev/spark-go/so/ent/transfer"
)

// CooperativeExitCreate is the builder for creating a CooperativeExit entity.
type CooperativeExitCreate struct {
	config
	mutation *CooperativeExitMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cec *CooperativeExitCreate) SetCreateTime(t time.Time) *CooperativeExitCreate {
	cec.mutation.SetCreateTime(t)
	return cec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cec *CooperativeExitCreate) SetNillableCreateTime(t *time.Time) *CooperativeExitCreate {
	if t != nil {
		cec.SetCreateTime(*t)
	}
	return cec
}

// SetUpdateTime sets the "update_time" field.
func (cec *CooperativeExitCreate) SetUpdateTime(t time.Time) *CooperativeExitCreate {
	cec.mutation.SetUpdateTime(t)
	return cec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cec *CooperativeExitCreate) SetNillableUpdateTime(t *time.Time) *CooperativeExitCreate {
	if t != nil {
		cec.SetUpdateTime(*t)
	}
	return cec
}

// SetExitTxid sets the "exit_txid" field.
func (cec *CooperativeExitCreate) SetExitTxid(b []byte) *CooperativeExitCreate {
	cec.mutation.SetExitTxid(b)
	return cec
}

// SetID sets the "id" field.
func (cec *CooperativeExitCreate) SetID(u uuid.UUID) *CooperativeExitCreate {
	cec.mutation.SetID(u)
	return cec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cec *CooperativeExitCreate) SetNillableID(u *uuid.UUID) *CooperativeExitCreate {
	if u != nil {
		cec.SetID(*u)
	}
	return cec
}

// SetTransferID sets the "transfer" edge to the Transfer entity by ID.
func (cec *CooperativeExitCreate) SetTransferID(id uuid.UUID) *CooperativeExitCreate {
	cec.mutation.SetTransferID(id)
	return cec
}

// SetTransfer sets the "transfer" edge to the Transfer entity.
func (cec *CooperativeExitCreate) SetTransfer(t *Transfer) *CooperativeExitCreate {
	return cec.SetTransferID(t.ID)
}

// Mutation returns the CooperativeExitMutation object of the builder.
func (cec *CooperativeExitCreate) Mutation() *CooperativeExitMutation {
	return cec.mutation
}

// Save creates the CooperativeExit in the database.
func (cec *CooperativeExitCreate) Save(ctx context.Context) (*CooperativeExit, error) {
	cec.defaults()
	return withHooks(ctx, cec.sqlSave, cec.mutation, cec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cec *CooperativeExitCreate) SaveX(ctx context.Context) *CooperativeExit {
	v, err := cec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cec *CooperativeExitCreate) Exec(ctx context.Context) error {
	_, err := cec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cec *CooperativeExitCreate) ExecX(ctx context.Context) {
	if err := cec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cec *CooperativeExitCreate) defaults() {
	if _, ok := cec.mutation.CreateTime(); !ok {
		v := cooperativeexit.DefaultCreateTime()
		cec.mutation.SetCreateTime(v)
	}
	if _, ok := cec.mutation.UpdateTime(); !ok {
		v := cooperativeexit.DefaultUpdateTime()
		cec.mutation.SetUpdateTime(v)
	}
	if _, ok := cec.mutation.ID(); !ok {
		v := cooperativeexit.DefaultID()
		cec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cec *CooperativeExitCreate) check() error {
	if _, ok := cec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CooperativeExit.create_time"`)}
	}
	if _, ok := cec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CooperativeExit.update_time"`)}
	}
	if len(cec.mutation.TransferIDs()) == 0 {
		return &ValidationError{Name: "transfer", err: errors.New(`ent: missing required edge "CooperativeExit.transfer"`)}
	}
	return nil
}

func (cec *CooperativeExitCreate) sqlSave(ctx context.Context) (*CooperativeExit, error) {
	if err := cec.check(); err != nil {
		return nil, err
	}
	_node, _spec := cec.createSpec()
	if err := sqlgraph.CreateNode(ctx, cec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cec.mutation.id = &_node.ID
	cec.mutation.done = true
	return _node, nil
}

func (cec *CooperativeExitCreate) createSpec() (*CooperativeExit, *sqlgraph.CreateSpec) {
	var (
		_node = &CooperativeExit{config: cec.config}
		_spec = sqlgraph.NewCreateSpec(cooperativeexit.Table, sqlgraph.NewFieldSpec(cooperativeexit.FieldID, field.TypeUUID))
	)
	if id, ok := cec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cec.mutation.CreateTime(); ok {
		_spec.SetField(cooperativeexit.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cec.mutation.UpdateTime(); ok {
		_spec.SetField(cooperativeexit.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cec.mutation.ExitTxid(); ok {
		_spec.SetField(cooperativeexit.FieldExitTxid, field.TypeBytes, value)
		_node.ExitTxid = value
	}
	if nodes := cec.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cooperativeexit.TransferTable,
			Columns: []string{cooperativeexit.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.cooperative_exit_transfer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CooperativeExitCreateBulk is the builder for creating many CooperativeExit entities in bulk.
type CooperativeExitCreateBulk struct {
	config
	err      error
	builders []*CooperativeExitCreate
}

// Save creates the CooperativeExit entities in the database.
func (cecb *CooperativeExitCreateBulk) Save(ctx context.Context) ([]*CooperativeExit, error) {
	if cecb.err != nil {
		return nil, cecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cecb.builders))
	nodes := make([]*CooperativeExit, len(cecb.builders))
	mutators := make([]Mutator, len(cecb.builders))
	for i := range cecb.builders {
		func(i int, root context.Context) {
			builder := cecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CooperativeExitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cecb *CooperativeExitCreateBulk) SaveX(ctx context.Context) []*CooperativeExit {
	v, err := cecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cecb *CooperativeExitCreateBulk) Exec(ctx context.Context) error {
	_, err := cecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecb *CooperativeExitCreateBulk) ExecX(ctx context.Context) {
	if err := cecb.Exec(ctx); err != nil {
		panic(err)
	}
}
