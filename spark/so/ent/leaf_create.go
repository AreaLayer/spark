// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/leaf"
	"github.com/lightsparkdev/spark-go/so/ent/schema"
	"github.com/lightsparkdev/spark-go/so/ent/signingkeyshare"
	"github.com/lightsparkdev/spark-go/so/ent/tree"
)

// LeafCreate is the builder for creating a Leaf entity.
type LeafCreate struct {
	config
	mutation *LeafMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (lc *LeafCreate) SetCreateTime(t time.Time) *LeafCreate {
	lc.mutation.SetCreateTime(t)
	return lc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (lc *LeafCreate) SetNillableCreateTime(t *time.Time) *LeafCreate {
	if t != nil {
		lc.SetCreateTime(*t)
	}
	return lc
}

// SetUpdateTime sets the "update_time" field.
func (lc *LeafCreate) SetUpdateTime(t time.Time) *LeafCreate {
	lc.mutation.SetUpdateTime(t)
	return lc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (lc *LeafCreate) SetNillableUpdateTime(t *time.Time) *LeafCreate {
	if t != nil {
		lc.SetUpdateTime(*t)
	}
	return lc
}

// SetValueSats sets the "value_sats" field.
func (lc *LeafCreate) SetValueSats(u uint64) *LeafCreate {
	lc.mutation.SetValueSats(u)
	return lc
}

// SetStatus sets the "status" field.
func (lc *LeafCreate) SetStatus(ss schema.LeafStatus) *LeafCreate {
	lc.mutation.SetStatus(ss)
	return lc
}

// SetTreeID sets the "tree_id" field.
func (lc *LeafCreate) SetTreeID(u uuid.UUID) *LeafCreate {
	lc.mutation.SetTreeID(u)
	return lc
}

// SetParentID sets the "parent_id" field.
func (lc *LeafCreate) SetParentID(u uuid.UUID) *LeafCreate {
	lc.mutation.SetParentID(u)
	return lc
}

// SetVerifyingPubkey sets the "verifying_pubkey" field.
func (lc *LeafCreate) SetVerifyingPubkey(b []byte) *LeafCreate {
	lc.mutation.SetVerifyingPubkey(b)
	return lc
}

// SetOwnerIdentityPubkey sets the "owner_identity_pubkey" field.
func (lc *LeafCreate) SetOwnerIdentityPubkey(b []byte) *LeafCreate {
	lc.mutation.SetOwnerIdentityPubkey(b)
	return lc
}

// SetOwnerSigningPubkey sets the "owner_signing_pubkey" field.
func (lc *LeafCreate) SetOwnerSigningPubkey(b []byte) *LeafCreate {
	lc.mutation.SetOwnerSigningPubkey(b)
	return lc
}

// SetSigningKeyshareID sets the "signing_keyshare_id" field.
func (lc *LeafCreate) SetSigningKeyshareID(u uuid.UUID) *LeafCreate {
	lc.mutation.SetSigningKeyshareID(u)
	return lc
}

// SetID sets the "id" field.
func (lc *LeafCreate) SetID(u uuid.UUID) *LeafCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LeafCreate) SetNillableID(u *uuid.UUID) *LeafCreate {
	if u != nil {
		lc.SetID(*u)
	}
	return lc
}

// SetTree sets the "tree" edge to the Tree entity.
func (lc *LeafCreate) SetTree(t *Tree) *LeafCreate {
	return lc.SetTreeID(t.ID)
}

// SetParent sets the "parent" edge to the Leaf entity.
func (lc *LeafCreate) SetParent(l *Leaf) *LeafCreate {
	return lc.SetParentID(l.ID)
}

// SetSigningKeyshare sets the "signing_keyshare" edge to the SigningKeyshare entity.
func (lc *LeafCreate) SetSigningKeyshare(s *SigningKeyshare) *LeafCreate {
	return lc.SetSigningKeyshareID(s.ID)
}

// Mutation returns the LeafMutation object of the builder.
func (lc *LeafCreate) Mutation() *LeafMutation {
	return lc.mutation
}

// Save creates the Leaf in the database.
func (lc *LeafCreate) Save(ctx context.Context) (*Leaf, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LeafCreate) SaveX(ctx context.Context) *Leaf {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LeafCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LeafCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LeafCreate) defaults() {
	if _, ok := lc.mutation.CreateTime(); !ok {
		v := leaf.DefaultCreateTime()
		lc.mutation.SetCreateTime(v)
	}
	if _, ok := lc.mutation.UpdateTime(); !ok {
		v := leaf.DefaultUpdateTime()
		lc.mutation.SetUpdateTime(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		v := leaf.DefaultID()
		lc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LeafCreate) check() error {
	if _, ok := lc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Leaf.create_time"`)}
	}
	if _, ok := lc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Leaf.update_time"`)}
	}
	if _, ok := lc.mutation.ValueSats(); !ok {
		return &ValidationError{Name: "value_sats", err: errors.New(`ent: missing required field "Leaf.value_sats"`)}
	}
	if _, ok := lc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Leaf.status"`)}
	}
	if v, ok := lc.mutation.Status(); ok {
		if err := leaf.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Leaf.status": %w`, err)}
		}
	}
	if _, ok := lc.mutation.TreeID(); !ok {
		return &ValidationError{Name: "tree_id", err: errors.New(`ent: missing required field "Leaf.tree_id"`)}
	}
	if _, ok := lc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "Leaf.parent_id"`)}
	}
	if _, ok := lc.mutation.VerifyingPubkey(); !ok {
		return &ValidationError{Name: "verifying_pubkey", err: errors.New(`ent: missing required field "Leaf.verifying_pubkey"`)}
	}
	if v, ok := lc.mutation.VerifyingPubkey(); ok {
		if err := leaf.VerifyingPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "verifying_pubkey", err: fmt.Errorf(`ent: validator failed for field "Leaf.verifying_pubkey": %w`, err)}
		}
	}
	if _, ok := lc.mutation.OwnerIdentityPubkey(); !ok {
		return &ValidationError{Name: "owner_identity_pubkey", err: errors.New(`ent: missing required field "Leaf.owner_identity_pubkey"`)}
	}
	if v, ok := lc.mutation.OwnerIdentityPubkey(); ok {
		if err := leaf.OwnerIdentityPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_identity_pubkey", err: fmt.Errorf(`ent: validator failed for field "Leaf.owner_identity_pubkey": %w`, err)}
		}
	}
	if _, ok := lc.mutation.OwnerSigningPubkey(); !ok {
		return &ValidationError{Name: "owner_signing_pubkey", err: errors.New(`ent: missing required field "Leaf.owner_signing_pubkey"`)}
	}
	if v, ok := lc.mutation.OwnerSigningPubkey(); ok {
		if err := leaf.OwnerSigningPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_signing_pubkey", err: fmt.Errorf(`ent: validator failed for field "Leaf.owner_signing_pubkey": %w`, err)}
		}
	}
	if _, ok := lc.mutation.SigningKeyshareID(); !ok {
		return &ValidationError{Name: "signing_keyshare_id", err: errors.New(`ent: missing required field "Leaf.signing_keyshare_id"`)}
	}
	if len(lc.mutation.TreeIDs()) == 0 {
		return &ValidationError{Name: "tree", err: errors.New(`ent: missing required edge "Leaf.tree"`)}
	}
	if len(lc.mutation.ParentIDs()) == 0 {
		return &ValidationError{Name: "parent", err: errors.New(`ent: missing required edge "Leaf.parent"`)}
	}
	if len(lc.mutation.SigningKeyshareIDs()) == 0 {
		return &ValidationError{Name: "signing_keyshare", err: errors.New(`ent: missing required edge "Leaf.signing_keyshare"`)}
	}
	return nil
}

func (lc *LeafCreate) sqlSave(ctx context.Context) (*Leaf, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LeafCreate) createSpec() (*Leaf, *sqlgraph.CreateSpec) {
	var (
		_node = &Leaf{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(leaf.Table, sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.CreateTime(); ok {
		_spec.SetField(leaf.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := lc.mutation.UpdateTime(); ok {
		_spec.SetField(leaf.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := lc.mutation.ValueSats(); ok {
		_spec.SetField(leaf.FieldValueSats, field.TypeUint64, value)
		_node.ValueSats = value
	}
	if value, ok := lc.mutation.Status(); ok {
		_spec.SetField(leaf.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := lc.mutation.VerifyingPubkey(); ok {
		_spec.SetField(leaf.FieldVerifyingPubkey, field.TypeBytes, value)
		_node.VerifyingPubkey = value
	}
	if value, ok := lc.mutation.OwnerIdentityPubkey(); ok {
		_spec.SetField(leaf.FieldOwnerIdentityPubkey, field.TypeBytes, value)
		_node.OwnerIdentityPubkey = value
	}
	if value, ok := lc.mutation.OwnerSigningPubkey(); ok {
		_spec.SetField(leaf.FieldOwnerSigningPubkey, field.TypeBytes, value)
		_node.OwnerSigningPubkey = value
	}
	if nodes := lc.mutation.TreeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaf.TreeTable,
			Columns: []string{leaf.TreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tree.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TreeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   leaf.ParentTable,
			Columns: []string{leaf.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.SigningKeyshareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   leaf.SigningKeyshareTable,
			Columns: []string{leaf.SigningKeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SigningKeyshareID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LeafCreateBulk is the builder for creating many Leaf entities in bulk.
type LeafCreateBulk struct {
	config
	err      error
	builders []*LeafCreate
}

// Save creates the Leaf entities in the database.
func (lcb *LeafCreateBulk) Save(ctx context.Context) ([]*Leaf, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Leaf, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LeafMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LeafCreateBulk) SaveX(ctx context.Context) []*Leaf {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LeafCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LeafCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
