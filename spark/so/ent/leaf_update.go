// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/leaf"
	"github.com/lightsparkdev/spark-go/so/ent/predicate"
	"github.com/lightsparkdev/spark-go/so/ent/schema"
	"github.com/lightsparkdev/spark-go/so/ent/signingkeyshare"
	"github.com/lightsparkdev/spark-go/so/ent/tree"
)

// LeafUpdate is the builder for updating Leaf entities.
type LeafUpdate struct {
	config
	hooks    []Hook
	mutation *LeafMutation
}

// Where appends a list predicates to the LeafUpdate builder.
func (lu *LeafUpdate) Where(ps ...predicate.Leaf) *LeafUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdateTime sets the "update_time" field.
func (lu *LeafUpdate) SetUpdateTime(t time.Time) *LeafUpdate {
	lu.mutation.SetUpdateTime(t)
	return lu
}

// SetStatus sets the "status" field.
func (lu *LeafUpdate) SetStatus(ss schema.LeafStatus) *LeafUpdate {
	lu.mutation.SetStatus(ss)
	return lu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lu *LeafUpdate) SetNillableStatus(ss *schema.LeafStatus) *LeafUpdate {
	if ss != nil {
		lu.SetStatus(*ss)
	}
	return lu
}

// SetTreeID sets the "tree_id" field.
func (lu *LeafUpdate) SetTreeID(u uuid.UUID) *LeafUpdate {
	lu.mutation.SetTreeID(u)
	return lu
}

// SetNillableTreeID sets the "tree_id" field if the given value is not nil.
func (lu *LeafUpdate) SetNillableTreeID(u *uuid.UUID) *LeafUpdate {
	if u != nil {
		lu.SetTreeID(*u)
	}
	return lu
}

// SetParentID sets the "parent_id" field.
func (lu *LeafUpdate) SetParentID(u uuid.UUID) *LeafUpdate {
	lu.mutation.SetParentID(u)
	return lu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (lu *LeafUpdate) SetNillableParentID(u *uuid.UUID) *LeafUpdate {
	if u != nil {
		lu.SetParentID(*u)
	}
	return lu
}

// SetOwnerIdentityPubkey sets the "owner_identity_pubkey" field.
func (lu *LeafUpdate) SetOwnerIdentityPubkey(b []byte) *LeafUpdate {
	lu.mutation.SetOwnerIdentityPubkey(b)
	return lu
}

// SetOwnerSigningPubkey sets the "owner_signing_pubkey" field.
func (lu *LeafUpdate) SetOwnerSigningPubkey(b []byte) *LeafUpdate {
	lu.mutation.SetOwnerSigningPubkey(b)
	return lu
}

// SetSigningKeyshareID sets the "signing_keyshare_id" field.
func (lu *LeafUpdate) SetSigningKeyshareID(u uuid.UUID) *LeafUpdate {
	lu.mutation.SetSigningKeyshareID(u)
	return lu
}

// SetNillableSigningKeyshareID sets the "signing_keyshare_id" field if the given value is not nil.
func (lu *LeafUpdate) SetNillableSigningKeyshareID(u *uuid.UUID) *LeafUpdate {
	if u != nil {
		lu.SetSigningKeyshareID(*u)
	}
	return lu
}

// SetTree sets the "tree" edge to the Tree entity.
func (lu *LeafUpdate) SetTree(t *Tree) *LeafUpdate {
	return lu.SetTreeID(t.ID)
}

// SetParent sets the "parent" edge to the Leaf entity.
func (lu *LeafUpdate) SetParent(l *Leaf) *LeafUpdate {
	return lu.SetParentID(l.ID)
}

// SetSigningKeyshare sets the "signing_keyshare" edge to the SigningKeyshare entity.
func (lu *LeafUpdate) SetSigningKeyshare(s *SigningKeyshare) *LeafUpdate {
	return lu.SetSigningKeyshareID(s.ID)
}

// Mutation returns the LeafMutation object of the builder.
func (lu *LeafUpdate) Mutation() *LeafMutation {
	return lu.mutation
}

// ClearTree clears the "tree" edge to the Tree entity.
func (lu *LeafUpdate) ClearTree() *LeafUpdate {
	lu.mutation.ClearTree()
	return lu
}

// ClearParent clears the "parent" edge to the Leaf entity.
func (lu *LeafUpdate) ClearParent() *LeafUpdate {
	lu.mutation.ClearParent()
	return lu
}

// ClearSigningKeyshare clears the "signing_keyshare" edge to the SigningKeyshare entity.
func (lu *LeafUpdate) ClearSigningKeyshare() *LeafUpdate {
	lu.mutation.ClearSigningKeyshare()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LeafUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LeafUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LeafUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LeafUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LeafUpdate) defaults() {
	if _, ok := lu.mutation.UpdateTime(); !ok {
		v := leaf.UpdateDefaultUpdateTime()
		lu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LeafUpdate) check() error {
	if v, ok := lu.mutation.Status(); ok {
		if err := leaf.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Leaf.status": %w`, err)}
		}
	}
	if v, ok := lu.mutation.OwnerIdentityPubkey(); ok {
		if err := leaf.OwnerIdentityPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_identity_pubkey", err: fmt.Errorf(`ent: validator failed for field "Leaf.owner_identity_pubkey": %w`, err)}
		}
	}
	if v, ok := lu.mutation.OwnerSigningPubkey(); ok {
		if err := leaf.OwnerSigningPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_signing_pubkey", err: fmt.Errorf(`ent: validator failed for field "Leaf.owner_signing_pubkey": %w`, err)}
		}
	}
	if lu.mutation.TreeCleared() && len(lu.mutation.TreeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Leaf.tree"`)
	}
	if lu.mutation.ParentCleared() && len(lu.mutation.ParentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Leaf.parent"`)
	}
	if lu.mutation.SigningKeyshareCleared() && len(lu.mutation.SigningKeyshareIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Leaf.signing_keyshare"`)
	}
	return nil
}

func (lu *LeafUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(leaf.Table, leaf.Columns, sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdateTime(); ok {
		_spec.SetField(leaf.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Status(); ok {
		_spec.SetField(leaf.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := lu.mutation.OwnerIdentityPubkey(); ok {
		_spec.SetField(leaf.FieldOwnerIdentityPubkey, field.TypeBytes, value)
	}
	if value, ok := lu.mutation.OwnerSigningPubkey(); ok {
		_spec.SetField(leaf.FieldOwnerSigningPubkey, field.TypeBytes, value)
	}
	if lu.mutation.TreeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaf.TreeTable,
			Columns: []string{leaf.TreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tree.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.TreeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaf.TreeTable,
			Columns: []string{leaf.TreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tree.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   leaf.ParentTable,
			Columns: []string{leaf.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   leaf.ParentTable,
			Columns: []string{leaf.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.SigningKeyshareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   leaf.SigningKeyshareTable,
			Columns: []string{leaf.SigningKeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.SigningKeyshareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   leaf.SigningKeyshareTable,
			Columns: []string{leaf.SigningKeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{leaf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LeafUpdateOne is the builder for updating a single Leaf entity.
type LeafUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LeafMutation
}

// SetUpdateTime sets the "update_time" field.
func (luo *LeafUpdateOne) SetUpdateTime(t time.Time) *LeafUpdateOne {
	luo.mutation.SetUpdateTime(t)
	return luo
}

// SetStatus sets the "status" field.
func (luo *LeafUpdateOne) SetStatus(ss schema.LeafStatus) *LeafUpdateOne {
	luo.mutation.SetStatus(ss)
	return luo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (luo *LeafUpdateOne) SetNillableStatus(ss *schema.LeafStatus) *LeafUpdateOne {
	if ss != nil {
		luo.SetStatus(*ss)
	}
	return luo
}

// SetTreeID sets the "tree_id" field.
func (luo *LeafUpdateOne) SetTreeID(u uuid.UUID) *LeafUpdateOne {
	luo.mutation.SetTreeID(u)
	return luo
}

// SetNillableTreeID sets the "tree_id" field if the given value is not nil.
func (luo *LeafUpdateOne) SetNillableTreeID(u *uuid.UUID) *LeafUpdateOne {
	if u != nil {
		luo.SetTreeID(*u)
	}
	return luo
}

// SetParentID sets the "parent_id" field.
func (luo *LeafUpdateOne) SetParentID(u uuid.UUID) *LeafUpdateOne {
	luo.mutation.SetParentID(u)
	return luo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (luo *LeafUpdateOne) SetNillableParentID(u *uuid.UUID) *LeafUpdateOne {
	if u != nil {
		luo.SetParentID(*u)
	}
	return luo
}

// SetOwnerIdentityPubkey sets the "owner_identity_pubkey" field.
func (luo *LeafUpdateOne) SetOwnerIdentityPubkey(b []byte) *LeafUpdateOne {
	luo.mutation.SetOwnerIdentityPubkey(b)
	return luo
}

// SetOwnerSigningPubkey sets the "owner_signing_pubkey" field.
func (luo *LeafUpdateOne) SetOwnerSigningPubkey(b []byte) *LeafUpdateOne {
	luo.mutation.SetOwnerSigningPubkey(b)
	return luo
}

// SetSigningKeyshareID sets the "signing_keyshare_id" field.
func (luo *LeafUpdateOne) SetSigningKeyshareID(u uuid.UUID) *LeafUpdateOne {
	luo.mutation.SetSigningKeyshareID(u)
	return luo
}

// SetNillableSigningKeyshareID sets the "signing_keyshare_id" field if the given value is not nil.
func (luo *LeafUpdateOne) SetNillableSigningKeyshareID(u *uuid.UUID) *LeafUpdateOne {
	if u != nil {
		luo.SetSigningKeyshareID(*u)
	}
	return luo
}

// SetTree sets the "tree" edge to the Tree entity.
func (luo *LeafUpdateOne) SetTree(t *Tree) *LeafUpdateOne {
	return luo.SetTreeID(t.ID)
}

// SetParent sets the "parent" edge to the Leaf entity.
func (luo *LeafUpdateOne) SetParent(l *Leaf) *LeafUpdateOne {
	return luo.SetParentID(l.ID)
}

// SetSigningKeyshare sets the "signing_keyshare" edge to the SigningKeyshare entity.
func (luo *LeafUpdateOne) SetSigningKeyshare(s *SigningKeyshare) *LeafUpdateOne {
	return luo.SetSigningKeyshareID(s.ID)
}

// Mutation returns the LeafMutation object of the builder.
func (luo *LeafUpdateOne) Mutation() *LeafMutation {
	return luo.mutation
}

// ClearTree clears the "tree" edge to the Tree entity.
func (luo *LeafUpdateOne) ClearTree() *LeafUpdateOne {
	luo.mutation.ClearTree()
	return luo
}

// ClearParent clears the "parent" edge to the Leaf entity.
func (luo *LeafUpdateOne) ClearParent() *LeafUpdateOne {
	luo.mutation.ClearParent()
	return luo
}

// ClearSigningKeyshare clears the "signing_keyshare" edge to the SigningKeyshare entity.
func (luo *LeafUpdateOne) ClearSigningKeyshare() *LeafUpdateOne {
	luo.mutation.ClearSigningKeyshare()
	return luo
}

// Where appends a list predicates to the LeafUpdate builder.
func (luo *LeafUpdateOne) Where(ps ...predicate.Leaf) *LeafUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LeafUpdateOne) Select(field string, fields ...string) *LeafUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Leaf entity.
func (luo *LeafUpdateOne) Save(ctx context.Context) (*Leaf, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LeafUpdateOne) SaveX(ctx context.Context) *Leaf {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LeafUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LeafUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LeafUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdateTime(); !ok {
		v := leaf.UpdateDefaultUpdateTime()
		luo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LeafUpdateOne) check() error {
	if v, ok := luo.mutation.Status(); ok {
		if err := leaf.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Leaf.status": %w`, err)}
		}
	}
	if v, ok := luo.mutation.OwnerIdentityPubkey(); ok {
		if err := leaf.OwnerIdentityPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_identity_pubkey", err: fmt.Errorf(`ent: validator failed for field "Leaf.owner_identity_pubkey": %w`, err)}
		}
	}
	if v, ok := luo.mutation.OwnerSigningPubkey(); ok {
		if err := leaf.OwnerSigningPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_signing_pubkey", err: fmt.Errorf(`ent: validator failed for field "Leaf.owner_signing_pubkey": %w`, err)}
		}
	}
	if luo.mutation.TreeCleared() && len(luo.mutation.TreeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Leaf.tree"`)
	}
	if luo.mutation.ParentCleared() && len(luo.mutation.ParentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Leaf.parent"`)
	}
	if luo.mutation.SigningKeyshareCleared() && len(luo.mutation.SigningKeyshareIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Leaf.signing_keyshare"`)
	}
	return nil
}

func (luo *LeafUpdateOne) sqlSave(ctx context.Context) (_node *Leaf, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(leaf.Table, leaf.Columns, sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Leaf.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, leaf.FieldID)
		for _, f := range fields {
			if !leaf.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != leaf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdateTime(); ok {
		_spec.SetField(leaf.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Status(); ok {
		_spec.SetField(leaf.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := luo.mutation.OwnerIdentityPubkey(); ok {
		_spec.SetField(leaf.FieldOwnerIdentityPubkey, field.TypeBytes, value)
	}
	if value, ok := luo.mutation.OwnerSigningPubkey(); ok {
		_spec.SetField(leaf.FieldOwnerSigningPubkey, field.TypeBytes, value)
	}
	if luo.mutation.TreeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaf.TreeTable,
			Columns: []string{leaf.TreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tree.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.TreeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaf.TreeTable,
			Columns: []string{leaf.TreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tree.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   leaf.ParentTable,
			Columns: []string{leaf.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   leaf.ParentTable,
			Columns: []string{leaf.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.SigningKeyshareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   leaf.SigningKeyshareTable,
			Columns: []string{leaf.SigningKeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.SigningKeyshareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   leaf.SigningKeyshareTable,
			Columns: []string{leaf.SigningKeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Leaf{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{leaf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
