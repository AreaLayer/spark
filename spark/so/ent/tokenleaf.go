// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/schema"
	"github.com/lightsparkdev/spark-go/so/ent/signingkeyshare"
	"github.com/lightsparkdev/spark-go/so/ent/tokenleaf"
	"github.com/lightsparkdev/spark-go/so/ent/tokentransactionreceipt"
)

// TokenLeaf is the model entity for the TokenLeaf schema.
type TokenLeaf struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Status holds the value of the "status" field.
	Status schema.TokenLeafStatus `json:"status,omitempty"`
	// OwnerPublicKey holds the value of the "owner_public_key" field.
	OwnerPublicKey []byte `json:"owner_public_key,omitempty"`
	// WithdrawalBondSats holds the value of the "withdrawal_bond_sats" field.
	WithdrawalBondSats uint64 `json:"withdrawal_bond_sats,omitempty"`
	// WithdrawalLocktime holds the value of the "withdrawal_locktime" field.
	WithdrawalLocktime uint64 `json:"withdrawal_locktime,omitempty"`
	// WithdrawalRevocationPublicKey holds the value of the "withdrawal_revocation_public_key" field.
	WithdrawalRevocationPublicKey []byte `json:"withdrawal_revocation_public_key,omitempty"`
	// TokenPublicKey holds the value of the "token_public_key" field.
	TokenPublicKey []byte `json:"token_public_key,omitempty"`
	// TokenAmount holds the value of the "token_amount" field.
	TokenAmount []byte `json:"token_amount,omitempty"`
	// LeafCreatedTransactionOutputVout holds the value of the "leaf_created_transaction_output_vout" field.
	LeafCreatedTransactionOutputVout uint32 `json:"leaf_created_transaction_output_vout,omitempty"`
	// LeafSpentOwnershipSignature holds the value of the "leaf_spent_ownership_signature" field.
	LeafSpentOwnershipSignature []byte `json:"leaf_spent_ownership_signature,omitempty"`
	// LeafSpentOperatorSpecificOwnershipSignature holds the value of the "leaf_spent_operator_specific_ownership_signature" field.
	LeafSpentOperatorSpecificOwnershipSignature []byte `json:"leaf_spent_operator_specific_ownership_signature,omitempty"`
	// LeafSpentTransactionInputVout holds the value of the "leaf_spent_transaction_input_vout" field.
	LeafSpentTransactionInputVout uint32 `json:"leaf_spent_transaction_input_vout,omitempty"`
	// LeafSpentRevocationPrivateKey holds the value of the "leaf_spent_revocation_private_key" field.
	LeafSpentRevocationPrivateKey []byte `json:"leaf_spent_revocation_private_key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TokenLeafQuery when eager-loading is set.
	Edges                                             TokenLeafEdges `json:"edges"`
	token_leaf_revocation_keyshare                    *uuid.UUID
	token_leaf_leaf_created_token_transaction_receipt *uuid.UUID
	token_leaf_leaf_spent_token_transaction_receipt   *uuid.UUID
	selectValues                                      sql.SelectValues
}

// TokenLeafEdges holds the relations/edges for other nodes in the graph.
type TokenLeafEdges struct {
	// RevocationKeyshare holds the value of the revocation_keyshare edge.
	RevocationKeyshare *SigningKeyshare `json:"revocation_keyshare,omitempty"`
	// LeafCreatedTokenTransactionReceipt holds the value of the leaf_created_token_transaction_receipt edge.
	LeafCreatedTokenTransactionReceipt *TokenTransactionReceipt `json:"leaf_created_token_transaction_receipt,omitempty"`
	// LeafSpentTokenTransactionReceipt holds the value of the leaf_spent_token_transaction_receipt edge.
	LeafSpentTokenTransactionReceipt *TokenTransactionReceipt `json:"leaf_spent_token_transaction_receipt,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RevocationKeyshareOrErr returns the RevocationKeyshare value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TokenLeafEdges) RevocationKeyshareOrErr() (*SigningKeyshare, error) {
	if e.RevocationKeyshare != nil {
		return e.RevocationKeyshare, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: signingkeyshare.Label}
	}
	return nil, &NotLoadedError{edge: "revocation_keyshare"}
}

// LeafCreatedTokenTransactionReceiptOrErr returns the LeafCreatedTokenTransactionReceipt value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TokenLeafEdges) LeafCreatedTokenTransactionReceiptOrErr() (*TokenTransactionReceipt, error) {
	if e.LeafCreatedTokenTransactionReceipt != nil {
		return e.LeafCreatedTokenTransactionReceipt, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tokentransactionreceipt.Label}
	}
	return nil, &NotLoadedError{edge: "leaf_created_token_transaction_receipt"}
}

// LeafSpentTokenTransactionReceiptOrErr returns the LeafSpentTokenTransactionReceipt value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TokenLeafEdges) LeafSpentTokenTransactionReceiptOrErr() (*TokenTransactionReceipt, error) {
	if e.LeafSpentTokenTransactionReceipt != nil {
		return e.LeafSpentTokenTransactionReceipt, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: tokentransactionreceipt.Label}
	}
	return nil, &NotLoadedError{edge: "leaf_spent_token_transaction_receipt"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TokenLeaf) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tokenleaf.FieldOwnerPublicKey, tokenleaf.FieldWithdrawalRevocationPublicKey, tokenleaf.FieldTokenPublicKey, tokenleaf.FieldTokenAmount, tokenleaf.FieldLeafSpentOwnershipSignature, tokenleaf.FieldLeafSpentOperatorSpecificOwnershipSignature, tokenleaf.FieldLeafSpentRevocationPrivateKey:
			values[i] = new([]byte)
		case tokenleaf.FieldWithdrawalBondSats, tokenleaf.FieldWithdrawalLocktime, tokenleaf.FieldLeafCreatedTransactionOutputVout, tokenleaf.FieldLeafSpentTransactionInputVout:
			values[i] = new(sql.NullInt64)
		case tokenleaf.FieldStatus:
			values[i] = new(sql.NullString)
		case tokenleaf.FieldCreateTime, tokenleaf.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case tokenleaf.FieldID:
			values[i] = new(uuid.UUID)
		case tokenleaf.ForeignKeys[0]: // token_leaf_revocation_keyshare
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case tokenleaf.ForeignKeys[1]: // token_leaf_leaf_created_token_transaction_receipt
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case tokenleaf.ForeignKeys[2]: // token_leaf_leaf_spent_token_transaction_receipt
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TokenLeaf fields.
func (tl *TokenLeaf) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tokenleaf.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tl.ID = *value
			}
		case tokenleaf.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				tl.CreateTime = value.Time
			}
		case tokenleaf.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				tl.UpdateTime = value.Time
			}
		case tokenleaf.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tl.Status = schema.TokenLeafStatus(value.String)
			}
		case tokenleaf.FieldOwnerPublicKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field owner_public_key", values[i])
			} else if value != nil {
				tl.OwnerPublicKey = *value
			}
		case tokenleaf.FieldWithdrawalBondSats:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field withdrawal_bond_sats", values[i])
			} else if value.Valid {
				tl.WithdrawalBondSats = uint64(value.Int64)
			}
		case tokenleaf.FieldWithdrawalLocktime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field withdrawal_locktime", values[i])
			} else if value.Valid {
				tl.WithdrawalLocktime = uint64(value.Int64)
			}
		case tokenleaf.FieldWithdrawalRevocationPublicKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field withdrawal_revocation_public_key", values[i])
			} else if value != nil {
				tl.WithdrawalRevocationPublicKey = *value
			}
		case tokenleaf.FieldTokenPublicKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field token_public_key", values[i])
			} else if value != nil {
				tl.TokenPublicKey = *value
			}
		case tokenleaf.FieldTokenAmount:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field token_amount", values[i])
			} else if value != nil {
				tl.TokenAmount = *value
			}
		case tokenleaf.FieldLeafCreatedTransactionOutputVout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field leaf_created_transaction_output_vout", values[i])
			} else if value.Valid {
				tl.LeafCreatedTransactionOutputVout = uint32(value.Int64)
			}
		case tokenleaf.FieldLeafSpentOwnershipSignature:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field leaf_spent_ownership_signature", values[i])
			} else if value != nil {
				tl.LeafSpentOwnershipSignature = *value
			}
		case tokenleaf.FieldLeafSpentOperatorSpecificOwnershipSignature:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field leaf_spent_operator_specific_ownership_signature", values[i])
			} else if value != nil {
				tl.LeafSpentOperatorSpecificOwnershipSignature = *value
			}
		case tokenleaf.FieldLeafSpentTransactionInputVout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field leaf_spent_transaction_input_vout", values[i])
			} else if value.Valid {
				tl.LeafSpentTransactionInputVout = uint32(value.Int64)
			}
		case tokenleaf.FieldLeafSpentRevocationPrivateKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field leaf_spent_revocation_private_key", values[i])
			} else if value != nil {
				tl.LeafSpentRevocationPrivateKey = *value
			}
		case tokenleaf.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field token_leaf_revocation_keyshare", values[i])
			} else if value.Valid {
				tl.token_leaf_revocation_keyshare = new(uuid.UUID)
				*tl.token_leaf_revocation_keyshare = *value.S.(*uuid.UUID)
			}
		case tokenleaf.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field token_leaf_leaf_created_token_transaction_receipt", values[i])
			} else if value.Valid {
				tl.token_leaf_leaf_created_token_transaction_receipt = new(uuid.UUID)
				*tl.token_leaf_leaf_created_token_transaction_receipt = *value.S.(*uuid.UUID)
			}
		case tokenleaf.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field token_leaf_leaf_spent_token_transaction_receipt", values[i])
			} else if value.Valid {
				tl.token_leaf_leaf_spent_token_transaction_receipt = new(uuid.UUID)
				*tl.token_leaf_leaf_spent_token_transaction_receipt = *value.S.(*uuid.UUID)
			}
		default:
			tl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TokenLeaf.
// This includes values selected through modifiers, order, etc.
func (tl *TokenLeaf) Value(name string) (ent.Value, error) {
	return tl.selectValues.Get(name)
}

// QueryRevocationKeyshare queries the "revocation_keyshare" edge of the TokenLeaf entity.
func (tl *TokenLeaf) QueryRevocationKeyshare() *SigningKeyshareQuery {
	return NewTokenLeafClient(tl.config).QueryRevocationKeyshare(tl)
}

// QueryLeafCreatedTokenTransactionReceipt queries the "leaf_created_token_transaction_receipt" edge of the TokenLeaf entity.
func (tl *TokenLeaf) QueryLeafCreatedTokenTransactionReceipt() *TokenTransactionReceiptQuery {
	return NewTokenLeafClient(tl.config).QueryLeafCreatedTokenTransactionReceipt(tl)
}

// QueryLeafSpentTokenTransactionReceipt queries the "leaf_spent_token_transaction_receipt" edge of the TokenLeaf entity.
func (tl *TokenLeaf) QueryLeafSpentTokenTransactionReceipt() *TokenTransactionReceiptQuery {
	return NewTokenLeafClient(tl.config).QueryLeafSpentTokenTransactionReceipt(tl)
}

// Update returns a builder for updating this TokenLeaf.
// Note that you need to call TokenLeaf.Unwrap() before calling this method if this TokenLeaf
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TokenLeaf) Update() *TokenLeafUpdateOne {
	return NewTokenLeafClient(tl.config).UpdateOne(tl)
}

// Unwrap unwraps the TokenLeaf entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TokenLeaf) Unwrap() *TokenLeaf {
	_tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TokenLeaf is not a transactional entity")
	}
	tl.config.driver = _tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TokenLeaf) String() string {
	var builder strings.Builder
	builder.WriteString("TokenLeaf(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tl.ID))
	builder.WriteString("create_time=")
	builder.WriteString(tl.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(tl.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", tl.Status))
	builder.WriteString(", ")
	builder.WriteString("owner_public_key=")
	builder.WriteString(fmt.Sprintf("%v", tl.OwnerPublicKey))
	builder.WriteString(", ")
	builder.WriteString("withdrawal_bond_sats=")
	builder.WriteString(fmt.Sprintf("%v", tl.WithdrawalBondSats))
	builder.WriteString(", ")
	builder.WriteString("withdrawal_locktime=")
	builder.WriteString(fmt.Sprintf("%v", tl.WithdrawalLocktime))
	builder.WriteString(", ")
	builder.WriteString("withdrawal_revocation_public_key=")
	builder.WriteString(fmt.Sprintf("%v", tl.WithdrawalRevocationPublicKey))
	builder.WriteString(", ")
	builder.WriteString("token_public_key=")
	builder.WriteString(fmt.Sprintf("%v", tl.TokenPublicKey))
	builder.WriteString(", ")
	builder.WriteString("token_amount=")
	builder.WriteString(fmt.Sprintf("%v", tl.TokenAmount))
	builder.WriteString(", ")
	builder.WriteString("leaf_created_transaction_output_vout=")
	builder.WriteString(fmt.Sprintf("%v", tl.LeafCreatedTransactionOutputVout))
	builder.WriteString(", ")
	builder.WriteString("leaf_spent_ownership_signature=")
	builder.WriteString(fmt.Sprintf("%v", tl.LeafSpentOwnershipSignature))
	builder.WriteString(", ")
	builder.WriteString("leaf_spent_operator_specific_ownership_signature=")
	builder.WriteString(fmt.Sprintf("%v", tl.LeafSpentOperatorSpecificOwnershipSignature))
	builder.WriteString(", ")
	builder.WriteString("leaf_spent_transaction_input_vout=")
	builder.WriteString(fmt.Sprintf("%v", tl.LeafSpentTransactionInputVout))
	builder.WriteString(", ")
	builder.WriteString("leaf_spent_revocation_private_key=")
	builder.WriteString(fmt.Sprintf("%v", tl.LeafSpentRevocationPrivateKey))
	builder.WriteByte(')')
	return builder.String()
}

// TokenLeafs is a parsable slice of TokenLeaf.
type TokenLeafs []*TokenLeaf
