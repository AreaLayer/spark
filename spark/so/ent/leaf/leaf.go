// Code generated by ent, DO NOT EDIT.

package leaf

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/schema"
)

const (
	// Label holds the string label denoting the leaf type in the database.
	Label = "leaf"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldValueSats holds the string denoting the value_sats field in the database.
	FieldValueSats = "value_sats"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTreeID holds the string denoting the tree_id field in the database.
	FieldTreeID = "tree_id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldVerifyingPubkey holds the string denoting the verifying_pubkey field in the database.
	FieldVerifyingPubkey = "verifying_pubkey"
	// FieldOwnerIdentityPubkey holds the string denoting the owner_identity_pubkey field in the database.
	FieldOwnerIdentityPubkey = "owner_identity_pubkey"
	// FieldOwnerSigningPubkey holds the string denoting the owner_signing_pubkey field in the database.
	FieldOwnerSigningPubkey = "owner_signing_pubkey"
	// FieldSigningKeyshareID holds the string denoting the signing_keyshare_id field in the database.
	FieldSigningKeyshareID = "signing_keyshare_id"
	// EdgeTree holds the string denoting the tree edge name in mutations.
	EdgeTree = "tree"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeSigningKeyshare holds the string denoting the signing_keyshare edge name in mutations.
	EdgeSigningKeyshare = "signing_keyshare"
	// Table holds the table name of the leaf in the database.
	Table = "leafs"
	// TreeTable is the table that holds the tree relation/edge.
	TreeTable = "leafs"
	// TreeInverseTable is the table name for the Tree entity.
	// It exists in this package in order to avoid circular dependency with the "tree" package.
	TreeInverseTable = "trees"
	// TreeColumn is the table column denoting the tree relation/edge.
	TreeColumn = "tree_id"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "leafs"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// SigningKeyshareTable is the table that holds the signing_keyshare relation/edge.
	SigningKeyshareTable = "leafs"
	// SigningKeyshareInverseTable is the table name for the SigningKeyshare entity.
	// It exists in this package in order to avoid circular dependency with the "signingkeyshare" package.
	SigningKeyshareInverseTable = "signing_keyshares"
	// SigningKeyshareColumn is the table column denoting the signing_keyshare relation/edge.
	SigningKeyshareColumn = "signing_keyshare_id"
)

// Columns holds all SQL columns for leaf fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldValueSats,
	FieldStatus,
	FieldTreeID,
	FieldParentID,
	FieldVerifyingPubkey,
	FieldOwnerIdentityPubkey,
	FieldOwnerSigningPubkey,
	FieldSigningKeyshareID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// VerifyingPubkeyValidator is a validator for the "verifying_pubkey" field. It is called by the builders before save.
	VerifyingPubkeyValidator func([]byte) error
	// OwnerIdentityPubkeyValidator is a validator for the "owner_identity_pubkey" field. It is called by the builders before save.
	OwnerIdentityPubkeyValidator func([]byte) error
	// OwnerSigningPubkeyValidator is a validator for the "owner_signing_pubkey" field. It is called by the builders before save.
	OwnerSigningPubkeyValidator func([]byte) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s schema.LeafStatus) error {
	switch s {
	case "AVAILABLE", "FROZEN_BY_ISSUER", "TRANSFER_LOCKED", "SPLIT_LOCKED", "SPLITTED", "AGGREGATED", "ON_CHAIN":
		return nil
	default:
		return fmt.Errorf("leaf: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Leaf queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByValueSats orders the results by the value_sats field.
func ByValueSats(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValueSats, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTreeID orders the results by the tree_id field.
func ByTreeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTreeID, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// BySigningKeyshareID orders the results by the signing_keyshare_id field.
func BySigningKeyshareID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSigningKeyshareID, opts...).ToFunc()
}

// ByTreeField orders the results by tree field.
func ByTreeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTreeStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// BySigningKeyshareField orders the results by signing_keyshare field.
func BySigningKeyshareField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSigningKeyshareStep(), sql.OrderByField(field, opts...))
	}
}
func newTreeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TreeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TreeTable, TreeColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ParentTable, ParentColumn),
	)
}
func newSigningKeyshareStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SigningKeyshareInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SigningKeyshareTable, SigningKeyshareColumn),
	)
}
