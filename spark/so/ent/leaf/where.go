// Code generated by ent, DO NOT EDIT.

package leaf

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/predicate"
	"github.com/lightsparkdev/spark-go/so/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldUpdateTime, v))
}

// ValueSats applies equality check predicate on the "value_sats" field. It's identical to ValueSatsEQ.
func ValueSats(v uint64) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldValueSats, v))
}

// TreeID applies equality check predicate on the "tree_id" field. It's identical to TreeIDEQ.
func TreeID(v uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldTreeID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldParentID, v))
}

// VerifyingPubkey applies equality check predicate on the "verifying_pubkey" field. It's identical to VerifyingPubkeyEQ.
func VerifyingPubkey(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldVerifyingPubkey, v))
}

// OwnerIdentityPubkey applies equality check predicate on the "owner_identity_pubkey" field. It's identical to OwnerIdentityPubkeyEQ.
func OwnerIdentityPubkey(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldOwnerIdentityPubkey, v))
}

// OwnerSigningPubkey applies equality check predicate on the "owner_signing_pubkey" field. It's identical to OwnerSigningPubkeyEQ.
func OwnerSigningPubkey(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldOwnerSigningPubkey, v))
}

// SigningKeyshareID applies equality check predicate on the "signing_keyshare_id" field. It's identical to SigningKeyshareIDEQ.
func SigningKeyshareID(v uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldSigningKeyshareID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Leaf {
	return predicate.Leaf(sql.FieldLTE(FieldUpdateTime, v))
}

// ValueSatsEQ applies the EQ predicate on the "value_sats" field.
func ValueSatsEQ(v uint64) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldValueSats, v))
}

// ValueSatsNEQ applies the NEQ predicate on the "value_sats" field.
func ValueSatsNEQ(v uint64) predicate.Leaf {
	return predicate.Leaf(sql.FieldNEQ(FieldValueSats, v))
}

// ValueSatsIn applies the In predicate on the "value_sats" field.
func ValueSatsIn(vs ...uint64) predicate.Leaf {
	return predicate.Leaf(sql.FieldIn(FieldValueSats, vs...))
}

// ValueSatsNotIn applies the NotIn predicate on the "value_sats" field.
func ValueSatsNotIn(vs ...uint64) predicate.Leaf {
	return predicate.Leaf(sql.FieldNotIn(FieldValueSats, vs...))
}

// ValueSatsGT applies the GT predicate on the "value_sats" field.
func ValueSatsGT(v uint64) predicate.Leaf {
	return predicate.Leaf(sql.FieldGT(FieldValueSats, v))
}

// ValueSatsGTE applies the GTE predicate on the "value_sats" field.
func ValueSatsGTE(v uint64) predicate.Leaf {
	return predicate.Leaf(sql.FieldGTE(FieldValueSats, v))
}

// ValueSatsLT applies the LT predicate on the "value_sats" field.
func ValueSatsLT(v uint64) predicate.Leaf {
	return predicate.Leaf(sql.FieldLT(FieldValueSats, v))
}

// ValueSatsLTE applies the LTE predicate on the "value_sats" field.
func ValueSatsLTE(v uint64) predicate.Leaf {
	return predicate.Leaf(sql.FieldLTE(FieldValueSats, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schema.LeafStatus) predicate.Leaf {
	vc := v
	return predicate.Leaf(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schema.LeafStatus) predicate.Leaf {
	vc := v
	return predicate.Leaf(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schema.LeafStatus) predicate.Leaf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Leaf(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schema.LeafStatus) predicate.Leaf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Leaf(sql.FieldNotIn(FieldStatus, v...))
}

// TreeIDEQ applies the EQ predicate on the "tree_id" field.
func TreeIDEQ(v uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldTreeID, v))
}

// TreeIDNEQ applies the NEQ predicate on the "tree_id" field.
func TreeIDNEQ(v uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldNEQ(FieldTreeID, v))
}

// TreeIDIn applies the In predicate on the "tree_id" field.
func TreeIDIn(vs ...uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldIn(FieldTreeID, vs...))
}

// TreeIDNotIn applies the NotIn predicate on the "tree_id" field.
func TreeIDNotIn(vs ...uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldNotIn(FieldTreeID, vs...))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldNotIn(FieldParentID, vs...))
}

// VerifyingPubkeyEQ applies the EQ predicate on the "verifying_pubkey" field.
func VerifyingPubkeyEQ(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldVerifyingPubkey, v))
}

// VerifyingPubkeyNEQ applies the NEQ predicate on the "verifying_pubkey" field.
func VerifyingPubkeyNEQ(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldNEQ(FieldVerifyingPubkey, v))
}

// VerifyingPubkeyIn applies the In predicate on the "verifying_pubkey" field.
func VerifyingPubkeyIn(vs ...[]byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldIn(FieldVerifyingPubkey, vs...))
}

// VerifyingPubkeyNotIn applies the NotIn predicate on the "verifying_pubkey" field.
func VerifyingPubkeyNotIn(vs ...[]byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldNotIn(FieldVerifyingPubkey, vs...))
}

// VerifyingPubkeyGT applies the GT predicate on the "verifying_pubkey" field.
func VerifyingPubkeyGT(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldGT(FieldVerifyingPubkey, v))
}

// VerifyingPubkeyGTE applies the GTE predicate on the "verifying_pubkey" field.
func VerifyingPubkeyGTE(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldGTE(FieldVerifyingPubkey, v))
}

// VerifyingPubkeyLT applies the LT predicate on the "verifying_pubkey" field.
func VerifyingPubkeyLT(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldLT(FieldVerifyingPubkey, v))
}

// VerifyingPubkeyLTE applies the LTE predicate on the "verifying_pubkey" field.
func VerifyingPubkeyLTE(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldLTE(FieldVerifyingPubkey, v))
}

// OwnerIdentityPubkeyEQ applies the EQ predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyEQ(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyNEQ applies the NEQ predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyNEQ(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldNEQ(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyIn applies the In predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyIn(vs ...[]byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldIn(FieldOwnerIdentityPubkey, vs...))
}

// OwnerIdentityPubkeyNotIn applies the NotIn predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyNotIn(vs ...[]byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldNotIn(FieldOwnerIdentityPubkey, vs...))
}

// OwnerIdentityPubkeyGT applies the GT predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyGT(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldGT(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyGTE applies the GTE predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyGTE(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldGTE(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyLT applies the LT predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyLT(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldLT(FieldOwnerIdentityPubkey, v))
}

// OwnerIdentityPubkeyLTE applies the LTE predicate on the "owner_identity_pubkey" field.
func OwnerIdentityPubkeyLTE(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldLTE(FieldOwnerIdentityPubkey, v))
}

// OwnerSigningPubkeyEQ applies the EQ predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyEQ(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyNEQ applies the NEQ predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyNEQ(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldNEQ(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyIn applies the In predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyIn(vs ...[]byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldIn(FieldOwnerSigningPubkey, vs...))
}

// OwnerSigningPubkeyNotIn applies the NotIn predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyNotIn(vs ...[]byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldNotIn(FieldOwnerSigningPubkey, vs...))
}

// OwnerSigningPubkeyGT applies the GT predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyGT(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldGT(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyGTE applies the GTE predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyGTE(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldGTE(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyLT applies the LT predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyLT(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldLT(FieldOwnerSigningPubkey, v))
}

// OwnerSigningPubkeyLTE applies the LTE predicate on the "owner_signing_pubkey" field.
func OwnerSigningPubkeyLTE(v []byte) predicate.Leaf {
	return predicate.Leaf(sql.FieldLTE(FieldOwnerSigningPubkey, v))
}

// SigningKeyshareIDEQ applies the EQ predicate on the "signing_keyshare_id" field.
func SigningKeyshareIDEQ(v uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldEQ(FieldSigningKeyshareID, v))
}

// SigningKeyshareIDNEQ applies the NEQ predicate on the "signing_keyshare_id" field.
func SigningKeyshareIDNEQ(v uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldNEQ(FieldSigningKeyshareID, v))
}

// SigningKeyshareIDIn applies the In predicate on the "signing_keyshare_id" field.
func SigningKeyshareIDIn(vs ...uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldIn(FieldSigningKeyshareID, vs...))
}

// SigningKeyshareIDNotIn applies the NotIn predicate on the "signing_keyshare_id" field.
func SigningKeyshareIDNotIn(vs ...uuid.UUID) predicate.Leaf {
	return predicate.Leaf(sql.FieldNotIn(FieldSigningKeyshareID, vs...))
}

// HasTree applies the HasEdge predicate on the "tree" edge.
func HasTree() predicate.Leaf {
	return predicate.Leaf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TreeTable, TreeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTreeWith applies the HasEdge predicate on the "tree" edge with a given conditions (other predicates).
func HasTreeWith(preds ...predicate.Tree) predicate.Leaf {
	return predicate.Leaf(func(s *sql.Selector) {
		step := newTreeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Leaf {
	return predicate.Leaf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Leaf) predicate.Leaf {
	return predicate.Leaf(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSigningKeyshare applies the HasEdge predicate on the "signing_keyshare" edge.
func HasSigningKeyshare() predicate.Leaf {
	return predicate.Leaf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SigningKeyshareTable, SigningKeyshareColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSigningKeyshareWith applies the HasEdge predicate on the "signing_keyshare" edge with a given conditions (other predicates).
func HasSigningKeyshareWith(preds ...predicate.SigningKeyshare) predicate.Leaf {
	return predicate.Leaf(func(s *sql.Selector) {
		step := newSigningKeyshareStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Leaf) predicate.Leaf {
	return predicate.Leaf(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Leaf) predicate.Leaf {
	return predicate.Leaf(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Leaf) predicate.Leaf {
	return predicate.Leaf(sql.NotPredicates(p))
}
