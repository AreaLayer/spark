// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/leaf"
	"github.com/lightsparkdev/spark-go/so/ent/predicate"
	"github.com/lightsparkdev/spark-go/so/ent/tree"
)

// TreeUpdate is the builder for updating Tree entities.
type TreeUpdate struct {
	config
	hooks    []Hook
	mutation *TreeMutation
}

// Where appends a list predicates to the TreeUpdate builder.
func (tu *TreeUpdate) Where(ps ...predicate.Tree) *TreeUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdateTime sets the "update_time" field.
func (tu *TreeUpdate) SetUpdateTime(t time.Time) *TreeUpdate {
	tu.mutation.SetUpdateTime(t)
	return tu
}

// SetRootID sets the "root_id" field.
func (tu *TreeUpdate) SetRootID(u uuid.UUID) *TreeUpdate {
	tu.mutation.SetRootID(u)
	return tu
}

// SetNillableRootID sets the "root_id" field if the given value is not nil.
func (tu *TreeUpdate) SetNillableRootID(u *uuid.UUID) *TreeUpdate {
	if u != nil {
		tu.SetRootID(*u)
	}
	return tu
}

// SetOwnerIdentityPubkey sets the "owner_identity_pubkey" field.
func (tu *TreeUpdate) SetOwnerIdentityPubkey(b []byte) *TreeUpdate {
	tu.mutation.SetOwnerIdentityPubkey(b)
	return tu
}

// SetRoot sets the "root" edge to the Leaf entity.
func (tu *TreeUpdate) SetRoot(l *Leaf) *TreeUpdate {
	return tu.SetRootID(l.ID)
}

// AddLeafeIDs adds the "leaves" edge to the Leaf entity by IDs.
func (tu *TreeUpdate) AddLeafeIDs(ids ...uuid.UUID) *TreeUpdate {
	tu.mutation.AddLeafeIDs(ids...)
	return tu
}

// AddLeaves adds the "leaves" edges to the Leaf entity.
func (tu *TreeUpdate) AddLeaves(l ...*Leaf) *TreeUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.AddLeafeIDs(ids...)
}

// Mutation returns the TreeMutation object of the builder.
func (tu *TreeUpdate) Mutation() *TreeMutation {
	return tu.mutation
}

// ClearRoot clears the "root" edge to the Leaf entity.
func (tu *TreeUpdate) ClearRoot() *TreeUpdate {
	tu.mutation.ClearRoot()
	return tu
}

// ClearLeaves clears all "leaves" edges to the Leaf entity.
func (tu *TreeUpdate) ClearLeaves() *TreeUpdate {
	tu.mutation.ClearLeaves()
	return tu
}

// RemoveLeafeIDs removes the "leaves" edge to Leaf entities by IDs.
func (tu *TreeUpdate) RemoveLeafeIDs(ids ...uuid.UUID) *TreeUpdate {
	tu.mutation.RemoveLeafeIDs(ids...)
	return tu
}

// RemoveLeaves removes "leaves" edges to Leaf entities.
func (tu *TreeUpdate) RemoveLeaves(l ...*Leaf) *TreeUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.RemoveLeafeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TreeUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TreeUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TreeUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TreeUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TreeUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := tree.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TreeUpdate) check() error {
	if v, ok := tu.mutation.OwnerIdentityPubkey(); ok {
		if err := tree.OwnerIdentityPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_identity_pubkey", err: fmt.Errorf(`ent: validator failed for field "Tree.owner_identity_pubkey": %w`, err)}
		}
	}
	if tu.mutation.RootCleared() && len(tu.mutation.RootIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tree.root"`)
	}
	return nil
}

func (tu *TreeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tree.Table, tree.Columns, sqlgraph.NewFieldSpec(tree.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.SetField(tree.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.OwnerIdentityPubkey(); ok {
		_spec.SetField(tree.FieldOwnerIdentityPubkey, field.TypeBytes, value)
	}
	if tu.mutation.RootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tree.RootTable,
			Columns: []string{tree.RootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tree.RootTable,
			Columns: []string{tree.RootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.LeavesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tree.LeavesTable,
			Columns: []string{tree.LeavesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedLeavesIDs(); len(nodes) > 0 && !tu.mutation.LeavesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tree.LeavesTable,
			Columns: []string{tree.LeavesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LeavesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tree.LeavesTable,
			Columns: []string{tree.LeavesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tree.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TreeUpdateOne is the builder for updating a single Tree entity.
type TreeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TreeMutation
}

// SetUpdateTime sets the "update_time" field.
func (tuo *TreeUpdateOne) SetUpdateTime(t time.Time) *TreeUpdateOne {
	tuo.mutation.SetUpdateTime(t)
	return tuo
}

// SetRootID sets the "root_id" field.
func (tuo *TreeUpdateOne) SetRootID(u uuid.UUID) *TreeUpdateOne {
	tuo.mutation.SetRootID(u)
	return tuo
}

// SetNillableRootID sets the "root_id" field if the given value is not nil.
func (tuo *TreeUpdateOne) SetNillableRootID(u *uuid.UUID) *TreeUpdateOne {
	if u != nil {
		tuo.SetRootID(*u)
	}
	return tuo
}

// SetOwnerIdentityPubkey sets the "owner_identity_pubkey" field.
func (tuo *TreeUpdateOne) SetOwnerIdentityPubkey(b []byte) *TreeUpdateOne {
	tuo.mutation.SetOwnerIdentityPubkey(b)
	return tuo
}

// SetRoot sets the "root" edge to the Leaf entity.
func (tuo *TreeUpdateOne) SetRoot(l *Leaf) *TreeUpdateOne {
	return tuo.SetRootID(l.ID)
}

// AddLeafeIDs adds the "leaves" edge to the Leaf entity by IDs.
func (tuo *TreeUpdateOne) AddLeafeIDs(ids ...uuid.UUID) *TreeUpdateOne {
	tuo.mutation.AddLeafeIDs(ids...)
	return tuo
}

// AddLeaves adds the "leaves" edges to the Leaf entity.
func (tuo *TreeUpdateOne) AddLeaves(l ...*Leaf) *TreeUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.AddLeafeIDs(ids...)
}

// Mutation returns the TreeMutation object of the builder.
func (tuo *TreeUpdateOne) Mutation() *TreeMutation {
	return tuo.mutation
}

// ClearRoot clears the "root" edge to the Leaf entity.
func (tuo *TreeUpdateOne) ClearRoot() *TreeUpdateOne {
	tuo.mutation.ClearRoot()
	return tuo
}

// ClearLeaves clears all "leaves" edges to the Leaf entity.
func (tuo *TreeUpdateOne) ClearLeaves() *TreeUpdateOne {
	tuo.mutation.ClearLeaves()
	return tuo
}

// RemoveLeafeIDs removes the "leaves" edge to Leaf entities by IDs.
func (tuo *TreeUpdateOne) RemoveLeafeIDs(ids ...uuid.UUID) *TreeUpdateOne {
	tuo.mutation.RemoveLeafeIDs(ids...)
	return tuo
}

// RemoveLeaves removes "leaves" edges to Leaf entities.
func (tuo *TreeUpdateOne) RemoveLeaves(l ...*Leaf) *TreeUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.RemoveLeafeIDs(ids...)
}

// Where appends a list predicates to the TreeUpdate builder.
func (tuo *TreeUpdateOne) Where(ps ...predicate.Tree) *TreeUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TreeUpdateOne) Select(field string, fields ...string) *TreeUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tree entity.
func (tuo *TreeUpdateOne) Save(ctx context.Context) (*Tree, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TreeUpdateOne) SaveX(ctx context.Context) *Tree {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TreeUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TreeUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TreeUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := tree.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TreeUpdateOne) check() error {
	if v, ok := tuo.mutation.OwnerIdentityPubkey(); ok {
		if err := tree.OwnerIdentityPubkeyValidator(v); err != nil {
			return &ValidationError{Name: "owner_identity_pubkey", err: fmt.Errorf(`ent: validator failed for field "Tree.owner_identity_pubkey": %w`, err)}
		}
	}
	if tuo.mutation.RootCleared() && len(tuo.mutation.RootIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tree.root"`)
	}
	return nil
}

func (tuo *TreeUpdateOne) sqlSave(ctx context.Context) (_node *Tree, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tree.Table, tree.Columns, sqlgraph.NewFieldSpec(tree.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tree.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tree.FieldID)
		for _, f := range fields {
			if !tree.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tree.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.SetField(tree.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.OwnerIdentityPubkey(); ok {
		_spec.SetField(tree.FieldOwnerIdentityPubkey, field.TypeBytes, value)
	}
	if tuo.mutation.RootCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tree.RootTable,
			Columns: []string{tree.RootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RootIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tree.RootTable,
			Columns: []string{tree.RootColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.LeavesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tree.LeavesTable,
			Columns: []string{tree.LeavesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedLeavesIDs(); len(nodes) > 0 && !tuo.mutation.LeavesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tree.LeavesTable,
			Columns: []string{tree.LeavesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LeavesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tree.LeavesTable,
			Columns: []string{tree.LeavesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tree{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tree.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
