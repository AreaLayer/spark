// Code generated by ent, DO NOT EDIT.

package transferleaf

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldUpdateTime, v))
}

// SecretCipher applies equality check predicate on the "secret_cipher" field. It's identical to SecretCipherEQ.
func SecretCipher(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldSecretCipher, v))
}

// Signature applies equality check predicate on the "signature" field. It's identical to SignatureEQ.
func Signature(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldSignature, v))
}

// PreviousRefundTx applies equality check predicate on the "previous_refund_tx" field. It's identical to PreviousRefundTxEQ.
func PreviousRefundTx(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldPreviousRefundTx, v))
}

// IntermediateRefundTx applies equality check predicate on the "intermediate_refund_tx" field. It's identical to IntermediateRefundTxEQ.
func IntermediateRefundTx(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldIntermediateRefundTx, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldUpdateTime, v))
}

// SecretCipherEQ applies the EQ predicate on the "secret_cipher" field.
func SecretCipherEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldSecretCipher, v))
}

// SecretCipherNEQ applies the NEQ predicate on the "secret_cipher" field.
func SecretCipherNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldSecretCipher, v))
}

// SecretCipherIn applies the In predicate on the "secret_cipher" field.
func SecretCipherIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldSecretCipher, vs...))
}

// SecretCipherNotIn applies the NotIn predicate on the "secret_cipher" field.
func SecretCipherNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldSecretCipher, vs...))
}

// SecretCipherGT applies the GT predicate on the "secret_cipher" field.
func SecretCipherGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldSecretCipher, v))
}

// SecretCipherGTE applies the GTE predicate on the "secret_cipher" field.
func SecretCipherGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldSecretCipher, v))
}

// SecretCipherLT applies the LT predicate on the "secret_cipher" field.
func SecretCipherLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldSecretCipher, v))
}

// SecretCipherLTE applies the LTE predicate on the "secret_cipher" field.
func SecretCipherLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldSecretCipher, v))
}

// SignatureEQ applies the EQ predicate on the "signature" field.
func SignatureEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldSignature, v))
}

// SignatureNEQ applies the NEQ predicate on the "signature" field.
func SignatureNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldSignature, v))
}

// SignatureIn applies the In predicate on the "signature" field.
func SignatureIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldSignature, vs...))
}

// SignatureNotIn applies the NotIn predicate on the "signature" field.
func SignatureNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldSignature, vs...))
}

// SignatureGT applies the GT predicate on the "signature" field.
func SignatureGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldSignature, v))
}

// SignatureGTE applies the GTE predicate on the "signature" field.
func SignatureGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldSignature, v))
}

// SignatureLT applies the LT predicate on the "signature" field.
func SignatureLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldSignature, v))
}

// SignatureLTE applies the LTE predicate on the "signature" field.
func SignatureLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldSignature, v))
}

// PreviousRefundTxEQ applies the EQ predicate on the "previous_refund_tx" field.
func PreviousRefundTxEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldPreviousRefundTx, v))
}

// PreviousRefundTxNEQ applies the NEQ predicate on the "previous_refund_tx" field.
func PreviousRefundTxNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldPreviousRefundTx, v))
}

// PreviousRefundTxIn applies the In predicate on the "previous_refund_tx" field.
func PreviousRefundTxIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldPreviousRefundTx, vs...))
}

// PreviousRefundTxNotIn applies the NotIn predicate on the "previous_refund_tx" field.
func PreviousRefundTxNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldPreviousRefundTx, vs...))
}

// PreviousRefundTxGT applies the GT predicate on the "previous_refund_tx" field.
func PreviousRefundTxGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldPreviousRefundTx, v))
}

// PreviousRefundTxGTE applies the GTE predicate on the "previous_refund_tx" field.
func PreviousRefundTxGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldPreviousRefundTx, v))
}

// PreviousRefundTxLT applies the LT predicate on the "previous_refund_tx" field.
func PreviousRefundTxLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldPreviousRefundTx, v))
}

// PreviousRefundTxLTE applies the LTE predicate on the "previous_refund_tx" field.
func PreviousRefundTxLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldPreviousRefundTx, v))
}

// IntermediateRefundTxEQ applies the EQ predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldEQ(FieldIntermediateRefundTx, v))
}

// IntermediateRefundTxNEQ applies the NEQ predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxNEQ(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNEQ(FieldIntermediateRefundTx, v))
}

// IntermediateRefundTxIn applies the In predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldIn(FieldIntermediateRefundTx, vs...))
}

// IntermediateRefundTxNotIn applies the NotIn predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxNotIn(vs ...[]byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldNotIn(FieldIntermediateRefundTx, vs...))
}

// IntermediateRefundTxGT applies the GT predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxGT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGT(FieldIntermediateRefundTx, v))
}

// IntermediateRefundTxGTE applies the GTE predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxGTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldGTE(FieldIntermediateRefundTx, v))
}

// IntermediateRefundTxLT applies the LT predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxLT(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLT(FieldIntermediateRefundTx, v))
}

// IntermediateRefundTxLTE applies the LTE predicate on the "intermediate_refund_tx" field.
func IntermediateRefundTxLTE(v []byte) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.FieldLTE(FieldIntermediateRefundTx, v))
}

// HasTransfer applies the HasEdge predicate on the "transfer" edge.
func HasTransfer() predicate.TransferLeaf {
	return predicate.TransferLeaf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TransferTable, TransferColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransferWith applies the HasEdge predicate on the "transfer" edge with a given conditions (other predicates).
func HasTransferWith(preds ...predicate.Transfer) predicate.TransferLeaf {
	return predicate.TransferLeaf(func(s *sql.Selector) {
		step := newTransferStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLeaf applies the HasEdge predicate on the "leaf" edge.
func HasLeaf() predicate.TransferLeaf {
	return predicate.TransferLeaf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LeafTable, LeafColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeafWith applies the HasEdge predicate on the "leaf" edge with a given conditions (other predicates).
func HasLeafWith(preds ...predicate.TreeNode) predicate.TransferLeaf {
	return predicate.TransferLeaf(func(s *sql.Selector) {
		step := newLeafStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TransferLeaf) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TransferLeaf) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TransferLeaf) predicate.TransferLeaf {
	return predicate.TransferLeaf(sql.NotPredicates(p))
}
