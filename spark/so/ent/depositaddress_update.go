// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/depositaddress"
	"github.com/lightsparkdev/spark-go/so/ent/predicate"
	"github.com/lightsparkdev/spark-go/so/ent/signingkeyshare"
)

// DepositAddressUpdate is the builder for updating DepositAddress entities.
type DepositAddressUpdate struct {
	config
	hooks    []Hook
	mutation *DepositAddressMutation
}

// Where appends a list predicates to the DepositAddressUpdate builder.
func (dau *DepositAddressUpdate) Where(ps ...predicate.DepositAddress) *DepositAddressUpdate {
	dau.mutation.Where(ps...)
	return dau
}

// SetUpdateTime sets the "update_time" field.
func (dau *DepositAddressUpdate) SetUpdateTime(t time.Time) *DepositAddressUpdate {
	dau.mutation.SetUpdateTime(t)
	return dau
}

// SetAddress sets the "address" field.
func (dau *DepositAddressUpdate) SetAddress(s string) *DepositAddressUpdate {
	dau.mutation.SetAddress(s)
	return dau
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (dau *DepositAddressUpdate) SetNillableAddress(s *string) *DepositAddressUpdate {
	if s != nil {
		dau.SetAddress(*s)
	}
	return dau
}

// SetKeyshareID sets the "keyshare" edge to the SigningKeyshare entity by ID.
func (dau *DepositAddressUpdate) SetKeyshareID(id uuid.UUID) *DepositAddressUpdate {
	dau.mutation.SetKeyshareID(id)
	return dau
}

// SetNillableKeyshareID sets the "keyshare" edge to the SigningKeyshare entity by ID if the given value is not nil.
func (dau *DepositAddressUpdate) SetNillableKeyshareID(id *uuid.UUID) *DepositAddressUpdate {
	if id != nil {
		dau = dau.SetKeyshareID(*id)
	}
	return dau
}

// SetKeyshare sets the "keyshare" edge to the SigningKeyshare entity.
func (dau *DepositAddressUpdate) SetKeyshare(s *SigningKeyshare) *DepositAddressUpdate {
	return dau.SetKeyshareID(s.ID)
}

// Mutation returns the DepositAddressMutation object of the builder.
func (dau *DepositAddressUpdate) Mutation() *DepositAddressMutation {
	return dau.mutation
}

// ClearKeyshare clears the "keyshare" edge to the SigningKeyshare entity.
func (dau *DepositAddressUpdate) ClearKeyshare() *DepositAddressUpdate {
	dau.mutation.ClearKeyshare()
	return dau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dau *DepositAddressUpdate) Save(ctx context.Context) (int, error) {
	dau.defaults()
	return withHooks(ctx, dau.sqlSave, dau.mutation, dau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dau *DepositAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := dau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dau *DepositAddressUpdate) Exec(ctx context.Context) error {
	_, err := dau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dau *DepositAddressUpdate) ExecX(ctx context.Context) {
	if err := dau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dau *DepositAddressUpdate) defaults() {
	if _, ok := dau.mutation.UpdateTime(); !ok {
		v := depositaddress.UpdateDefaultUpdateTime()
		dau.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dau *DepositAddressUpdate) check() error {
	if v, ok := dau.mutation.Address(); ok {
		if err := depositaddress.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "DepositAddress.address": %w`, err)}
		}
	}
	return nil
}

func (dau *DepositAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(depositaddress.Table, depositaddress.Columns, sqlgraph.NewFieldSpec(depositaddress.FieldID, field.TypeUUID))
	if ps := dau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dau.mutation.UpdateTime(); ok {
		_spec.SetField(depositaddress.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dau.mutation.Address(); ok {
		_spec.SetField(depositaddress.FieldAddress, field.TypeString, value)
	}
	if dau.mutation.KeyshareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   depositaddress.KeyshareTable,
			Columns: []string{depositaddress.KeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dau.mutation.KeyshareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   depositaddress.KeyshareTable,
			Columns: []string{depositaddress.KeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{depositaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dau.mutation.done = true
	return n, nil
}

// DepositAddressUpdateOne is the builder for updating a single DepositAddress entity.
type DepositAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepositAddressMutation
}

// SetUpdateTime sets the "update_time" field.
func (dauo *DepositAddressUpdateOne) SetUpdateTime(t time.Time) *DepositAddressUpdateOne {
	dauo.mutation.SetUpdateTime(t)
	return dauo
}

// SetAddress sets the "address" field.
func (dauo *DepositAddressUpdateOne) SetAddress(s string) *DepositAddressUpdateOne {
	dauo.mutation.SetAddress(s)
	return dauo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (dauo *DepositAddressUpdateOne) SetNillableAddress(s *string) *DepositAddressUpdateOne {
	if s != nil {
		dauo.SetAddress(*s)
	}
	return dauo
}

// SetKeyshareID sets the "keyshare" edge to the SigningKeyshare entity by ID.
func (dauo *DepositAddressUpdateOne) SetKeyshareID(id uuid.UUID) *DepositAddressUpdateOne {
	dauo.mutation.SetKeyshareID(id)
	return dauo
}

// SetNillableKeyshareID sets the "keyshare" edge to the SigningKeyshare entity by ID if the given value is not nil.
func (dauo *DepositAddressUpdateOne) SetNillableKeyshareID(id *uuid.UUID) *DepositAddressUpdateOne {
	if id != nil {
		dauo = dauo.SetKeyshareID(*id)
	}
	return dauo
}

// SetKeyshare sets the "keyshare" edge to the SigningKeyshare entity.
func (dauo *DepositAddressUpdateOne) SetKeyshare(s *SigningKeyshare) *DepositAddressUpdateOne {
	return dauo.SetKeyshareID(s.ID)
}

// Mutation returns the DepositAddressMutation object of the builder.
func (dauo *DepositAddressUpdateOne) Mutation() *DepositAddressMutation {
	return dauo.mutation
}

// ClearKeyshare clears the "keyshare" edge to the SigningKeyshare entity.
func (dauo *DepositAddressUpdateOne) ClearKeyshare() *DepositAddressUpdateOne {
	dauo.mutation.ClearKeyshare()
	return dauo
}

// Where appends a list predicates to the DepositAddressUpdate builder.
func (dauo *DepositAddressUpdateOne) Where(ps ...predicate.DepositAddress) *DepositAddressUpdateOne {
	dauo.mutation.Where(ps...)
	return dauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dauo *DepositAddressUpdateOne) Select(field string, fields ...string) *DepositAddressUpdateOne {
	dauo.fields = append([]string{field}, fields...)
	return dauo
}

// Save executes the query and returns the updated DepositAddress entity.
func (dauo *DepositAddressUpdateOne) Save(ctx context.Context) (*DepositAddress, error) {
	dauo.defaults()
	return withHooks(ctx, dauo.sqlSave, dauo.mutation, dauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dauo *DepositAddressUpdateOne) SaveX(ctx context.Context) *DepositAddress {
	node, err := dauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dauo *DepositAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := dauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dauo *DepositAddressUpdateOne) ExecX(ctx context.Context) {
	if err := dauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dauo *DepositAddressUpdateOne) defaults() {
	if _, ok := dauo.mutation.UpdateTime(); !ok {
		v := depositaddress.UpdateDefaultUpdateTime()
		dauo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dauo *DepositAddressUpdateOne) check() error {
	if v, ok := dauo.mutation.Address(); ok {
		if err := depositaddress.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "DepositAddress.address": %w`, err)}
		}
	}
	return nil
}

func (dauo *DepositAddressUpdateOne) sqlSave(ctx context.Context) (_node *DepositAddress, err error) {
	if err := dauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(depositaddress.Table, depositaddress.Columns, sqlgraph.NewFieldSpec(depositaddress.FieldID, field.TypeUUID))
	id, ok := dauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DepositAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, depositaddress.FieldID)
		for _, f := range fields {
			if !depositaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != depositaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dauo.mutation.UpdateTime(); ok {
		_spec.SetField(depositaddress.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dauo.mutation.Address(); ok {
		_spec.SetField(depositaddress.FieldAddress, field.TypeString, value)
	}
	if dauo.mutation.KeyshareCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   depositaddress.KeyshareTable,
			Columns: []string{depositaddress.KeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dauo.mutation.KeyshareIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   depositaddress.KeyshareTable,
			Columns: []string{depositaddress.KeyshareColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signingkeyshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DepositAddress{config: dauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{depositaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dauo.mutation.done = true
	return _node, nil
}
