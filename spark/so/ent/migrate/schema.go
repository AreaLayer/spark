// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DepositAddressesColumns holds the columns for the "deposit_addresses" table.
	DepositAddressesColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "address", Type: field.TypeString},
		{Name: "signing_keyshare_id", Type: field.TypeUUID},
	}
	// DepositAddressesTable holds the schema information for the "deposit_addresses" table.
	DepositAddressesTable = &schema.Table{
		Name:       "deposit_addresses",
		Columns:    DepositAddressesColumns,
		PrimaryKey: []*schema.Column{DepositAddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "deposit_addresses_signing_keyshares_signing_keyshare",
				Columns:    []*schema.Column{DepositAddressesColumns[4]},
				RefColumns: []*schema.Column{SigningKeysharesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "depositaddress_address",
				Unique:  false,
				Columns: []*schema.Column{DepositAddressesColumns[3]},
			},
		},
	}
	// LeafsColumns holds the columns for the "leafs" table.
	LeafsColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "value_sats", Type: field.TypeUint64},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"AVAILABLE", "FROZEN_BY_ISSUER", "TRANSFER_LOCKED", "SPLIT_LOCKED", "SPLITTED", "AGGREGATED", "ON_CHAIN"}},
		{Name: "verifying_pubkey", Type: field.TypeBytes},
		{Name: "owner_identity_pubkey", Type: field.TypeBytes},
		{Name: "owner_signing_pubkey", Type: field.TypeBytes},
		{Name: "parent_id", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "signing_keyshare_id", Type: field.TypeUUID},
		{Name: "tree_id", Type: field.TypeUUID},
	}
	// LeafsTable holds the schema information for the "leafs" table.
	LeafsTable = &schema.Table{
		Name:       "leafs",
		Columns:    LeafsColumns,
		PrimaryKey: []*schema.Column{LeafsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "leafs_leafs_parent",
				Columns:    []*schema.Column{LeafsColumns[8]},
				RefColumns: []*schema.Column{LeafsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "leafs_signing_keyshares_signing_keyshare",
				Columns:    []*schema.Column{LeafsColumns[9]},
				RefColumns: []*schema.Column{SigningKeysharesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "leafs_trees_leaves",
				Columns:    []*schema.Column{LeafsColumns[10]},
				RefColumns: []*schema.Column{TreesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SigningKeysharesColumns holds the columns for the "signing_keyshares" table.
	SigningKeysharesColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"AVAILABLE", "IN_USE"}},
		{Name: "secret_share", Type: field.TypeBytes},
		{Name: "public_shares", Type: field.TypeJSON},
		{Name: "public_key", Type: field.TypeBytes},
		{Name: "min_signers", Type: field.TypeUint32},
		{Name: "coordinator_index", Type: field.TypeUint64},
	}
	// SigningKeysharesTable holds the schema information for the "signing_keyshares" table.
	SigningKeysharesTable = &schema.Table{
		Name:       "signing_keyshares",
		Columns:    SigningKeysharesColumns,
		PrimaryKey: []*schema.Column{SigningKeysharesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "signingkeyshare_coordinator_index",
				Unique:  false,
				Columns: []*schema.Column{SigningKeysharesColumns[8]},
			},
		},
	}
	// TreesColumns holds the columns for the "trees" table.
	TreesColumns = []*schema.Column{
		{Name: "oid", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "owner_identity_pubkey", Type: field.TypeBytes},
		{Name: "root_id", Type: field.TypeUUID},
	}
	// TreesTable holds the schema information for the "trees" table.
	TreesTable = &schema.Table{
		Name:       "trees",
		Columns:    TreesColumns,
		PrimaryKey: []*schema.Column{TreesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "trees_leafs_root",
				Columns:    []*schema.Column{TreesColumns[4]},
				RefColumns: []*schema.Column{LeafsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DepositAddressesTable,
		LeafsTable,
		SigningKeysharesTable,
		TreesTable,
	}
)

func init() {
	DepositAddressesTable.ForeignKeys[0].RefTable = SigningKeysharesTable
	LeafsTable.ForeignKeys[0].RefTable = LeafsTable
	LeafsTable.ForeignKeys[1].RefTable = SigningKeysharesTable
	LeafsTable.ForeignKeys[2].RefTable = TreesTable
	TreesTable.ForeignKeys[0].RefTable = LeafsTable
}
