// Code generated by ent, DO NOT EDIT.

package tree

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the tree type in the database.
	Label = "tree"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "oid"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldRootID holds the string denoting the root_id field in the database.
	FieldRootID = "root_id"
	// FieldOwnerIdentityPubkey holds the string denoting the owner_identity_pubkey field in the database.
	FieldOwnerIdentityPubkey = "owner_identity_pubkey"
	// EdgeRoot holds the string denoting the root edge name in mutations.
	EdgeRoot = "root"
	// EdgeLeaves holds the string denoting the leaves edge name in mutations.
	EdgeLeaves = "leaves"
	// Table holds the table name of the tree in the database.
	Table = "trees"
	// RootTable is the table that holds the root relation/edge.
	RootTable = "trees"
	// RootInverseTable is the table name for the Leaf entity.
	// It exists in this package in order to avoid circular dependency with the "leaf" package.
	RootInverseTable = "leafs"
	// RootColumn is the table column denoting the root relation/edge.
	RootColumn = "root_id"
	// LeavesTable is the table that holds the leaves relation/edge.
	LeavesTable = "leafs"
	// LeavesInverseTable is the table name for the Leaf entity.
	// It exists in this package in order to avoid circular dependency with the "leaf" package.
	LeavesInverseTable = "leafs"
	// LeavesColumn is the table column denoting the leaves relation/edge.
	LeavesColumn = "tree_id"
)

// Columns holds all SQL columns for tree fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldRootID,
	FieldOwnerIdentityPubkey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// OwnerIdentityPubkeyValidator is a validator for the "owner_identity_pubkey" field. It is called by the builders before save.
	OwnerIdentityPubkeyValidator func([]byte) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Tree queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByRootID orders the results by the root_id field.
func ByRootID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRootID, opts...).ToFunc()
}

// ByRootField orders the results by root field.
func ByRootField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRootStep(), sql.OrderByField(field, opts...))
	}
}

// ByLeavesCount orders the results by leaves count.
func ByLeavesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLeavesStep(), opts...)
	}
}

// ByLeaves orders the results by leaves terms.
func ByLeaves(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeavesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRootStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RootInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RootTable, RootColumn),
	)
}
func newLeavesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeavesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LeavesTable, LeavesColumn),
	)
}
