// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/leaf"
	"github.com/lightsparkdev/spark-go/so/ent/schema"
	"github.com/lightsparkdev/spark-go/so/ent/signingkeyshare"
	"github.com/lightsparkdev/spark-go/so/ent/tree"
)

// Leaf is the model entity for the Leaf schema.
type Leaf struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ValueSats holds the value of the "value_sats" field.
	ValueSats uint64 `json:"value_sats,omitempty"`
	// Status holds the value of the "status" field.
	Status schema.LeafStatus `json:"status,omitempty"`
	// TreeID holds the value of the "tree_id" field.
	TreeID uuid.UUID `json:"tree_id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID uuid.UUID `json:"parent_id,omitempty"`
	// VerifyingPubkey holds the value of the "verifying_pubkey" field.
	VerifyingPubkey []byte `json:"verifying_pubkey,omitempty"`
	// OwnerIdentityPubkey holds the value of the "owner_identity_pubkey" field.
	OwnerIdentityPubkey []byte `json:"owner_identity_pubkey,omitempty"`
	// OwnerSigningPubkey holds the value of the "owner_signing_pubkey" field.
	OwnerSigningPubkey []byte `json:"owner_signing_pubkey,omitempty"`
	// SigningKeyshareID holds the value of the "signing_keyshare_id" field.
	SigningKeyshareID uuid.UUID `json:"signing_keyshare_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LeafQuery when eager-loading is set.
	Edges        LeafEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LeafEdges holds the relations/edges for other nodes in the graph.
type LeafEdges struct {
	// Tree holds the value of the tree edge.
	Tree *Tree `json:"tree,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Leaf `json:"parent,omitempty"`
	// SigningKeyshare holds the value of the signing_keyshare edge.
	SigningKeyshare *SigningKeyshare `json:"signing_keyshare,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TreeOrErr returns the Tree value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LeafEdges) TreeOrErr() (*Tree, error) {
	if e.Tree != nil {
		return e.Tree, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tree.Label}
	}
	return nil, &NotLoadedError{edge: "tree"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LeafEdges) ParentOrErr() (*Leaf, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: leaf.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// SigningKeyshareOrErr returns the SigningKeyshare value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LeafEdges) SigningKeyshareOrErr() (*SigningKeyshare, error) {
	if e.SigningKeyshare != nil {
		return e.SigningKeyshare, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: signingkeyshare.Label}
	}
	return nil, &NotLoadedError{edge: "signing_keyshare"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Leaf) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case leaf.FieldVerifyingPubkey, leaf.FieldOwnerIdentityPubkey, leaf.FieldOwnerSigningPubkey:
			values[i] = new([]byte)
		case leaf.FieldValueSats:
			values[i] = new(sql.NullInt64)
		case leaf.FieldStatus:
			values[i] = new(sql.NullString)
		case leaf.FieldCreateTime, leaf.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case leaf.FieldID, leaf.FieldTreeID, leaf.FieldParentID, leaf.FieldSigningKeyshareID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Leaf fields.
func (l *Leaf) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case leaf.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case leaf.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				l.CreateTime = value.Time
			}
		case leaf.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				l.UpdateTime = value.Time
			}
		case leaf.FieldValueSats:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value_sats", values[i])
			} else if value.Valid {
				l.ValueSats = uint64(value.Int64)
			}
		case leaf.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				l.Status = schema.LeafStatus(value.String)
			}
		case leaf.FieldTreeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field tree_id", values[i])
			} else if value != nil {
				l.TreeID = *value
			}
		case leaf.FieldParentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value != nil {
				l.ParentID = *value
			}
		case leaf.FieldVerifyingPubkey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field verifying_pubkey", values[i])
			} else if value != nil {
				l.VerifyingPubkey = *value
			}
		case leaf.FieldOwnerIdentityPubkey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field owner_identity_pubkey", values[i])
			} else if value != nil {
				l.OwnerIdentityPubkey = *value
			}
		case leaf.FieldOwnerSigningPubkey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field owner_signing_pubkey", values[i])
			} else if value != nil {
				l.OwnerSigningPubkey = *value
			}
		case leaf.FieldSigningKeyshareID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field signing_keyshare_id", values[i])
			} else if value != nil {
				l.SigningKeyshareID = *value
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Leaf.
// This includes values selected through modifiers, order, etc.
func (l *Leaf) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryTree queries the "tree" edge of the Leaf entity.
func (l *Leaf) QueryTree() *TreeQuery {
	return NewLeafClient(l.config).QueryTree(l)
}

// QueryParent queries the "parent" edge of the Leaf entity.
func (l *Leaf) QueryParent() *LeafQuery {
	return NewLeafClient(l.config).QueryParent(l)
}

// QuerySigningKeyshare queries the "signing_keyshare" edge of the Leaf entity.
func (l *Leaf) QuerySigningKeyshare() *SigningKeyshareQuery {
	return NewLeafClient(l.config).QuerySigningKeyshare(l)
}

// Update returns a builder for updating this Leaf.
// Note that you need to call Leaf.Unwrap() before calling this method if this Leaf
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Leaf) Update() *LeafUpdateOne {
	return NewLeafClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Leaf entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Leaf) Unwrap() *Leaf {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Leaf is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Leaf) String() string {
	var builder strings.Builder
	builder.WriteString("Leaf(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("create_time=")
	builder.WriteString(l.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(l.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("value_sats=")
	builder.WriteString(fmt.Sprintf("%v", l.ValueSats))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", l.Status))
	builder.WriteString(", ")
	builder.WriteString("tree_id=")
	builder.WriteString(fmt.Sprintf("%v", l.TreeID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", l.ParentID))
	builder.WriteString(", ")
	builder.WriteString("verifying_pubkey=")
	builder.WriteString(fmt.Sprintf("%v", l.VerifyingPubkey))
	builder.WriteString(", ")
	builder.WriteString("owner_identity_pubkey=")
	builder.WriteString(fmt.Sprintf("%v", l.OwnerIdentityPubkey))
	builder.WriteString(", ")
	builder.WriteString("owner_signing_pubkey=")
	builder.WriteString(fmt.Sprintf("%v", l.OwnerSigningPubkey))
	builder.WriteString(", ")
	builder.WriteString("signing_keyshare_id=")
	builder.WriteString(fmt.Sprintf("%v", l.SigningKeyshareID))
	builder.WriteByte(')')
	return builder.String()
}

// Leafs is a parsable slice of Leaf.
type Leafs []*Leaf
