// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lightsparkdev/spark/so/ent/predicate"
	"github.com/lightsparkdev/spark/so/ent/tokentransactionreceipt"
)

// TokenTransactionReceiptDelete is the builder for deleting a TokenTransactionReceipt entity.
type TokenTransactionReceiptDelete struct {
	config
	hooks    []Hook
	mutation *TokenTransactionReceiptMutation
}

// Where appends a list predicates to the TokenTransactionReceiptDelete builder.
func (ttrd *TokenTransactionReceiptDelete) Where(ps ...predicate.TokenTransactionReceipt) *TokenTransactionReceiptDelete {
	ttrd.mutation.Where(ps...)
	return ttrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ttrd *TokenTransactionReceiptDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ttrd.sqlExec, ttrd.mutation, ttrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ttrd *TokenTransactionReceiptDelete) ExecX(ctx context.Context) int {
	n, err := ttrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ttrd *TokenTransactionReceiptDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(tokentransactionreceipt.Table, sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID))
	if ps := ttrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ttrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ttrd.mutation.done = true
	return affected, err
}

// TokenTransactionReceiptDeleteOne is the builder for deleting a single TokenTransactionReceipt entity.
type TokenTransactionReceiptDeleteOne struct {
	ttrd *TokenTransactionReceiptDelete
}

// Where appends a list predicates to the TokenTransactionReceiptDelete builder.
func (ttrdo *TokenTransactionReceiptDeleteOne) Where(ps ...predicate.TokenTransactionReceipt) *TokenTransactionReceiptDeleteOne {
	ttrdo.ttrd.mutation.Where(ps...)
	return ttrdo
}

// Exec executes the deletion query.
func (ttrdo *TokenTransactionReceiptDeleteOne) Exec(ctx context.Context) error {
	n, err := ttrdo.ttrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tokentransactionreceipt.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ttrdo *TokenTransactionReceiptDeleteOne) ExecX(ctx context.Context) {
	if err := ttrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
