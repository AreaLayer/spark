// Code generated by ent, DO NOT EDIT.

package tokenissuance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the tokenissuance type in the database.
	Label = "token_issuance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldIssuerPublicKey holds the string denoting the issuer_public_key field in the database.
	FieldIssuerPublicKey = "issuer_public_key"
	// FieldIssuerSignature holds the string denoting the issuer_signature field in the database.
	FieldIssuerSignature = "issuer_signature"
	// EdgeTokenTransactionReceipt holds the string denoting the token_transaction_receipt edge name in mutations.
	EdgeTokenTransactionReceipt = "token_transaction_receipt"
	// Table holds the table name of the tokenissuance in the database.
	Table = "token_issuances"
	// TokenTransactionReceiptTable is the table that holds the token_transaction_receipt relation/edge.
	TokenTransactionReceiptTable = "token_transaction_receipts"
	// TokenTransactionReceiptInverseTable is the table name for the TokenTransactionReceipt entity.
	// It exists in this package in order to avoid circular dependency with the "tokentransactionreceipt" package.
	TokenTransactionReceiptInverseTable = "token_transaction_receipts"
	// TokenTransactionReceiptColumn is the table column denoting the token_transaction_receipt relation/edge.
	TokenTransactionReceiptColumn = "token_transaction_receipt_issuance"
)

// Columns holds all SQL columns for tokenissuance fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldIssuerPublicKey,
	FieldIssuerSignature,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// IssuerPublicKeyValidator is a validator for the "issuer_public_key" field. It is called by the builders before save.
	IssuerPublicKeyValidator func([]byte) error
	// IssuerSignatureValidator is a validator for the "issuer_signature" field. It is called by the builders before save.
	IssuerSignatureValidator func([]byte) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the TokenIssuance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByTokenTransactionReceiptCount orders the results by token_transaction_receipt count.
func ByTokenTransactionReceiptCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTokenTransactionReceiptStep(), opts...)
	}
}

// ByTokenTransactionReceipt orders the results by token_transaction_receipt terms.
func ByTokenTransactionReceipt(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokenTransactionReceiptStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTokenTransactionReceiptStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokenTransactionReceiptInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, TokenTransactionReceiptTable, TokenTransactionReceiptColumn),
	)
}
