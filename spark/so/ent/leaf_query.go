// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/leaf"
	"github.com/lightsparkdev/spark-go/so/ent/predicate"
	"github.com/lightsparkdev/spark-go/so/ent/signingkeyshare"
	"github.com/lightsparkdev/spark-go/so/ent/tree"
)

// LeafQuery is the builder for querying Leaf entities.
type LeafQuery struct {
	config
	ctx                 *QueryContext
	order               []leaf.OrderOption
	inters              []Interceptor
	predicates          []predicate.Leaf
	withTree            *TreeQuery
	withParent          *LeafQuery
	withSigningKeyshare *SigningKeyshareQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LeafQuery builder.
func (lq *LeafQuery) Where(ps ...predicate.Leaf) *LeafQuery {
	lq.predicates = append(lq.predicates, ps...)
	return lq
}

// Limit the number of records to be returned by this query.
func (lq *LeafQuery) Limit(limit int) *LeafQuery {
	lq.ctx.Limit = &limit
	return lq
}

// Offset to start from.
func (lq *LeafQuery) Offset(offset int) *LeafQuery {
	lq.ctx.Offset = &offset
	return lq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lq *LeafQuery) Unique(unique bool) *LeafQuery {
	lq.ctx.Unique = &unique
	return lq
}

// Order specifies how the records should be ordered.
func (lq *LeafQuery) Order(o ...leaf.OrderOption) *LeafQuery {
	lq.order = append(lq.order, o...)
	return lq
}

// QueryTree chains the current query on the "tree" edge.
func (lq *LeafQuery) QueryTree() *TreeQuery {
	query := (&TreeClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(leaf.Table, leaf.FieldID, selector),
			sqlgraph.To(tree.Table, tree.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, leaf.TreeTable, leaf.TreeColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (lq *LeafQuery) QueryParent() *LeafQuery {
	query := (&LeafClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(leaf.Table, leaf.FieldID, selector),
			sqlgraph.To(leaf.Table, leaf.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, leaf.ParentTable, leaf.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySigningKeyshare chains the current query on the "signing_keyshare" edge.
func (lq *LeafQuery) QuerySigningKeyshare() *SigningKeyshareQuery {
	query := (&SigningKeyshareClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(leaf.Table, leaf.FieldID, selector),
			sqlgraph.To(signingkeyshare.Table, signingkeyshare.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, leaf.SigningKeyshareTable, leaf.SigningKeyshareColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Leaf entity from the query.
// Returns a *NotFoundError when no Leaf was found.
func (lq *LeafQuery) First(ctx context.Context) (*Leaf, error) {
	nodes, err := lq.Limit(1).All(setContextOp(ctx, lq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{leaf.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lq *LeafQuery) FirstX(ctx context.Context) *Leaf {
	node, err := lq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Leaf ID from the query.
// Returns a *NotFoundError when no Leaf ID was found.
func (lq *LeafQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = lq.Limit(1).IDs(setContextOp(ctx, lq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{leaf.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lq *LeafQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := lq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Leaf entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Leaf entity is found.
// Returns a *NotFoundError when no Leaf entities are found.
func (lq *LeafQuery) Only(ctx context.Context) (*Leaf, error) {
	nodes, err := lq.Limit(2).All(setContextOp(ctx, lq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{leaf.Label}
	default:
		return nil, &NotSingularError{leaf.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lq *LeafQuery) OnlyX(ctx context.Context) *Leaf {
	node, err := lq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Leaf ID in the query.
// Returns a *NotSingularError when more than one Leaf ID is found.
// Returns a *NotFoundError when no entities are found.
func (lq *LeafQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = lq.Limit(2).IDs(setContextOp(ctx, lq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{leaf.Label}
	default:
		err = &NotSingularError{leaf.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lq *LeafQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := lq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Leafs.
func (lq *LeafQuery) All(ctx context.Context) ([]*Leaf, error) {
	ctx = setContextOp(ctx, lq.ctx, ent.OpQueryAll)
	if err := lq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Leaf, *LeafQuery]()
	return withInterceptors[[]*Leaf](ctx, lq, qr, lq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lq *LeafQuery) AllX(ctx context.Context) []*Leaf {
	nodes, err := lq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Leaf IDs.
func (lq *LeafQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if lq.ctx.Unique == nil && lq.path != nil {
		lq.Unique(true)
	}
	ctx = setContextOp(ctx, lq.ctx, ent.OpQueryIDs)
	if err = lq.Select(leaf.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lq *LeafQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := lq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lq *LeafQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lq.ctx, ent.OpQueryCount)
	if err := lq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lq, querierCount[*LeafQuery](), lq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lq *LeafQuery) CountX(ctx context.Context) int {
	count, err := lq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lq *LeafQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lq.ctx, ent.OpQueryExist)
	switch _, err := lq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lq *LeafQuery) ExistX(ctx context.Context) bool {
	exist, err := lq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LeafQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lq *LeafQuery) Clone() *LeafQuery {
	if lq == nil {
		return nil
	}
	return &LeafQuery{
		config:              lq.config,
		ctx:                 lq.ctx.Clone(),
		order:               append([]leaf.OrderOption{}, lq.order...),
		inters:              append([]Interceptor{}, lq.inters...),
		predicates:          append([]predicate.Leaf{}, lq.predicates...),
		withTree:            lq.withTree.Clone(),
		withParent:          lq.withParent.Clone(),
		withSigningKeyshare: lq.withSigningKeyshare.Clone(),
		// clone intermediate query.
		sql:  lq.sql.Clone(),
		path: lq.path,
	}
}

// WithTree tells the query-builder to eager-load the nodes that are connected to
// the "tree" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LeafQuery) WithTree(opts ...func(*TreeQuery)) *LeafQuery {
	query := (&TreeClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withTree = query
	return lq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LeafQuery) WithParent(opts ...func(*LeafQuery)) *LeafQuery {
	query := (&LeafClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withParent = query
	return lq
}

// WithSigningKeyshare tells the query-builder to eager-load the nodes that are connected to
// the "signing_keyshare" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LeafQuery) WithSigningKeyshare(opts ...func(*SigningKeyshareQuery)) *LeafQuery {
	query := (&SigningKeyshareClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withSigningKeyshare = query
	return lq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Leaf.Query().
//		GroupBy(leaf.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lq *LeafQuery) GroupBy(field string, fields ...string) *LeafGroupBy {
	lq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LeafGroupBy{build: lq}
	grbuild.flds = &lq.ctx.Fields
	grbuild.label = leaf.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Leaf.Query().
//		Select(leaf.FieldCreateTime).
//		Scan(ctx, &v)
func (lq *LeafQuery) Select(fields ...string) *LeafSelect {
	lq.ctx.Fields = append(lq.ctx.Fields, fields...)
	sbuild := &LeafSelect{LeafQuery: lq}
	sbuild.label = leaf.Label
	sbuild.flds, sbuild.scan = &lq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LeafSelect configured with the given aggregations.
func (lq *LeafQuery) Aggregate(fns ...AggregateFunc) *LeafSelect {
	return lq.Select().Aggregate(fns...)
}

func (lq *LeafQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lq); err != nil {
				return err
			}
		}
	}
	for _, f := range lq.ctx.Fields {
		if !leaf.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lq.path != nil {
		prev, err := lq.path(ctx)
		if err != nil {
			return err
		}
		lq.sql = prev
	}
	return nil
}

func (lq *LeafQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Leaf, error) {
	var (
		nodes       = []*Leaf{}
		_spec       = lq.querySpec()
		loadedTypes = [3]bool{
			lq.withTree != nil,
			lq.withParent != nil,
			lq.withSigningKeyshare != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Leaf).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Leaf{config: lq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lq.withTree; query != nil {
		if err := lq.loadTree(ctx, query, nodes, nil,
			func(n *Leaf, e *Tree) { n.Edges.Tree = e }); err != nil {
			return nil, err
		}
	}
	if query := lq.withParent; query != nil {
		if err := lq.loadParent(ctx, query, nodes, nil,
			func(n *Leaf, e *Leaf) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := lq.withSigningKeyshare; query != nil {
		if err := lq.loadSigningKeyshare(ctx, query, nodes, nil,
			func(n *Leaf, e *SigningKeyshare) { n.Edges.SigningKeyshare = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lq *LeafQuery) loadTree(ctx context.Context, query *TreeQuery, nodes []*Leaf, init func(*Leaf), assign func(*Leaf, *Tree)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Leaf)
	for i := range nodes {
		fk := nodes[i].TreeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tree.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tree_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lq *LeafQuery) loadParent(ctx context.Context, query *LeafQuery, nodes []*Leaf, init func(*Leaf), assign func(*Leaf, *Leaf)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Leaf)
	for i := range nodes {
		fk := nodes[i].ParentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(leaf.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lq *LeafQuery) loadSigningKeyshare(ctx context.Context, query *SigningKeyshareQuery, nodes []*Leaf, init func(*Leaf), assign func(*Leaf, *SigningKeyshare)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Leaf)
	for i := range nodes {
		fk := nodes[i].SigningKeyshareID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(signingkeyshare.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "signing_keyshare_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (lq *LeafQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lq.querySpec()
	_spec.Node.Columns = lq.ctx.Fields
	if len(lq.ctx.Fields) > 0 {
		_spec.Unique = lq.ctx.Unique != nil && *lq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lq.driver, _spec)
}

func (lq *LeafQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(leaf.Table, leaf.Columns, sqlgraph.NewFieldSpec(leaf.FieldID, field.TypeUUID))
	_spec.From = lq.sql
	if unique := lq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lq.path != nil {
		_spec.Unique = true
	}
	if fields := lq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, leaf.FieldID)
		for i := range fields {
			if fields[i] != leaf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if lq.withTree != nil {
			_spec.Node.AddColumnOnce(leaf.FieldTreeID)
		}
		if lq.withParent != nil {
			_spec.Node.AddColumnOnce(leaf.FieldParentID)
		}
		if lq.withSigningKeyshare != nil {
			_spec.Node.AddColumnOnce(leaf.FieldSigningKeyshareID)
		}
	}
	if ps := lq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lq *LeafQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lq.driver.Dialect())
	t1 := builder.Table(leaf.Table)
	columns := lq.ctx.Fields
	if len(columns) == 0 {
		columns = leaf.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lq.sql != nil {
		selector = lq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lq.ctx.Unique != nil && *lq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lq.predicates {
		p(selector)
	}
	for _, p := range lq.order {
		p(selector)
	}
	if offset := lq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LeafGroupBy is the group-by builder for Leaf entities.
type LeafGroupBy struct {
	selector
	build *LeafQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lgb *LeafGroupBy) Aggregate(fns ...AggregateFunc) *LeafGroupBy {
	lgb.fns = append(lgb.fns, fns...)
	return lgb
}

// Scan applies the selector query and scans the result into the given value.
func (lgb *LeafGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lgb.build.ctx, ent.OpQueryGroupBy)
	if err := lgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LeafQuery, *LeafGroupBy](ctx, lgb.build, lgb, lgb.build.inters, v)
}

func (lgb *LeafGroupBy) sqlScan(ctx context.Context, root *LeafQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lgb.fns))
	for _, fn := range lgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lgb.flds)+len(lgb.fns))
		for _, f := range *lgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LeafSelect is the builder for selecting fields of Leaf entities.
type LeafSelect struct {
	*LeafQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ls *LeafSelect) Aggregate(fns ...AggregateFunc) *LeafSelect {
	ls.fns = append(ls.fns, fns...)
	return ls
}

// Scan applies the selector query and scans the result into the given value.
func (ls *LeafSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ls.ctx, ent.OpQuerySelect)
	if err := ls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LeafQuery, *LeafSelect](ctx, ls.LeafQuery, ls, ls.inters, v)
}

func (ls *LeafSelect) sqlScan(ctx context.Context, root *LeafQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ls.fns))
	for _, fn := range ls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
