// Code generated by ent, DO NOT EDIT.

package tokenleaf

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/predicate"
	"github.com/lightsparkdev/spark-go/so/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldUpdateTime, v))
}

// OwnerPublicKey applies equality check predicate on the "owner_public_key" field. It's identical to OwnerPublicKeyEQ.
func OwnerPublicKey(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldOwnerPublicKey, v))
}

// WithdrawalBondSats applies equality check predicate on the "withdrawal_bond_sats" field. It's identical to WithdrawalBondSatsEQ.
func WithdrawalBondSats(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldWithdrawalBondSats, v))
}

// WithdrawalLocktime applies equality check predicate on the "withdrawal_locktime" field. It's identical to WithdrawalLocktimeEQ.
func WithdrawalLocktime(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldWithdrawalLocktime, v))
}

// WithdrawalRevocationPublicKey applies equality check predicate on the "withdrawal_revocation_public_key" field. It's identical to WithdrawalRevocationPublicKeyEQ.
func WithdrawalRevocationPublicKey(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldWithdrawalRevocationPublicKey, v))
}

// TokenPublicKey applies equality check predicate on the "token_public_key" field. It's identical to TokenPublicKeyEQ.
func TokenPublicKey(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldTokenPublicKey, v))
}

// TokenAmount applies equality check predicate on the "token_amount" field. It's identical to TokenAmountEQ.
func TokenAmount(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldTokenAmount, v))
}

// LeafCreatedTransactionOuputVout applies equality check predicate on the "leaf_created_transaction_ouput_vout" field. It's identical to LeafCreatedTransactionOuputVoutEQ.
func LeafCreatedTransactionOuputVout(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldLeafCreatedTransactionOuputVout, v))
}

// LeafSpentOwnershipSignature applies equality check predicate on the "leaf_spent_ownership_signature" field. It's identical to LeafSpentOwnershipSignatureEQ.
func LeafSpentOwnershipSignature(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldLeafSpentOwnershipSignature, v))
}

// LeafSpentTransactionInputVout applies equality check predicate on the "leaf_spent_transaction_input_vout" field. It's identical to LeafSpentTransactionInputVoutEQ.
func LeafSpentTransactionInputVout(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldLeafSpentTransactionInputVout, v))
}

// LeafSpentRevocationPrivateKey applies equality check predicate on the "leaf_spent_revocation_private_key" field. It's identical to LeafSpentRevocationPrivateKeyEQ.
func LeafSpentRevocationPrivateKey(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldLeafSpentRevocationPrivateKey, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldUpdateTime, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v schema.TokenLeafStatus) predicate.TokenLeaf {
	vc := v
	return predicate.TokenLeaf(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v schema.TokenLeafStatus) predicate.TokenLeaf {
	vc := v
	return predicate.TokenLeaf(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...schema.TokenLeafStatus) predicate.TokenLeaf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenLeaf(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...schema.TokenLeafStatus) predicate.TokenLeaf {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TokenLeaf(sql.FieldNotIn(FieldStatus, v...))
}

// OwnerPublicKeyEQ applies the EQ predicate on the "owner_public_key" field.
func OwnerPublicKeyEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldOwnerPublicKey, v))
}

// OwnerPublicKeyNEQ applies the NEQ predicate on the "owner_public_key" field.
func OwnerPublicKeyNEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldOwnerPublicKey, v))
}

// OwnerPublicKeyIn applies the In predicate on the "owner_public_key" field.
func OwnerPublicKeyIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldOwnerPublicKey, vs...))
}

// OwnerPublicKeyNotIn applies the NotIn predicate on the "owner_public_key" field.
func OwnerPublicKeyNotIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldOwnerPublicKey, vs...))
}

// OwnerPublicKeyGT applies the GT predicate on the "owner_public_key" field.
func OwnerPublicKeyGT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldOwnerPublicKey, v))
}

// OwnerPublicKeyGTE applies the GTE predicate on the "owner_public_key" field.
func OwnerPublicKeyGTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldOwnerPublicKey, v))
}

// OwnerPublicKeyLT applies the LT predicate on the "owner_public_key" field.
func OwnerPublicKeyLT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldOwnerPublicKey, v))
}

// OwnerPublicKeyLTE applies the LTE predicate on the "owner_public_key" field.
func OwnerPublicKeyLTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldOwnerPublicKey, v))
}

// WithdrawalBondSatsEQ applies the EQ predicate on the "withdrawal_bond_sats" field.
func WithdrawalBondSatsEQ(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldWithdrawalBondSats, v))
}

// WithdrawalBondSatsNEQ applies the NEQ predicate on the "withdrawal_bond_sats" field.
func WithdrawalBondSatsNEQ(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldWithdrawalBondSats, v))
}

// WithdrawalBondSatsIn applies the In predicate on the "withdrawal_bond_sats" field.
func WithdrawalBondSatsIn(vs ...uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldWithdrawalBondSats, vs...))
}

// WithdrawalBondSatsNotIn applies the NotIn predicate on the "withdrawal_bond_sats" field.
func WithdrawalBondSatsNotIn(vs ...uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldWithdrawalBondSats, vs...))
}

// WithdrawalBondSatsGT applies the GT predicate on the "withdrawal_bond_sats" field.
func WithdrawalBondSatsGT(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldWithdrawalBondSats, v))
}

// WithdrawalBondSatsGTE applies the GTE predicate on the "withdrawal_bond_sats" field.
func WithdrawalBondSatsGTE(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldWithdrawalBondSats, v))
}

// WithdrawalBondSatsLT applies the LT predicate on the "withdrawal_bond_sats" field.
func WithdrawalBondSatsLT(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldWithdrawalBondSats, v))
}

// WithdrawalBondSatsLTE applies the LTE predicate on the "withdrawal_bond_sats" field.
func WithdrawalBondSatsLTE(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldWithdrawalBondSats, v))
}

// WithdrawalLocktimeEQ applies the EQ predicate on the "withdrawal_locktime" field.
func WithdrawalLocktimeEQ(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldWithdrawalLocktime, v))
}

// WithdrawalLocktimeNEQ applies the NEQ predicate on the "withdrawal_locktime" field.
func WithdrawalLocktimeNEQ(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldWithdrawalLocktime, v))
}

// WithdrawalLocktimeIn applies the In predicate on the "withdrawal_locktime" field.
func WithdrawalLocktimeIn(vs ...uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldWithdrawalLocktime, vs...))
}

// WithdrawalLocktimeNotIn applies the NotIn predicate on the "withdrawal_locktime" field.
func WithdrawalLocktimeNotIn(vs ...uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldWithdrawalLocktime, vs...))
}

// WithdrawalLocktimeGT applies the GT predicate on the "withdrawal_locktime" field.
func WithdrawalLocktimeGT(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldWithdrawalLocktime, v))
}

// WithdrawalLocktimeGTE applies the GTE predicate on the "withdrawal_locktime" field.
func WithdrawalLocktimeGTE(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldWithdrawalLocktime, v))
}

// WithdrawalLocktimeLT applies the LT predicate on the "withdrawal_locktime" field.
func WithdrawalLocktimeLT(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldWithdrawalLocktime, v))
}

// WithdrawalLocktimeLTE applies the LTE predicate on the "withdrawal_locktime" field.
func WithdrawalLocktimeLTE(v uint64) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldWithdrawalLocktime, v))
}

// WithdrawalRevocationPublicKeyEQ applies the EQ predicate on the "withdrawal_revocation_public_key" field.
func WithdrawalRevocationPublicKeyEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldWithdrawalRevocationPublicKey, v))
}

// WithdrawalRevocationPublicKeyNEQ applies the NEQ predicate on the "withdrawal_revocation_public_key" field.
func WithdrawalRevocationPublicKeyNEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldWithdrawalRevocationPublicKey, v))
}

// WithdrawalRevocationPublicKeyIn applies the In predicate on the "withdrawal_revocation_public_key" field.
func WithdrawalRevocationPublicKeyIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldWithdrawalRevocationPublicKey, vs...))
}

// WithdrawalRevocationPublicKeyNotIn applies the NotIn predicate on the "withdrawal_revocation_public_key" field.
func WithdrawalRevocationPublicKeyNotIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldWithdrawalRevocationPublicKey, vs...))
}

// WithdrawalRevocationPublicKeyGT applies the GT predicate on the "withdrawal_revocation_public_key" field.
func WithdrawalRevocationPublicKeyGT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldWithdrawalRevocationPublicKey, v))
}

// WithdrawalRevocationPublicKeyGTE applies the GTE predicate on the "withdrawal_revocation_public_key" field.
func WithdrawalRevocationPublicKeyGTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldWithdrawalRevocationPublicKey, v))
}

// WithdrawalRevocationPublicKeyLT applies the LT predicate on the "withdrawal_revocation_public_key" field.
func WithdrawalRevocationPublicKeyLT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldWithdrawalRevocationPublicKey, v))
}

// WithdrawalRevocationPublicKeyLTE applies the LTE predicate on the "withdrawal_revocation_public_key" field.
func WithdrawalRevocationPublicKeyLTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldWithdrawalRevocationPublicKey, v))
}

// TokenPublicKeyEQ applies the EQ predicate on the "token_public_key" field.
func TokenPublicKeyEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldTokenPublicKey, v))
}

// TokenPublicKeyNEQ applies the NEQ predicate on the "token_public_key" field.
func TokenPublicKeyNEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldTokenPublicKey, v))
}

// TokenPublicKeyIn applies the In predicate on the "token_public_key" field.
func TokenPublicKeyIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldTokenPublicKey, vs...))
}

// TokenPublicKeyNotIn applies the NotIn predicate on the "token_public_key" field.
func TokenPublicKeyNotIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldTokenPublicKey, vs...))
}

// TokenPublicKeyGT applies the GT predicate on the "token_public_key" field.
func TokenPublicKeyGT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldTokenPublicKey, v))
}

// TokenPublicKeyGTE applies the GTE predicate on the "token_public_key" field.
func TokenPublicKeyGTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldTokenPublicKey, v))
}

// TokenPublicKeyLT applies the LT predicate on the "token_public_key" field.
func TokenPublicKeyLT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldTokenPublicKey, v))
}

// TokenPublicKeyLTE applies the LTE predicate on the "token_public_key" field.
func TokenPublicKeyLTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldTokenPublicKey, v))
}

// TokenAmountEQ applies the EQ predicate on the "token_amount" field.
func TokenAmountEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldTokenAmount, v))
}

// TokenAmountNEQ applies the NEQ predicate on the "token_amount" field.
func TokenAmountNEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldTokenAmount, v))
}

// TokenAmountIn applies the In predicate on the "token_amount" field.
func TokenAmountIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldTokenAmount, vs...))
}

// TokenAmountNotIn applies the NotIn predicate on the "token_amount" field.
func TokenAmountNotIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldTokenAmount, vs...))
}

// TokenAmountGT applies the GT predicate on the "token_amount" field.
func TokenAmountGT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldTokenAmount, v))
}

// TokenAmountGTE applies the GTE predicate on the "token_amount" field.
func TokenAmountGTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldTokenAmount, v))
}

// TokenAmountLT applies the LT predicate on the "token_amount" field.
func TokenAmountLT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldTokenAmount, v))
}

// TokenAmountLTE applies the LTE predicate on the "token_amount" field.
func TokenAmountLTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldTokenAmount, v))
}

// LeafCreatedTransactionOuputVoutEQ applies the EQ predicate on the "leaf_created_transaction_ouput_vout" field.
func LeafCreatedTransactionOuputVoutEQ(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldLeafCreatedTransactionOuputVout, v))
}

// LeafCreatedTransactionOuputVoutNEQ applies the NEQ predicate on the "leaf_created_transaction_ouput_vout" field.
func LeafCreatedTransactionOuputVoutNEQ(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldLeafCreatedTransactionOuputVout, v))
}

// LeafCreatedTransactionOuputVoutIn applies the In predicate on the "leaf_created_transaction_ouput_vout" field.
func LeafCreatedTransactionOuputVoutIn(vs ...uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldLeafCreatedTransactionOuputVout, vs...))
}

// LeafCreatedTransactionOuputVoutNotIn applies the NotIn predicate on the "leaf_created_transaction_ouput_vout" field.
func LeafCreatedTransactionOuputVoutNotIn(vs ...uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldLeafCreatedTransactionOuputVout, vs...))
}

// LeafCreatedTransactionOuputVoutGT applies the GT predicate on the "leaf_created_transaction_ouput_vout" field.
func LeafCreatedTransactionOuputVoutGT(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldLeafCreatedTransactionOuputVout, v))
}

// LeafCreatedTransactionOuputVoutGTE applies the GTE predicate on the "leaf_created_transaction_ouput_vout" field.
func LeafCreatedTransactionOuputVoutGTE(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldLeafCreatedTransactionOuputVout, v))
}

// LeafCreatedTransactionOuputVoutLT applies the LT predicate on the "leaf_created_transaction_ouput_vout" field.
func LeafCreatedTransactionOuputVoutLT(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldLeafCreatedTransactionOuputVout, v))
}

// LeafCreatedTransactionOuputVoutLTE applies the LTE predicate on the "leaf_created_transaction_ouput_vout" field.
func LeafCreatedTransactionOuputVoutLTE(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldLeafCreatedTransactionOuputVout, v))
}

// LeafSpentOwnershipSignatureEQ applies the EQ predicate on the "leaf_spent_ownership_signature" field.
func LeafSpentOwnershipSignatureEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldLeafSpentOwnershipSignature, v))
}

// LeafSpentOwnershipSignatureNEQ applies the NEQ predicate on the "leaf_spent_ownership_signature" field.
func LeafSpentOwnershipSignatureNEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldLeafSpentOwnershipSignature, v))
}

// LeafSpentOwnershipSignatureIn applies the In predicate on the "leaf_spent_ownership_signature" field.
func LeafSpentOwnershipSignatureIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldLeafSpentOwnershipSignature, vs...))
}

// LeafSpentOwnershipSignatureNotIn applies the NotIn predicate on the "leaf_spent_ownership_signature" field.
func LeafSpentOwnershipSignatureNotIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldLeafSpentOwnershipSignature, vs...))
}

// LeafSpentOwnershipSignatureGT applies the GT predicate on the "leaf_spent_ownership_signature" field.
func LeafSpentOwnershipSignatureGT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldLeafSpentOwnershipSignature, v))
}

// LeafSpentOwnershipSignatureGTE applies the GTE predicate on the "leaf_spent_ownership_signature" field.
func LeafSpentOwnershipSignatureGTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldLeafSpentOwnershipSignature, v))
}

// LeafSpentOwnershipSignatureLT applies the LT predicate on the "leaf_spent_ownership_signature" field.
func LeafSpentOwnershipSignatureLT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldLeafSpentOwnershipSignature, v))
}

// LeafSpentOwnershipSignatureLTE applies the LTE predicate on the "leaf_spent_ownership_signature" field.
func LeafSpentOwnershipSignatureLTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldLeafSpentOwnershipSignature, v))
}

// LeafSpentOwnershipSignatureIsNil applies the IsNil predicate on the "leaf_spent_ownership_signature" field.
func LeafSpentOwnershipSignatureIsNil() predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIsNull(FieldLeafSpentOwnershipSignature))
}

// LeafSpentOwnershipSignatureNotNil applies the NotNil predicate on the "leaf_spent_ownership_signature" field.
func LeafSpentOwnershipSignatureNotNil() predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotNull(FieldLeafSpentOwnershipSignature))
}

// LeafSpentTransactionInputVoutEQ applies the EQ predicate on the "leaf_spent_transaction_input_vout" field.
func LeafSpentTransactionInputVoutEQ(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldLeafSpentTransactionInputVout, v))
}

// LeafSpentTransactionInputVoutNEQ applies the NEQ predicate on the "leaf_spent_transaction_input_vout" field.
func LeafSpentTransactionInputVoutNEQ(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldLeafSpentTransactionInputVout, v))
}

// LeafSpentTransactionInputVoutIn applies the In predicate on the "leaf_spent_transaction_input_vout" field.
func LeafSpentTransactionInputVoutIn(vs ...uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldLeafSpentTransactionInputVout, vs...))
}

// LeafSpentTransactionInputVoutNotIn applies the NotIn predicate on the "leaf_spent_transaction_input_vout" field.
func LeafSpentTransactionInputVoutNotIn(vs ...uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldLeafSpentTransactionInputVout, vs...))
}

// LeafSpentTransactionInputVoutGT applies the GT predicate on the "leaf_spent_transaction_input_vout" field.
func LeafSpentTransactionInputVoutGT(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldLeafSpentTransactionInputVout, v))
}

// LeafSpentTransactionInputVoutGTE applies the GTE predicate on the "leaf_spent_transaction_input_vout" field.
func LeafSpentTransactionInputVoutGTE(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldLeafSpentTransactionInputVout, v))
}

// LeafSpentTransactionInputVoutLT applies the LT predicate on the "leaf_spent_transaction_input_vout" field.
func LeafSpentTransactionInputVoutLT(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldLeafSpentTransactionInputVout, v))
}

// LeafSpentTransactionInputVoutLTE applies the LTE predicate on the "leaf_spent_transaction_input_vout" field.
func LeafSpentTransactionInputVoutLTE(v uint32) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldLeafSpentTransactionInputVout, v))
}

// LeafSpentTransactionInputVoutIsNil applies the IsNil predicate on the "leaf_spent_transaction_input_vout" field.
func LeafSpentTransactionInputVoutIsNil() predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIsNull(FieldLeafSpentTransactionInputVout))
}

// LeafSpentTransactionInputVoutNotNil applies the NotNil predicate on the "leaf_spent_transaction_input_vout" field.
func LeafSpentTransactionInputVoutNotNil() predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotNull(FieldLeafSpentTransactionInputVout))
}

// LeafSpentRevocationPrivateKeyEQ applies the EQ predicate on the "leaf_spent_revocation_private_key" field.
func LeafSpentRevocationPrivateKeyEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldEQ(FieldLeafSpentRevocationPrivateKey, v))
}

// LeafSpentRevocationPrivateKeyNEQ applies the NEQ predicate on the "leaf_spent_revocation_private_key" field.
func LeafSpentRevocationPrivateKeyNEQ(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNEQ(FieldLeafSpentRevocationPrivateKey, v))
}

// LeafSpentRevocationPrivateKeyIn applies the In predicate on the "leaf_spent_revocation_private_key" field.
func LeafSpentRevocationPrivateKeyIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIn(FieldLeafSpentRevocationPrivateKey, vs...))
}

// LeafSpentRevocationPrivateKeyNotIn applies the NotIn predicate on the "leaf_spent_revocation_private_key" field.
func LeafSpentRevocationPrivateKeyNotIn(vs ...[]byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotIn(FieldLeafSpentRevocationPrivateKey, vs...))
}

// LeafSpentRevocationPrivateKeyGT applies the GT predicate on the "leaf_spent_revocation_private_key" field.
func LeafSpentRevocationPrivateKeyGT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGT(FieldLeafSpentRevocationPrivateKey, v))
}

// LeafSpentRevocationPrivateKeyGTE applies the GTE predicate on the "leaf_spent_revocation_private_key" field.
func LeafSpentRevocationPrivateKeyGTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldGTE(FieldLeafSpentRevocationPrivateKey, v))
}

// LeafSpentRevocationPrivateKeyLT applies the LT predicate on the "leaf_spent_revocation_private_key" field.
func LeafSpentRevocationPrivateKeyLT(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLT(FieldLeafSpentRevocationPrivateKey, v))
}

// LeafSpentRevocationPrivateKeyLTE applies the LTE predicate on the "leaf_spent_revocation_private_key" field.
func LeafSpentRevocationPrivateKeyLTE(v []byte) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldLTE(FieldLeafSpentRevocationPrivateKey, v))
}

// LeafSpentRevocationPrivateKeyIsNil applies the IsNil predicate on the "leaf_spent_revocation_private_key" field.
func LeafSpentRevocationPrivateKeyIsNil() predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldIsNull(FieldLeafSpentRevocationPrivateKey))
}

// LeafSpentRevocationPrivateKeyNotNil applies the NotNil predicate on the "leaf_spent_revocation_private_key" field.
func LeafSpentRevocationPrivateKeyNotNil() predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.FieldNotNull(FieldLeafSpentRevocationPrivateKey))
}

// HasRevocationKeyshare applies the HasEdge predicate on the "revocation_keyshare" edge.
func HasRevocationKeyshare() predicate.TokenLeaf {
	return predicate.TokenLeaf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RevocationKeyshareTable, RevocationKeyshareColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRevocationKeyshareWith applies the HasEdge predicate on the "revocation_keyshare" edge with a given conditions (other predicates).
func HasRevocationKeyshareWith(preds ...predicate.SigningKeyshare) predicate.TokenLeaf {
	return predicate.TokenLeaf(func(s *sql.Selector) {
		step := newRevocationKeyshareStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLeafCreatedTokenTransactionReceipt applies the HasEdge predicate on the "leaf_created_token_transaction_receipt" edge.
func HasLeafCreatedTokenTransactionReceipt() predicate.TokenLeaf {
	return predicate.TokenLeaf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LeafCreatedTokenTransactionReceiptTable, LeafCreatedTokenTransactionReceiptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeafCreatedTokenTransactionReceiptWith applies the HasEdge predicate on the "leaf_created_token_transaction_receipt" edge with a given conditions (other predicates).
func HasLeafCreatedTokenTransactionReceiptWith(preds ...predicate.TokenTransactionReceipt) predicate.TokenLeaf {
	return predicate.TokenLeaf(func(s *sql.Selector) {
		step := newLeafCreatedTokenTransactionReceiptStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLeafSpentTokenTransactionReceipt applies the HasEdge predicate on the "leaf_spent_token_transaction_receipt" edge.
func HasLeafSpentTokenTransactionReceipt() predicate.TokenLeaf {
	return predicate.TokenLeaf(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LeafSpentTokenTransactionReceiptTable, LeafSpentTokenTransactionReceiptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeafSpentTokenTransactionReceiptWith applies the HasEdge predicate on the "leaf_spent_token_transaction_receipt" edge with a given conditions (other predicates).
func HasLeafSpentTokenTransactionReceiptWith(preds ...predicate.TokenTransactionReceipt) predicate.TokenLeaf {
	return predicate.TokenLeaf(func(s *sql.Selector) {
		step := newLeafSpentTokenTransactionReceiptStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TokenLeaf) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TokenLeaf) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TokenLeaf) predicate.TokenLeaf {
	return predicate.TokenLeaf(sql.NotPredicates(p))
}
