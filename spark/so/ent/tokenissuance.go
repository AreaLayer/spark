// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/tokenissuance"
)

// TokenIssuance is the model entity for the TokenIssuance schema.
type TokenIssuance struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// IssuerPublicKey holds the value of the "issuer_public_key" field.
	IssuerPublicKey []byte `json:"issuer_public_key,omitempty"`
	// IssuerSignature holds the value of the "issuer_signature" field.
	IssuerSignature []byte `json:"issuer_signature,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TokenIssuanceQuery when eager-loading is set.
	Edges        TokenIssuanceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TokenIssuanceEdges holds the relations/edges for other nodes in the graph.
type TokenIssuanceEdges struct {
	// TokenTransactionReceipt holds the value of the token_transaction_receipt edge.
	TokenTransactionReceipt []*TokenTransactionReceipt `json:"token_transaction_receipt,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TokenTransactionReceiptOrErr returns the TokenTransactionReceipt value or an error if the edge
// was not loaded in eager-loading.
func (e TokenIssuanceEdges) TokenTransactionReceiptOrErr() ([]*TokenTransactionReceipt, error) {
	if e.loadedTypes[0] {
		return e.TokenTransactionReceipt, nil
	}
	return nil, &NotLoadedError{edge: "token_transaction_receipt"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TokenIssuance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tokenissuance.FieldIssuerPublicKey, tokenissuance.FieldIssuerSignature:
			values[i] = new([]byte)
		case tokenissuance.FieldCreateTime, tokenissuance.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case tokenissuance.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TokenIssuance fields.
func (ti *TokenIssuance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tokenissuance.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ti.ID = *value
			}
		case tokenissuance.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ti.CreateTime = value.Time
			}
		case tokenissuance.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ti.UpdateTime = value.Time
			}
		case tokenissuance.FieldIssuerPublicKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field issuer_public_key", values[i])
			} else if value != nil {
				ti.IssuerPublicKey = *value
			}
		case tokenissuance.FieldIssuerSignature:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field issuer_signature", values[i])
			} else if value != nil {
				ti.IssuerSignature = *value
			}
		default:
			ti.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TokenIssuance.
// This includes values selected through modifiers, order, etc.
func (ti *TokenIssuance) Value(name string) (ent.Value, error) {
	return ti.selectValues.Get(name)
}

// QueryTokenTransactionReceipt queries the "token_transaction_receipt" edge of the TokenIssuance entity.
func (ti *TokenIssuance) QueryTokenTransactionReceipt() *TokenTransactionReceiptQuery {
	return NewTokenIssuanceClient(ti.config).QueryTokenTransactionReceipt(ti)
}

// Update returns a builder for updating this TokenIssuance.
// Note that you need to call TokenIssuance.Unwrap() before calling this method if this TokenIssuance
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *TokenIssuance) Update() *TokenIssuanceUpdateOne {
	return NewTokenIssuanceClient(ti.config).UpdateOne(ti)
}

// Unwrap unwraps the TokenIssuance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *TokenIssuance) Unwrap() *TokenIssuance {
	_tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("ent: TokenIssuance is not a transactional entity")
	}
	ti.config.driver = _tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *TokenIssuance) String() string {
	var builder strings.Builder
	builder.WriteString("TokenIssuance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ti.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ti.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ti.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("issuer_public_key=")
	builder.WriteString(fmt.Sprintf("%v", ti.IssuerPublicKey))
	builder.WriteString(", ")
	builder.WriteString("issuer_signature=")
	builder.WriteString(fmt.Sprintf("%v", ti.IssuerSignature))
	builder.WriteByte(')')
	return builder.String()
}

// TokenIssuances is a parsable slice of TokenIssuance.
type TokenIssuances []*TokenIssuance
