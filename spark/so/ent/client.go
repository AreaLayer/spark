// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lightsparkdev/spark-go/so/ent/depositaddress"
	"github.com/lightsparkdev/spark-go/so/ent/leaf"
	"github.com/lightsparkdev/spark-go/so/ent/signingkeyshare"
	"github.com/lightsparkdev/spark-go/so/ent/signingnonce"
	"github.com/lightsparkdev/spark-go/so/ent/tree"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DepositAddress is the client for interacting with the DepositAddress builders.
	DepositAddress *DepositAddressClient
	// Leaf is the client for interacting with the Leaf builders.
	Leaf *LeafClient
	// SigningKeyshare is the client for interacting with the SigningKeyshare builders.
	SigningKeyshare *SigningKeyshareClient
	// SigningNonce is the client for interacting with the SigningNonce builders.
	SigningNonce *SigningNonceClient
	// Tree is the client for interacting with the Tree builders.
	Tree *TreeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DepositAddress = NewDepositAddressClient(c.config)
	c.Leaf = NewLeafClient(c.config)
	c.SigningKeyshare = NewSigningKeyshareClient(c.config)
	c.SigningNonce = NewSigningNonceClient(c.config)
	c.Tree = NewTreeClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		DepositAddress:  NewDepositAddressClient(cfg),
		Leaf:            NewLeafClient(cfg),
		SigningKeyshare: NewSigningKeyshareClient(cfg),
		SigningNonce:    NewSigningNonceClient(cfg),
		Tree:            NewTreeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		DepositAddress:  NewDepositAddressClient(cfg),
		Leaf:            NewLeafClient(cfg),
		SigningKeyshare: NewSigningKeyshareClient(cfg),
		SigningNonce:    NewSigningNonceClient(cfg),
		Tree:            NewTreeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DepositAddress.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.DepositAddress.Use(hooks...)
	c.Leaf.Use(hooks...)
	c.SigningKeyshare.Use(hooks...)
	c.SigningNonce.Use(hooks...)
	c.Tree.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.DepositAddress.Intercept(interceptors...)
	c.Leaf.Intercept(interceptors...)
	c.SigningKeyshare.Intercept(interceptors...)
	c.SigningNonce.Intercept(interceptors...)
	c.Tree.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DepositAddressMutation:
		return c.DepositAddress.mutate(ctx, m)
	case *LeafMutation:
		return c.Leaf.mutate(ctx, m)
	case *SigningKeyshareMutation:
		return c.SigningKeyshare.mutate(ctx, m)
	case *SigningNonceMutation:
		return c.SigningNonce.mutate(ctx, m)
	case *TreeMutation:
		return c.Tree.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DepositAddressClient is a client for the DepositAddress schema.
type DepositAddressClient struct {
	config
}

// NewDepositAddressClient returns a client for the DepositAddress from the given config.
func NewDepositAddressClient(c config) *DepositAddressClient {
	return &DepositAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `depositaddress.Hooks(f(g(h())))`.
func (c *DepositAddressClient) Use(hooks ...Hook) {
	c.hooks.DepositAddress = append(c.hooks.DepositAddress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `depositaddress.Intercept(f(g(h())))`.
func (c *DepositAddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.DepositAddress = append(c.inters.DepositAddress, interceptors...)
}

// Create returns a builder for creating a DepositAddress entity.
func (c *DepositAddressClient) Create() *DepositAddressCreate {
	mutation := newDepositAddressMutation(c.config, OpCreate)
	return &DepositAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DepositAddress entities.
func (c *DepositAddressClient) CreateBulk(builders ...*DepositAddressCreate) *DepositAddressCreateBulk {
	return &DepositAddressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DepositAddressClient) MapCreateBulk(slice any, setFunc func(*DepositAddressCreate, int)) *DepositAddressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DepositAddressCreateBulk{err: fmt.Errorf("calling to DepositAddressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DepositAddressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DepositAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DepositAddress.
func (c *DepositAddressClient) Update() *DepositAddressUpdate {
	mutation := newDepositAddressMutation(c.config, OpUpdate)
	return &DepositAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepositAddressClient) UpdateOne(da *DepositAddress) *DepositAddressUpdateOne {
	mutation := newDepositAddressMutation(c.config, OpUpdateOne, withDepositAddress(da))
	return &DepositAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepositAddressClient) UpdateOneID(id uuid.UUID) *DepositAddressUpdateOne {
	mutation := newDepositAddressMutation(c.config, OpUpdateOne, withDepositAddressID(id))
	return &DepositAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DepositAddress.
func (c *DepositAddressClient) Delete() *DepositAddressDelete {
	mutation := newDepositAddressMutation(c.config, OpDelete)
	return &DepositAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DepositAddressClient) DeleteOne(da *DepositAddress) *DepositAddressDeleteOne {
	return c.DeleteOneID(da.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DepositAddressClient) DeleteOneID(id uuid.UUID) *DepositAddressDeleteOne {
	builder := c.Delete().Where(depositaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepositAddressDeleteOne{builder}
}

// Query returns a query builder for DepositAddress.
func (c *DepositAddressClient) Query() *DepositAddressQuery {
	return &DepositAddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDepositAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a DepositAddress entity by its id.
func (c *DepositAddressClient) Get(ctx context.Context, id uuid.UUID) (*DepositAddress, error) {
	return c.Query().Where(depositaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepositAddressClient) GetX(ctx context.Context, id uuid.UUID) *DepositAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySigningKeyshare queries the signing_keyshare edge of a DepositAddress.
func (c *DepositAddressClient) QuerySigningKeyshare(da *DepositAddress) *SigningKeyshareQuery {
	query := (&SigningKeyshareClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(depositaddress.Table, depositaddress.FieldID, id),
			sqlgraph.To(signingkeyshare.Table, signingkeyshare.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, depositaddress.SigningKeyshareTable, depositaddress.SigningKeyshareColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepositAddressClient) Hooks() []Hook {
	return c.hooks.DepositAddress
}

// Interceptors returns the client interceptors.
func (c *DepositAddressClient) Interceptors() []Interceptor {
	return c.inters.DepositAddress
}

func (c *DepositAddressClient) mutate(ctx context.Context, m *DepositAddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DepositAddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DepositAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DepositAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DepositAddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DepositAddress mutation op: %q", m.Op())
	}
}

// LeafClient is a client for the Leaf schema.
type LeafClient struct {
	config
}

// NewLeafClient returns a client for the Leaf from the given config.
func NewLeafClient(c config) *LeafClient {
	return &LeafClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `leaf.Hooks(f(g(h())))`.
func (c *LeafClient) Use(hooks ...Hook) {
	c.hooks.Leaf = append(c.hooks.Leaf, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `leaf.Intercept(f(g(h())))`.
func (c *LeafClient) Intercept(interceptors ...Interceptor) {
	c.inters.Leaf = append(c.inters.Leaf, interceptors...)
}

// Create returns a builder for creating a Leaf entity.
func (c *LeafClient) Create() *LeafCreate {
	mutation := newLeafMutation(c.config, OpCreate)
	return &LeafCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Leaf entities.
func (c *LeafClient) CreateBulk(builders ...*LeafCreate) *LeafCreateBulk {
	return &LeafCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LeafClient) MapCreateBulk(slice any, setFunc func(*LeafCreate, int)) *LeafCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LeafCreateBulk{err: fmt.Errorf("calling to LeafClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LeafCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LeafCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Leaf.
func (c *LeafClient) Update() *LeafUpdate {
	mutation := newLeafMutation(c.config, OpUpdate)
	return &LeafUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LeafClient) UpdateOne(l *Leaf) *LeafUpdateOne {
	mutation := newLeafMutation(c.config, OpUpdateOne, withLeaf(l))
	return &LeafUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LeafClient) UpdateOneID(id uuid.UUID) *LeafUpdateOne {
	mutation := newLeafMutation(c.config, OpUpdateOne, withLeafID(id))
	return &LeafUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Leaf.
func (c *LeafClient) Delete() *LeafDelete {
	mutation := newLeafMutation(c.config, OpDelete)
	return &LeafDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LeafClient) DeleteOne(l *Leaf) *LeafDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LeafClient) DeleteOneID(id uuid.UUID) *LeafDeleteOne {
	builder := c.Delete().Where(leaf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LeafDeleteOne{builder}
}

// Query returns a query builder for Leaf.
func (c *LeafClient) Query() *LeafQuery {
	return &LeafQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLeaf},
		inters: c.Interceptors(),
	}
}

// Get returns a Leaf entity by its id.
func (c *LeafClient) Get(ctx context.Context, id uuid.UUID) (*Leaf, error) {
	return c.Query().Where(leaf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LeafClient) GetX(ctx context.Context, id uuid.UUID) *Leaf {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTree queries the tree edge of a Leaf.
func (c *LeafClient) QueryTree(l *Leaf) *TreeQuery {
	query := (&TreeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(leaf.Table, leaf.FieldID, id),
			sqlgraph.To(tree.Table, tree.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, leaf.TreeTable, leaf.TreeColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Leaf.
func (c *LeafClient) QueryParent(l *Leaf) *LeafQuery {
	query := (&LeafClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(leaf.Table, leaf.FieldID, id),
			sqlgraph.To(leaf.Table, leaf.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, leaf.ParentTable, leaf.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySigningKeyshare queries the signing_keyshare edge of a Leaf.
func (c *LeafClient) QuerySigningKeyshare(l *Leaf) *SigningKeyshareQuery {
	query := (&SigningKeyshareClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(leaf.Table, leaf.FieldID, id),
			sqlgraph.To(signingkeyshare.Table, signingkeyshare.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, leaf.SigningKeyshareTable, leaf.SigningKeyshareColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LeafClient) Hooks() []Hook {
	return c.hooks.Leaf
}

// Interceptors returns the client interceptors.
func (c *LeafClient) Interceptors() []Interceptor {
	return c.inters.Leaf
}

func (c *LeafClient) mutate(ctx context.Context, m *LeafMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LeafCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LeafUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LeafUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LeafDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Leaf mutation op: %q", m.Op())
	}
}

// SigningKeyshareClient is a client for the SigningKeyshare schema.
type SigningKeyshareClient struct {
	config
}

// NewSigningKeyshareClient returns a client for the SigningKeyshare from the given config.
func NewSigningKeyshareClient(c config) *SigningKeyshareClient {
	return &SigningKeyshareClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `signingkeyshare.Hooks(f(g(h())))`.
func (c *SigningKeyshareClient) Use(hooks ...Hook) {
	c.hooks.SigningKeyshare = append(c.hooks.SigningKeyshare, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `signingkeyshare.Intercept(f(g(h())))`.
func (c *SigningKeyshareClient) Intercept(interceptors ...Interceptor) {
	c.inters.SigningKeyshare = append(c.inters.SigningKeyshare, interceptors...)
}

// Create returns a builder for creating a SigningKeyshare entity.
func (c *SigningKeyshareClient) Create() *SigningKeyshareCreate {
	mutation := newSigningKeyshareMutation(c.config, OpCreate)
	return &SigningKeyshareCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SigningKeyshare entities.
func (c *SigningKeyshareClient) CreateBulk(builders ...*SigningKeyshareCreate) *SigningKeyshareCreateBulk {
	return &SigningKeyshareCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SigningKeyshareClient) MapCreateBulk(slice any, setFunc func(*SigningKeyshareCreate, int)) *SigningKeyshareCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SigningKeyshareCreateBulk{err: fmt.Errorf("calling to SigningKeyshareClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SigningKeyshareCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SigningKeyshareCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SigningKeyshare.
func (c *SigningKeyshareClient) Update() *SigningKeyshareUpdate {
	mutation := newSigningKeyshareMutation(c.config, OpUpdate)
	return &SigningKeyshareUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SigningKeyshareClient) UpdateOne(sk *SigningKeyshare) *SigningKeyshareUpdateOne {
	mutation := newSigningKeyshareMutation(c.config, OpUpdateOne, withSigningKeyshare(sk))
	return &SigningKeyshareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SigningKeyshareClient) UpdateOneID(id uuid.UUID) *SigningKeyshareUpdateOne {
	mutation := newSigningKeyshareMutation(c.config, OpUpdateOne, withSigningKeyshareID(id))
	return &SigningKeyshareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SigningKeyshare.
func (c *SigningKeyshareClient) Delete() *SigningKeyshareDelete {
	mutation := newSigningKeyshareMutation(c.config, OpDelete)
	return &SigningKeyshareDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SigningKeyshareClient) DeleteOne(sk *SigningKeyshare) *SigningKeyshareDeleteOne {
	return c.DeleteOneID(sk.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SigningKeyshareClient) DeleteOneID(id uuid.UUID) *SigningKeyshareDeleteOne {
	builder := c.Delete().Where(signingkeyshare.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SigningKeyshareDeleteOne{builder}
}

// Query returns a query builder for SigningKeyshare.
func (c *SigningKeyshareClient) Query() *SigningKeyshareQuery {
	return &SigningKeyshareQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSigningKeyshare},
		inters: c.Interceptors(),
	}
}

// Get returns a SigningKeyshare entity by its id.
func (c *SigningKeyshareClient) Get(ctx context.Context, id uuid.UUID) (*SigningKeyshare, error) {
	return c.Query().Where(signingkeyshare.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SigningKeyshareClient) GetX(ctx context.Context, id uuid.UUID) *SigningKeyshare {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SigningKeyshareClient) Hooks() []Hook {
	return c.hooks.SigningKeyshare
}

// Interceptors returns the client interceptors.
func (c *SigningKeyshareClient) Interceptors() []Interceptor {
	return c.inters.SigningKeyshare
}

func (c *SigningKeyshareClient) mutate(ctx context.Context, m *SigningKeyshareMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SigningKeyshareCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SigningKeyshareUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SigningKeyshareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SigningKeyshareDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SigningKeyshare mutation op: %q", m.Op())
	}
}

// SigningNonceClient is a client for the SigningNonce schema.
type SigningNonceClient struct {
	config
}

// NewSigningNonceClient returns a client for the SigningNonce from the given config.
func NewSigningNonceClient(c config) *SigningNonceClient {
	return &SigningNonceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `signingnonce.Hooks(f(g(h())))`.
func (c *SigningNonceClient) Use(hooks ...Hook) {
	c.hooks.SigningNonce = append(c.hooks.SigningNonce, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `signingnonce.Intercept(f(g(h())))`.
func (c *SigningNonceClient) Intercept(interceptors ...Interceptor) {
	c.inters.SigningNonce = append(c.inters.SigningNonce, interceptors...)
}

// Create returns a builder for creating a SigningNonce entity.
func (c *SigningNonceClient) Create() *SigningNonceCreate {
	mutation := newSigningNonceMutation(c.config, OpCreate)
	return &SigningNonceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SigningNonce entities.
func (c *SigningNonceClient) CreateBulk(builders ...*SigningNonceCreate) *SigningNonceCreateBulk {
	return &SigningNonceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SigningNonceClient) MapCreateBulk(slice any, setFunc func(*SigningNonceCreate, int)) *SigningNonceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SigningNonceCreateBulk{err: fmt.Errorf("calling to SigningNonceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SigningNonceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SigningNonceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SigningNonce.
func (c *SigningNonceClient) Update() *SigningNonceUpdate {
	mutation := newSigningNonceMutation(c.config, OpUpdate)
	return &SigningNonceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SigningNonceClient) UpdateOne(sn *SigningNonce) *SigningNonceUpdateOne {
	mutation := newSigningNonceMutation(c.config, OpUpdateOne, withSigningNonce(sn))
	return &SigningNonceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SigningNonceClient) UpdateOneID(id uuid.UUID) *SigningNonceUpdateOne {
	mutation := newSigningNonceMutation(c.config, OpUpdateOne, withSigningNonceID(id))
	return &SigningNonceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SigningNonce.
func (c *SigningNonceClient) Delete() *SigningNonceDelete {
	mutation := newSigningNonceMutation(c.config, OpDelete)
	return &SigningNonceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SigningNonceClient) DeleteOne(sn *SigningNonce) *SigningNonceDeleteOne {
	return c.DeleteOneID(sn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SigningNonceClient) DeleteOneID(id uuid.UUID) *SigningNonceDeleteOne {
	builder := c.Delete().Where(signingnonce.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SigningNonceDeleteOne{builder}
}

// Query returns a query builder for SigningNonce.
func (c *SigningNonceClient) Query() *SigningNonceQuery {
	return &SigningNonceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSigningNonce},
		inters: c.Interceptors(),
	}
}

// Get returns a SigningNonce entity by its id.
func (c *SigningNonceClient) Get(ctx context.Context, id uuid.UUID) (*SigningNonce, error) {
	return c.Query().Where(signingnonce.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SigningNonceClient) GetX(ctx context.Context, id uuid.UUID) *SigningNonce {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SigningNonceClient) Hooks() []Hook {
	return c.hooks.SigningNonce
}

// Interceptors returns the client interceptors.
func (c *SigningNonceClient) Interceptors() []Interceptor {
	return c.inters.SigningNonce
}

func (c *SigningNonceClient) mutate(ctx context.Context, m *SigningNonceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SigningNonceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SigningNonceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SigningNonceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SigningNonceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SigningNonce mutation op: %q", m.Op())
	}
}

// TreeClient is a client for the Tree schema.
type TreeClient struct {
	config
}

// NewTreeClient returns a client for the Tree from the given config.
func NewTreeClient(c config) *TreeClient {
	return &TreeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tree.Hooks(f(g(h())))`.
func (c *TreeClient) Use(hooks ...Hook) {
	c.hooks.Tree = append(c.hooks.Tree, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tree.Intercept(f(g(h())))`.
func (c *TreeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tree = append(c.inters.Tree, interceptors...)
}

// Create returns a builder for creating a Tree entity.
func (c *TreeClient) Create() *TreeCreate {
	mutation := newTreeMutation(c.config, OpCreate)
	return &TreeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tree entities.
func (c *TreeClient) CreateBulk(builders ...*TreeCreate) *TreeCreateBulk {
	return &TreeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TreeClient) MapCreateBulk(slice any, setFunc func(*TreeCreate, int)) *TreeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TreeCreateBulk{err: fmt.Errorf("calling to TreeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TreeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TreeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tree.
func (c *TreeClient) Update() *TreeUpdate {
	mutation := newTreeMutation(c.config, OpUpdate)
	return &TreeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TreeClient) UpdateOne(t *Tree) *TreeUpdateOne {
	mutation := newTreeMutation(c.config, OpUpdateOne, withTree(t))
	return &TreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TreeClient) UpdateOneID(id uuid.UUID) *TreeUpdateOne {
	mutation := newTreeMutation(c.config, OpUpdateOne, withTreeID(id))
	return &TreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tree.
func (c *TreeClient) Delete() *TreeDelete {
	mutation := newTreeMutation(c.config, OpDelete)
	return &TreeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TreeClient) DeleteOne(t *Tree) *TreeDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TreeClient) DeleteOneID(id uuid.UUID) *TreeDeleteOne {
	builder := c.Delete().Where(tree.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TreeDeleteOne{builder}
}

// Query returns a query builder for Tree.
func (c *TreeClient) Query() *TreeQuery {
	return &TreeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTree},
		inters: c.Interceptors(),
	}
}

// Get returns a Tree entity by its id.
func (c *TreeClient) Get(ctx context.Context, id uuid.UUID) (*Tree, error) {
	return c.Query().Where(tree.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TreeClient) GetX(ctx context.Context, id uuid.UUID) *Tree {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoot queries the root edge of a Tree.
func (c *TreeClient) QueryRoot(t *Tree) *LeafQuery {
	query := (&LeafClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tree.Table, tree.FieldID, id),
			sqlgraph.To(leaf.Table, leaf.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tree.RootTable, tree.RootColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLeaves queries the leaves edge of a Tree.
func (c *TreeClient) QueryLeaves(t *Tree) *LeafQuery {
	query := (&LeafClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tree.Table, tree.FieldID, id),
			sqlgraph.To(leaf.Table, leaf.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tree.LeavesTable, tree.LeavesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TreeClient) Hooks() []Hook {
	return c.hooks.Tree
}

// Interceptors returns the client interceptors.
func (c *TreeClient) Interceptors() []Interceptor {
	return c.inters.Tree
}

func (c *TreeClient) mutate(ctx context.Context, m *TreeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TreeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TreeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TreeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tree mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		DepositAddress, Leaf, SigningKeyshare, SigningNonce, Tree []ent.Hook
	}
	inters struct {
		DepositAddress, Leaf, SigningKeyshare, SigningNonce, Tree []ent.Interceptor
	}
)
