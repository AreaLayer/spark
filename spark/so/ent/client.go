// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lightsparkdev/spark-go/so/ent/cooperativeexit"
	"github.com/lightsparkdev/spark-go/so/ent/depositaddress"
	"github.com/lightsparkdev/spark-go/so/ent/preimagerequest"
	"github.com/lightsparkdev/spark-go/so/ent/preimageshare"
	"github.com/lightsparkdev/spark-go/so/ent/signingkeyshare"
	"github.com/lightsparkdev/spark-go/so/ent/signingnonce"
	"github.com/lightsparkdev/spark-go/so/ent/transfer"
	"github.com/lightsparkdev/spark-go/so/ent/transferleaf"
	"github.com/lightsparkdev/spark-go/so/ent/tree"
	"github.com/lightsparkdev/spark-go/so/ent/treenode"
	"github.com/lightsparkdev/spark-go/so/ent/usersignedtransaction"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CooperativeExit is the client for interacting with the CooperativeExit builders.
	CooperativeExit *CooperativeExitClient
	// DepositAddress is the client for interacting with the DepositAddress builders.
	DepositAddress *DepositAddressClient
	// PreimageRequest is the client for interacting with the PreimageRequest builders.
	PreimageRequest *PreimageRequestClient
	// PreimageShare is the client for interacting with the PreimageShare builders.
	PreimageShare *PreimageShareClient
	// SigningKeyshare is the client for interacting with the SigningKeyshare builders.
	SigningKeyshare *SigningKeyshareClient
	// SigningNonce is the client for interacting with the SigningNonce builders.
	SigningNonce *SigningNonceClient
	// Transfer is the client for interacting with the Transfer builders.
	Transfer *TransferClient
	// TransferLeaf is the client for interacting with the TransferLeaf builders.
	TransferLeaf *TransferLeafClient
	// Tree is the client for interacting with the Tree builders.
	Tree *TreeClient
	// TreeNode is the client for interacting with the TreeNode builders.
	TreeNode *TreeNodeClient
	// UserSignedTransaction is the client for interacting with the UserSignedTransaction builders.
	UserSignedTransaction *UserSignedTransactionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CooperativeExit = NewCooperativeExitClient(c.config)
	c.DepositAddress = NewDepositAddressClient(c.config)
	c.PreimageRequest = NewPreimageRequestClient(c.config)
	c.PreimageShare = NewPreimageShareClient(c.config)
	c.SigningKeyshare = NewSigningKeyshareClient(c.config)
	c.SigningNonce = NewSigningNonceClient(c.config)
	c.Transfer = NewTransferClient(c.config)
	c.TransferLeaf = NewTransferLeafClient(c.config)
	c.Tree = NewTreeClient(c.config)
	c.TreeNode = NewTreeNodeClient(c.config)
	c.UserSignedTransaction = NewUserSignedTransactionClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		CooperativeExit:       NewCooperativeExitClient(cfg),
		DepositAddress:        NewDepositAddressClient(cfg),
		PreimageRequest:       NewPreimageRequestClient(cfg),
		PreimageShare:         NewPreimageShareClient(cfg),
		SigningKeyshare:       NewSigningKeyshareClient(cfg),
		SigningNonce:          NewSigningNonceClient(cfg),
		Transfer:              NewTransferClient(cfg),
		TransferLeaf:          NewTransferLeafClient(cfg),
		Tree:                  NewTreeClient(cfg),
		TreeNode:              NewTreeNodeClient(cfg),
		UserSignedTransaction: NewUserSignedTransactionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		CooperativeExit:       NewCooperativeExitClient(cfg),
		DepositAddress:        NewDepositAddressClient(cfg),
		PreimageRequest:       NewPreimageRequestClient(cfg),
		PreimageShare:         NewPreimageShareClient(cfg),
		SigningKeyshare:       NewSigningKeyshareClient(cfg),
		SigningNonce:          NewSigningNonceClient(cfg),
		Transfer:              NewTransferClient(cfg),
		TransferLeaf:          NewTransferLeafClient(cfg),
		Tree:                  NewTreeClient(cfg),
		TreeNode:              NewTreeNodeClient(cfg),
		UserSignedTransaction: NewUserSignedTransactionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CooperativeExit.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.CooperativeExit, c.DepositAddress, c.PreimageRequest, c.PreimageShare,
		c.SigningKeyshare, c.SigningNonce, c.Transfer, c.TransferLeaf, c.Tree,
		c.TreeNode, c.UserSignedTransaction,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.CooperativeExit, c.DepositAddress, c.PreimageRequest, c.PreimageShare,
		c.SigningKeyshare, c.SigningNonce, c.Transfer, c.TransferLeaf, c.Tree,
		c.TreeNode, c.UserSignedTransaction,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CooperativeExitMutation:
		return c.CooperativeExit.mutate(ctx, m)
	case *DepositAddressMutation:
		return c.DepositAddress.mutate(ctx, m)
	case *PreimageRequestMutation:
		return c.PreimageRequest.mutate(ctx, m)
	case *PreimageShareMutation:
		return c.PreimageShare.mutate(ctx, m)
	case *SigningKeyshareMutation:
		return c.SigningKeyshare.mutate(ctx, m)
	case *SigningNonceMutation:
		return c.SigningNonce.mutate(ctx, m)
	case *TransferMutation:
		return c.Transfer.mutate(ctx, m)
	case *TransferLeafMutation:
		return c.TransferLeaf.mutate(ctx, m)
	case *TreeMutation:
		return c.Tree.mutate(ctx, m)
	case *TreeNodeMutation:
		return c.TreeNode.mutate(ctx, m)
	case *UserSignedTransactionMutation:
		return c.UserSignedTransaction.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CooperativeExitClient is a client for the CooperativeExit schema.
type CooperativeExitClient struct {
	config
}

// NewCooperativeExitClient returns a client for the CooperativeExit from the given config.
func NewCooperativeExitClient(c config) *CooperativeExitClient {
	return &CooperativeExitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cooperativeexit.Hooks(f(g(h())))`.
func (c *CooperativeExitClient) Use(hooks ...Hook) {
	c.hooks.CooperativeExit = append(c.hooks.CooperativeExit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cooperativeexit.Intercept(f(g(h())))`.
func (c *CooperativeExitClient) Intercept(interceptors ...Interceptor) {
	c.inters.CooperativeExit = append(c.inters.CooperativeExit, interceptors...)
}

// Create returns a builder for creating a CooperativeExit entity.
func (c *CooperativeExitClient) Create() *CooperativeExitCreate {
	mutation := newCooperativeExitMutation(c.config, OpCreate)
	return &CooperativeExitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CooperativeExit entities.
func (c *CooperativeExitClient) CreateBulk(builders ...*CooperativeExitCreate) *CooperativeExitCreateBulk {
	return &CooperativeExitCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CooperativeExitClient) MapCreateBulk(slice any, setFunc func(*CooperativeExitCreate, int)) *CooperativeExitCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CooperativeExitCreateBulk{err: fmt.Errorf("calling to CooperativeExitClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CooperativeExitCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CooperativeExitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CooperativeExit.
func (c *CooperativeExitClient) Update() *CooperativeExitUpdate {
	mutation := newCooperativeExitMutation(c.config, OpUpdate)
	return &CooperativeExitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CooperativeExitClient) UpdateOne(ce *CooperativeExit) *CooperativeExitUpdateOne {
	mutation := newCooperativeExitMutation(c.config, OpUpdateOne, withCooperativeExit(ce))
	return &CooperativeExitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CooperativeExitClient) UpdateOneID(id uuid.UUID) *CooperativeExitUpdateOne {
	mutation := newCooperativeExitMutation(c.config, OpUpdateOne, withCooperativeExitID(id))
	return &CooperativeExitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CooperativeExit.
func (c *CooperativeExitClient) Delete() *CooperativeExitDelete {
	mutation := newCooperativeExitMutation(c.config, OpDelete)
	return &CooperativeExitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CooperativeExitClient) DeleteOne(ce *CooperativeExit) *CooperativeExitDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CooperativeExitClient) DeleteOneID(id uuid.UUID) *CooperativeExitDeleteOne {
	builder := c.Delete().Where(cooperativeexit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CooperativeExitDeleteOne{builder}
}

// Query returns a query builder for CooperativeExit.
func (c *CooperativeExitClient) Query() *CooperativeExitQuery {
	return &CooperativeExitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCooperativeExit},
		inters: c.Interceptors(),
	}
}

// Get returns a CooperativeExit entity by its id.
func (c *CooperativeExitClient) Get(ctx context.Context, id uuid.UUID) (*CooperativeExit, error) {
	return c.Query().Where(cooperativeexit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CooperativeExitClient) GetX(ctx context.Context, id uuid.UUID) *CooperativeExit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransfer queries the transfer edge of a CooperativeExit.
func (c *CooperativeExitClient) QueryTransfer(ce *CooperativeExit) *TransferQuery {
	query := (&TransferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cooperativeexit.Table, cooperativeexit.FieldID, id),
			sqlgraph.To(transfer.Table, transfer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, cooperativeexit.TransferTable, cooperativeexit.TransferColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CooperativeExitClient) Hooks() []Hook {
	return c.hooks.CooperativeExit
}

// Interceptors returns the client interceptors.
func (c *CooperativeExitClient) Interceptors() []Interceptor {
	return c.inters.CooperativeExit
}

func (c *CooperativeExitClient) mutate(ctx context.Context, m *CooperativeExitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CooperativeExitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CooperativeExitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CooperativeExitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CooperativeExitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CooperativeExit mutation op: %q", m.Op())
	}
}

// DepositAddressClient is a client for the DepositAddress schema.
type DepositAddressClient struct {
	config
}

// NewDepositAddressClient returns a client for the DepositAddress from the given config.
func NewDepositAddressClient(c config) *DepositAddressClient {
	return &DepositAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `depositaddress.Hooks(f(g(h())))`.
func (c *DepositAddressClient) Use(hooks ...Hook) {
	c.hooks.DepositAddress = append(c.hooks.DepositAddress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `depositaddress.Intercept(f(g(h())))`.
func (c *DepositAddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.DepositAddress = append(c.inters.DepositAddress, interceptors...)
}

// Create returns a builder for creating a DepositAddress entity.
func (c *DepositAddressClient) Create() *DepositAddressCreate {
	mutation := newDepositAddressMutation(c.config, OpCreate)
	return &DepositAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DepositAddress entities.
func (c *DepositAddressClient) CreateBulk(builders ...*DepositAddressCreate) *DepositAddressCreateBulk {
	return &DepositAddressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DepositAddressClient) MapCreateBulk(slice any, setFunc func(*DepositAddressCreate, int)) *DepositAddressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DepositAddressCreateBulk{err: fmt.Errorf("calling to DepositAddressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DepositAddressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DepositAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DepositAddress.
func (c *DepositAddressClient) Update() *DepositAddressUpdate {
	mutation := newDepositAddressMutation(c.config, OpUpdate)
	return &DepositAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepositAddressClient) UpdateOne(da *DepositAddress) *DepositAddressUpdateOne {
	mutation := newDepositAddressMutation(c.config, OpUpdateOne, withDepositAddress(da))
	return &DepositAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepositAddressClient) UpdateOneID(id uuid.UUID) *DepositAddressUpdateOne {
	mutation := newDepositAddressMutation(c.config, OpUpdateOne, withDepositAddressID(id))
	return &DepositAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DepositAddress.
func (c *DepositAddressClient) Delete() *DepositAddressDelete {
	mutation := newDepositAddressMutation(c.config, OpDelete)
	return &DepositAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DepositAddressClient) DeleteOne(da *DepositAddress) *DepositAddressDeleteOne {
	return c.DeleteOneID(da.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DepositAddressClient) DeleteOneID(id uuid.UUID) *DepositAddressDeleteOne {
	builder := c.Delete().Where(depositaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepositAddressDeleteOne{builder}
}

// Query returns a query builder for DepositAddress.
func (c *DepositAddressClient) Query() *DepositAddressQuery {
	return &DepositAddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDepositAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a DepositAddress entity by its id.
func (c *DepositAddressClient) Get(ctx context.Context, id uuid.UUID) (*DepositAddress, error) {
	return c.Query().Where(depositaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepositAddressClient) GetX(ctx context.Context, id uuid.UUID) *DepositAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySigningKeyshare queries the signing_keyshare edge of a DepositAddress.
func (c *DepositAddressClient) QuerySigningKeyshare(da *DepositAddress) *SigningKeyshareQuery {
	query := (&SigningKeyshareClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(depositaddress.Table, depositaddress.FieldID, id),
			sqlgraph.To(signingkeyshare.Table, signingkeyshare.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, depositaddress.SigningKeyshareTable, depositaddress.SigningKeyshareColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepositAddressClient) Hooks() []Hook {
	return c.hooks.DepositAddress
}

// Interceptors returns the client interceptors.
func (c *DepositAddressClient) Interceptors() []Interceptor {
	return c.inters.DepositAddress
}

func (c *DepositAddressClient) mutate(ctx context.Context, m *DepositAddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DepositAddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DepositAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DepositAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DepositAddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DepositAddress mutation op: %q", m.Op())
	}
}

// PreimageRequestClient is a client for the PreimageRequest schema.
type PreimageRequestClient struct {
	config
}

// NewPreimageRequestClient returns a client for the PreimageRequest from the given config.
func NewPreimageRequestClient(c config) *PreimageRequestClient {
	return &PreimageRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `preimagerequest.Hooks(f(g(h())))`.
func (c *PreimageRequestClient) Use(hooks ...Hook) {
	c.hooks.PreimageRequest = append(c.hooks.PreimageRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `preimagerequest.Intercept(f(g(h())))`.
func (c *PreimageRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.PreimageRequest = append(c.inters.PreimageRequest, interceptors...)
}

// Create returns a builder for creating a PreimageRequest entity.
func (c *PreimageRequestClient) Create() *PreimageRequestCreate {
	mutation := newPreimageRequestMutation(c.config, OpCreate)
	return &PreimageRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PreimageRequest entities.
func (c *PreimageRequestClient) CreateBulk(builders ...*PreimageRequestCreate) *PreimageRequestCreateBulk {
	return &PreimageRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PreimageRequestClient) MapCreateBulk(slice any, setFunc func(*PreimageRequestCreate, int)) *PreimageRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PreimageRequestCreateBulk{err: fmt.Errorf("calling to PreimageRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PreimageRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PreimageRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PreimageRequest.
func (c *PreimageRequestClient) Update() *PreimageRequestUpdate {
	mutation := newPreimageRequestMutation(c.config, OpUpdate)
	return &PreimageRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PreimageRequestClient) UpdateOne(pr *PreimageRequest) *PreimageRequestUpdateOne {
	mutation := newPreimageRequestMutation(c.config, OpUpdateOne, withPreimageRequest(pr))
	return &PreimageRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PreimageRequestClient) UpdateOneID(id uuid.UUID) *PreimageRequestUpdateOne {
	mutation := newPreimageRequestMutation(c.config, OpUpdateOne, withPreimageRequestID(id))
	return &PreimageRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PreimageRequest.
func (c *PreimageRequestClient) Delete() *PreimageRequestDelete {
	mutation := newPreimageRequestMutation(c.config, OpDelete)
	return &PreimageRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PreimageRequestClient) DeleteOne(pr *PreimageRequest) *PreimageRequestDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PreimageRequestClient) DeleteOneID(id uuid.UUID) *PreimageRequestDeleteOne {
	builder := c.Delete().Where(preimagerequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PreimageRequestDeleteOne{builder}
}

// Query returns a query builder for PreimageRequest.
func (c *PreimageRequestClient) Query() *PreimageRequestQuery {
	return &PreimageRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePreimageRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a PreimageRequest entity by its id.
func (c *PreimageRequestClient) Get(ctx context.Context, id uuid.UUID) (*PreimageRequest, error) {
	return c.Query().Where(preimagerequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PreimageRequestClient) GetX(ctx context.Context, id uuid.UUID) *PreimageRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransactions queries the transactions edge of a PreimageRequest.
func (c *PreimageRequestClient) QueryTransactions(pr *PreimageRequest) *UserSignedTransactionQuery {
	query := (&UserSignedTransactionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(preimagerequest.Table, preimagerequest.FieldID, id),
			sqlgraph.To(usersignedtransaction.Table, usersignedtransaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, preimagerequest.TransactionsTable, preimagerequest.TransactionsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPreimageShares queries the preimage_shares edge of a PreimageRequest.
func (c *PreimageRequestClient) QueryPreimageShares(pr *PreimageRequest) *PreimageShareQuery {
	query := (&PreimageShareClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(preimagerequest.Table, preimagerequest.FieldID, id),
			sqlgraph.To(preimageshare.Table, preimageshare.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, preimagerequest.PreimageSharesTable, preimagerequest.PreimageSharesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransfers queries the transfers edge of a PreimageRequest.
func (c *PreimageRequestClient) QueryTransfers(pr *PreimageRequest) *TransferQuery {
	query := (&TransferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(preimagerequest.Table, preimagerequest.FieldID, id),
			sqlgraph.To(transfer.Table, transfer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, preimagerequest.TransfersTable, preimagerequest.TransfersColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PreimageRequestClient) Hooks() []Hook {
	return c.hooks.PreimageRequest
}

// Interceptors returns the client interceptors.
func (c *PreimageRequestClient) Interceptors() []Interceptor {
	return c.inters.PreimageRequest
}

func (c *PreimageRequestClient) mutate(ctx context.Context, m *PreimageRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PreimageRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PreimageRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PreimageRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PreimageRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PreimageRequest mutation op: %q", m.Op())
	}
}

// PreimageShareClient is a client for the PreimageShare schema.
type PreimageShareClient struct {
	config
}

// NewPreimageShareClient returns a client for the PreimageShare from the given config.
func NewPreimageShareClient(c config) *PreimageShareClient {
	return &PreimageShareClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `preimageshare.Hooks(f(g(h())))`.
func (c *PreimageShareClient) Use(hooks ...Hook) {
	c.hooks.PreimageShare = append(c.hooks.PreimageShare, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `preimageshare.Intercept(f(g(h())))`.
func (c *PreimageShareClient) Intercept(interceptors ...Interceptor) {
	c.inters.PreimageShare = append(c.inters.PreimageShare, interceptors...)
}

// Create returns a builder for creating a PreimageShare entity.
func (c *PreimageShareClient) Create() *PreimageShareCreate {
	mutation := newPreimageShareMutation(c.config, OpCreate)
	return &PreimageShareCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PreimageShare entities.
func (c *PreimageShareClient) CreateBulk(builders ...*PreimageShareCreate) *PreimageShareCreateBulk {
	return &PreimageShareCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PreimageShareClient) MapCreateBulk(slice any, setFunc func(*PreimageShareCreate, int)) *PreimageShareCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PreimageShareCreateBulk{err: fmt.Errorf("calling to PreimageShareClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PreimageShareCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PreimageShareCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PreimageShare.
func (c *PreimageShareClient) Update() *PreimageShareUpdate {
	mutation := newPreimageShareMutation(c.config, OpUpdate)
	return &PreimageShareUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PreimageShareClient) UpdateOne(ps *PreimageShare) *PreimageShareUpdateOne {
	mutation := newPreimageShareMutation(c.config, OpUpdateOne, withPreimageShare(ps))
	return &PreimageShareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PreimageShareClient) UpdateOneID(id uuid.UUID) *PreimageShareUpdateOne {
	mutation := newPreimageShareMutation(c.config, OpUpdateOne, withPreimageShareID(id))
	return &PreimageShareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PreimageShare.
func (c *PreimageShareClient) Delete() *PreimageShareDelete {
	mutation := newPreimageShareMutation(c.config, OpDelete)
	return &PreimageShareDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PreimageShareClient) DeleteOne(ps *PreimageShare) *PreimageShareDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PreimageShareClient) DeleteOneID(id uuid.UUID) *PreimageShareDeleteOne {
	builder := c.Delete().Where(preimageshare.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PreimageShareDeleteOne{builder}
}

// Query returns a query builder for PreimageShare.
func (c *PreimageShareClient) Query() *PreimageShareQuery {
	return &PreimageShareQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePreimageShare},
		inters: c.Interceptors(),
	}
}

// Get returns a PreimageShare entity by its id.
func (c *PreimageShareClient) Get(ctx context.Context, id uuid.UUID) (*PreimageShare, error) {
	return c.Query().Where(preimageshare.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PreimageShareClient) GetX(ctx context.Context, id uuid.UUID) *PreimageShare {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPreimageRequest queries the preimage_request edge of a PreimageShare.
func (c *PreimageShareClient) QueryPreimageRequest(ps *PreimageShare) *PreimageRequestQuery {
	query := (&PreimageRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(preimageshare.Table, preimageshare.FieldID, id),
			sqlgraph.To(preimagerequest.Table, preimagerequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, preimageshare.PreimageRequestTable, preimageshare.PreimageRequestColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PreimageShareClient) Hooks() []Hook {
	return c.hooks.PreimageShare
}

// Interceptors returns the client interceptors.
func (c *PreimageShareClient) Interceptors() []Interceptor {
	return c.inters.PreimageShare
}

func (c *PreimageShareClient) mutate(ctx context.Context, m *PreimageShareMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PreimageShareCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PreimageShareUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PreimageShareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PreimageShareDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PreimageShare mutation op: %q", m.Op())
	}
}

// SigningKeyshareClient is a client for the SigningKeyshare schema.
type SigningKeyshareClient struct {
	config
}

// NewSigningKeyshareClient returns a client for the SigningKeyshare from the given config.
func NewSigningKeyshareClient(c config) *SigningKeyshareClient {
	return &SigningKeyshareClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `signingkeyshare.Hooks(f(g(h())))`.
func (c *SigningKeyshareClient) Use(hooks ...Hook) {
	c.hooks.SigningKeyshare = append(c.hooks.SigningKeyshare, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `signingkeyshare.Intercept(f(g(h())))`.
func (c *SigningKeyshareClient) Intercept(interceptors ...Interceptor) {
	c.inters.SigningKeyshare = append(c.inters.SigningKeyshare, interceptors...)
}

// Create returns a builder for creating a SigningKeyshare entity.
func (c *SigningKeyshareClient) Create() *SigningKeyshareCreate {
	mutation := newSigningKeyshareMutation(c.config, OpCreate)
	return &SigningKeyshareCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SigningKeyshare entities.
func (c *SigningKeyshareClient) CreateBulk(builders ...*SigningKeyshareCreate) *SigningKeyshareCreateBulk {
	return &SigningKeyshareCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SigningKeyshareClient) MapCreateBulk(slice any, setFunc func(*SigningKeyshareCreate, int)) *SigningKeyshareCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SigningKeyshareCreateBulk{err: fmt.Errorf("calling to SigningKeyshareClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SigningKeyshareCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SigningKeyshareCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SigningKeyshare.
func (c *SigningKeyshareClient) Update() *SigningKeyshareUpdate {
	mutation := newSigningKeyshareMutation(c.config, OpUpdate)
	return &SigningKeyshareUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SigningKeyshareClient) UpdateOne(sk *SigningKeyshare) *SigningKeyshareUpdateOne {
	mutation := newSigningKeyshareMutation(c.config, OpUpdateOne, withSigningKeyshare(sk))
	return &SigningKeyshareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SigningKeyshareClient) UpdateOneID(id uuid.UUID) *SigningKeyshareUpdateOne {
	mutation := newSigningKeyshareMutation(c.config, OpUpdateOne, withSigningKeyshareID(id))
	return &SigningKeyshareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SigningKeyshare.
func (c *SigningKeyshareClient) Delete() *SigningKeyshareDelete {
	mutation := newSigningKeyshareMutation(c.config, OpDelete)
	return &SigningKeyshareDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SigningKeyshareClient) DeleteOne(sk *SigningKeyshare) *SigningKeyshareDeleteOne {
	return c.DeleteOneID(sk.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SigningKeyshareClient) DeleteOneID(id uuid.UUID) *SigningKeyshareDeleteOne {
	builder := c.Delete().Where(signingkeyshare.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SigningKeyshareDeleteOne{builder}
}

// Query returns a query builder for SigningKeyshare.
func (c *SigningKeyshareClient) Query() *SigningKeyshareQuery {
	return &SigningKeyshareQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSigningKeyshare},
		inters: c.Interceptors(),
	}
}

// Get returns a SigningKeyshare entity by its id.
func (c *SigningKeyshareClient) Get(ctx context.Context, id uuid.UUID) (*SigningKeyshare, error) {
	return c.Query().Where(signingkeyshare.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SigningKeyshareClient) GetX(ctx context.Context, id uuid.UUID) *SigningKeyshare {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SigningKeyshareClient) Hooks() []Hook {
	return c.hooks.SigningKeyshare
}

// Interceptors returns the client interceptors.
func (c *SigningKeyshareClient) Interceptors() []Interceptor {
	return c.inters.SigningKeyshare
}

func (c *SigningKeyshareClient) mutate(ctx context.Context, m *SigningKeyshareMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SigningKeyshareCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SigningKeyshareUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SigningKeyshareUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SigningKeyshareDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SigningKeyshare mutation op: %q", m.Op())
	}
}

// SigningNonceClient is a client for the SigningNonce schema.
type SigningNonceClient struct {
	config
}

// NewSigningNonceClient returns a client for the SigningNonce from the given config.
func NewSigningNonceClient(c config) *SigningNonceClient {
	return &SigningNonceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `signingnonce.Hooks(f(g(h())))`.
func (c *SigningNonceClient) Use(hooks ...Hook) {
	c.hooks.SigningNonce = append(c.hooks.SigningNonce, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `signingnonce.Intercept(f(g(h())))`.
func (c *SigningNonceClient) Intercept(interceptors ...Interceptor) {
	c.inters.SigningNonce = append(c.inters.SigningNonce, interceptors...)
}

// Create returns a builder for creating a SigningNonce entity.
func (c *SigningNonceClient) Create() *SigningNonceCreate {
	mutation := newSigningNonceMutation(c.config, OpCreate)
	return &SigningNonceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SigningNonce entities.
func (c *SigningNonceClient) CreateBulk(builders ...*SigningNonceCreate) *SigningNonceCreateBulk {
	return &SigningNonceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SigningNonceClient) MapCreateBulk(slice any, setFunc func(*SigningNonceCreate, int)) *SigningNonceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SigningNonceCreateBulk{err: fmt.Errorf("calling to SigningNonceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SigningNonceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SigningNonceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SigningNonce.
func (c *SigningNonceClient) Update() *SigningNonceUpdate {
	mutation := newSigningNonceMutation(c.config, OpUpdate)
	return &SigningNonceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SigningNonceClient) UpdateOne(sn *SigningNonce) *SigningNonceUpdateOne {
	mutation := newSigningNonceMutation(c.config, OpUpdateOne, withSigningNonce(sn))
	return &SigningNonceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SigningNonceClient) UpdateOneID(id uuid.UUID) *SigningNonceUpdateOne {
	mutation := newSigningNonceMutation(c.config, OpUpdateOne, withSigningNonceID(id))
	return &SigningNonceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SigningNonce.
func (c *SigningNonceClient) Delete() *SigningNonceDelete {
	mutation := newSigningNonceMutation(c.config, OpDelete)
	return &SigningNonceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SigningNonceClient) DeleteOne(sn *SigningNonce) *SigningNonceDeleteOne {
	return c.DeleteOneID(sn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SigningNonceClient) DeleteOneID(id uuid.UUID) *SigningNonceDeleteOne {
	builder := c.Delete().Where(signingnonce.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SigningNonceDeleteOne{builder}
}

// Query returns a query builder for SigningNonce.
func (c *SigningNonceClient) Query() *SigningNonceQuery {
	return &SigningNonceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSigningNonce},
		inters: c.Interceptors(),
	}
}

// Get returns a SigningNonce entity by its id.
func (c *SigningNonceClient) Get(ctx context.Context, id uuid.UUID) (*SigningNonce, error) {
	return c.Query().Where(signingnonce.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SigningNonceClient) GetX(ctx context.Context, id uuid.UUID) *SigningNonce {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SigningNonceClient) Hooks() []Hook {
	return c.hooks.SigningNonce
}

// Interceptors returns the client interceptors.
func (c *SigningNonceClient) Interceptors() []Interceptor {
	return c.inters.SigningNonce
}

func (c *SigningNonceClient) mutate(ctx context.Context, m *SigningNonceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SigningNonceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SigningNonceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SigningNonceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SigningNonceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SigningNonce mutation op: %q", m.Op())
	}
}

// TransferClient is a client for the Transfer schema.
type TransferClient struct {
	config
}

// NewTransferClient returns a client for the Transfer from the given config.
func NewTransferClient(c config) *TransferClient {
	return &TransferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transfer.Hooks(f(g(h())))`.
func (c *TransferClient) Use(hooks ...Hook) {
	c.hooks.Transfer = append(c.hooks.Transfer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transfer.Intercept(f(g(h())))`.
func (c *TransferClient) Intercept(interceptors ...Interceptor) {
	c.inters.Transfer = append(c.inters.Transfer, interceptors...)
}

// Create returns a builder for creating a Transfer entity.
func (c *TransferClient) Create() *TransferCreate {
	mutation := newTransferMutation(c.config, OpCreate)
	return &TransferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transfer entities.
func (c *TransferClient) CreateBulk(builders ...*TransferCreate) *TransferCreateBulk {
	return &TransferCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TransferClient) MapCreateBulk(slice any, setFunc func(*TransferCreate, int)) *TransferCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TransferCreateBulk{err: fmt.Errorf("calling to TransferClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TransferCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TransferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transfer.
func (c *TransferClient) Update() *TransferUpdate {
	mutation := newTransferMutation(c.config, OpUpdate)
	return &TransferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransferClient) UpdateOne(t *Transfer) *TransferUpdateOne {
	mutation := newTransferMutation(c.config, OpUpdateOne, withTransfer(t))
	return &TransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransferClient) UpdateOneID(id uuid.UUID) *TransferUpdateOne {
	mutation := newTransferMutation(c.config, OpUpdateOne, withTransferID(id))
	return &TransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transfer.
func (c *TransferClient) Delete() *TransferDelete {
	mutation := newTransferMutation(c.config, OpDelete)
	return &TransferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransferClient) DeleteOne(t *Transfer) *TransferDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransferClient) DeleteOneID(id uuid.UUID) *TransferDeleteOne {
	builder := c.Delete().Where(transfer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransferDeleteOne{builder}
}

// Query returns a query builder for Transfer.
func (c *TransferClient) Query() *TransferQuery {
	return &TransferQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransfer},
		inters: c.Interceptors(),
	}
}

// Get returns a Transfer entity by its id.
func (c *TransferClient) Get(ctx context.Context, id uuid.UUID) (*Transfer, error) {
	return c.Query().Where(transfer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransferClient) GetX(ctx context.Context, id uuid.UUID) *Transfer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransferLeaves queries the transfer_leaves edge of a Transfer.
func (c *TransferClient) QueryTransferLeaves(t *Transfer) *TransferLeafQuery {
	query := (&TransferLeafClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transfer.Table, transfer.FieldID, id),
			sqlgraph.To(transferleaf.Table, transferleaf.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, transfer.TransferLeavesTable, transfer.TransferLeavesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransferClient) Hooks() []Hook {
	return c.hooks.Transfer
}

// Interceptors returns the client interceptors.
func (c *TransferClient) Interceptors() []Interceptor {
	return c.inters.Transfer
}

func (c *TransferClient) mutate(ctx context.Context, m *TransferMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransferCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransferUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransferDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Transfer mutation op: %q", m.Op())
	}
}

// TransferLeafClient is a client for the TransferLeaf schema.
type TransferLeafClient struct {
	config
}

// NewTransferLeafClient returns a client for the TransferLeaf from the given config.
func NewTransferLeafClient(c config) *TransferLeafClient {
	return &TransferLeafClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transferleaf.Hooks(f(g(h())))`.
func (c *TransferLeafClient) Use(hooks ...Hook) {
	c.hooks.TransferLeaf = append(c.hooks.TransferLeaf, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transferleaf.Intercept(f(g(h())))`.
func (c *TransferLeafClient) Intercept(interceptors ...Interceptor) {
	c.inters.TransferLeaf = append(c.inters.TransferLeaf, interceptors...)
}

// Create returns a builder for creating a TransferLeaf entity.
func (c *TransferLeafClient) Create() *TransferLeafCreate {
	mutation := newTransferLeafMutation(c.config, OpCreate)
	return &TransferLeafCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TransferLeaf entities.
func (c *TransferLeafClient) CreateBulk(builders ...*TransferLeafCreate) *TransferLeafCreateBulk {
	return &TransferLeafCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TransferLeafClient) MapCreateBulk(slice any, setFunc func(*TransferLeafCreate, int)) *TransferLeafCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TransferLeafCreateBulk{err: fmt.Errorf("calling to TransferLeafClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TransferLeafCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TransferLeafCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TransferLeaf.
func (c *TransferLeafClient) Update() *TransferLeafUpdate {
	mutation := newTransferLeafMutation(c.config, OpUpdate)
	return &TransferLeafUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransferLeafClient) UpdateOne(tl *TransferLeaf) *TransferLeafUpdateOne {
	mutation := newTransferLeafMutation(c.config, OpUpdateOne, withTransferLeaf(tl))
	return &TransferLeafUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransferLeafClient) UpdateOneID(id uuid.UUID) *TransferLeafUpdateOne {
	mutation := newTransferLeafMutation(c.config, OpUpdateOne, withTransferLeafID(id))
	return &TransferLeafUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TransferLeaf.
func (c *TransferLeafClient) Delete() *TransferLeafDelete {
	mutation := newTransferLeafMutation(c.config, OpDelete)
	return &TransferLeafDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransferLeafClient) DeleteOne(tl *TransferLeaf) *TransferLeafDeleteOne {
	return c.DeleteOneID(tl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransferLeafClient) DeleteOneID(id uuid.UUID) *TransferLeafDeleteOne {
	builder := c.Delete().Where(transferleaf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransferLeafDeleteOne{builder}
}

// Query returns a query builder for TransferLeaf.
func (c *TransferLeafClient) Query() *TransferLeafQuery {
	return &TransferLeafQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransferLeaf},
		inters: c.Interceptors(),
	}
}

// Get returns a TransferLeaf entity by its id.
func (c *TransferLeafClient) Get(ctx context.Context, id uuid.UUID) (*TransferLeaf, error) {
	return c.Query().Where(transferleaf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransferLeafClient) GetX(ctx context.Context, id uuid.UUID) *TransferLeaf {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransfer queries the transfer edge of a TransferLeaf.
func (c *TransferLeafClient) QueryTransfer(tl *TransferLeaf) *TransferQuery {
	query := (&TransferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transferleaf.Table, transferleaf.FieldID, id),
			sqlgraph.To(transfer.Table, transfer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, transferleaf.TransferTable, transferleaf.TransferColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLeaf queries the leaf edge of a TransferLeaf.
func (c *TransferLeafClient) QueryLeaf(tl *TransferLeaf) *TreeNodeQuery {
	query := (&TreeNodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transferleaf.Table, transferleaf.FieldID, id),
			sqlgraph.To(treenode.Table, treenode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, transferleaf.LeafTable, transferleaf.LeafColumn),
		)
		fromV = sqlgraph.Neighbors(tl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransferLeafClient) Hooks() []Hook {
	return c.hooks.TransferLeaf
}

// Interceptors returns the client interceptors.
func (c *TransferLeafClient) Interceptors() []Interceptor {
	return c.inters.TransferLeaf
}

func (c *TransferLeafClient) mutate(ctx context.Context, m *TransferLeafMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransferLeafCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransferLeafUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransferLeafUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransferLeafDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TransferLeaf mutation op: %q", m.Op())
	}
}

// TreeClient is a client for the Tree schema.
type TreeClient struct {
	config
}

// NewTreeClient returns a client for the Tree from the given config.
func NewTreeClient(c config) *TreeClient {
	return &TreeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tree.Hooks(f(g(h())))`.
func (c *TreeClient) Use(hooks ...Hook) {
	c.hooks.Tree = append(c.hooks.Tree, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tree.Intercept(f(g(h())))`.
func (c *TreeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tree = append(c.inters.Tree, interceptors...)
}

// Create returns a builder for creating a Tree entity.
func (c *TreeClient) Create() *TreeCreate {
	mutation := newTreeMutation(c.config, OpCreate)
	return &TreeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tree entities.
func (c *TreeClient) CreateBulk(builders ...*TreeCreate) *TreeCreateBulk {
	return &TreeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TreeClient) MapCreateBulk(slice any, setFunc func(*TreeCreate, int)) *TreeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TreeCreateBulk{err: fmt.Errorf("calling to TreeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TreeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TreeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tree.
func (c *TreeClient) Update() *TreeUpdate {
	mutation := newTreeMutation(c.config, OpUpdate)
	return &TreeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TreeClient) UpdateOne(t *Tree) *TreeUpdateOne {
	mutation := newTreeMutation(c.config, OpUpdateOne, withTree(t))
	return &TreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TreeClient) UpdateOneID(id uuid.UUID) *TreeUpdateOne {
	mutation := newTreeMutation(c.config, OpUpdateOne, withTreeID(id))
	return &TreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tree.
func (c *TreeClient) Delete() *TreeDelete {
	mutation := newTreeMutation(c.config, OpDelete)
	return &TreeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TreeClient) DeleteOne(t *Tree) *TreeDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TreeClient) DeleteOneID(id uuid.UUID) *TreeDeleteOne {
	builder := c.Delete().Where(tree.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TreeDeleteOne{builder}
}

// Query returns a query builder for Tree.
func (c *TreeClient) Query() *TreeQuery {
	return &TreeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTree},
		inters: c.Interceptors(),
	}
}

// Get returns a Tree entity by its id.
func (c *TreeClient) Get(ctx context.Context, id uuid.UUID) (*Tree, error) {
	return c.Query().Where(tree.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TreeClient) GetX(ctx context.Context, id uuid.UUID) *Tree {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoot queries the root edge of a Tree.
func (c *TreeClient) QueryRoot(t *Tree) *TreeNodeQuery {
	query := (&TreeNodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tree.Table, tree.FieldID, id),
			sqlgraph.To(treenode.Table, treenode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tree.RootTable, tree.RootColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNodes queries the nodes edge of a Tree.
func (c *TreeClient) QueryNodes(t *Tree) *TreeNodeQuery {
	query := (&TreeNodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tree.Table, tree.FieldID, id),
			sqlgraph.To(treenode.Table, treenode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, tree.NodesTable, tree.NodesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TreeClient) Hooks() []Hook {
	return c.hooks.Tree
}

// Interceptors returns the client interceptors.
func (c *TreeClient) Interceptors() []Interceptor {
	return c.inters.Tree
}

func (c *TreeClient) mutate(ctx context.Context, m *TreeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TreeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TreeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TreeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TreeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tree mutation op: %q", m.Op())
	}
}

// TreeNodeClient is a client for the TreeNode schema.
type TreeNodeClient struct {
	config
}

// NewTreeNodeClient returns a client for the TreeNode from the given config.
func NewTreeNodeClient(c config) *TreeNodeClient {
	return &TreeNodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `treenode.Hooks(f(g(h())))`.
func (c *TreeNodeClient) Use(hooks ...Hook) {
	c.hooks.TreeNode = append(c.hooks.TreeNode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `treenode.Intercept(f(g(h())))`.
func (c *TreeNodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.TreeNode = append(c.inters.TreeNode, interceptors...)
}

// Create returns a builder for creating a TreeNode entity.
func (c *TreeNodeClient) Create() *TreeNodeCreate {
	mutation := newTreeNodeMutation(c.config, OpCreate)
	return &TreeNodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TreeNode entities.
func (c *TreeNodeClient) CreateBulk(builders ...*TreeNodeCreate) *TreeNodeCreateBulk {
	return &TreeNodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TreeNodeClient) MapCreateBulk(slice any, setFunc func(*TreeNodeCreate, int)) *TreeNodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TreeNodeCreateBulk{err: fmt.Errorf("calling to TreeNodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TreeNodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TreeNodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TreeNode.
func (c *TreeNodeClient) Update() *TreeNodeUpdate {
	mutation := newTreeNodeMutation(c.config, OpUpdate)
	return &TreeNodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TreeNodeClient) UpdateOne(tn *TreeNode) *TreeNodeUpdateOne {
	mutation := newTreeNodeMutation(c.config, OpUpdateOne, withTreeNode(tn))
	return &TreeNodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TreeNodeClient) UpdateOneID(id uuid.UUID) *TreeNodeUpdateOne {
	mutation := newTreeNodeMutation(c.config, OpUpdateOne, withTreeNodeID(id))
	return &TreeNodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TreeNode.
func (c *TreeNodeClient) Delete() *TreeNodeDelete {
	mutation := newTreeNodeMutation(c.config, OpDelete)
	return &TreeNodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TreeNodeClient) DeleteOne(tn *TreeNode) *TreeNodeDeleteOne {
	return c.DeleteOneID(tn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TreeNodeClient) DeleteOneID(id uuid.UUID) *TreeNodeDeleteOne {
	builder := c.Delete().Where(treenode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TreeNodeDeleteOne{builder}
}

// Query returns a query builder for TreeNode.
func (c *TreeNodeClient) Query() *TreeNodeQuery {
	return &TreeNodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTreeNode},
		inters: c.Interceptors(),
	}
}

// Get returns a TreeNode entity by its id.
func (c *TreeNodeClient) Get(ctx context.Context, id uuid.UUID) (*TreeNode, error) {
	return c.Query().Where(treenode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TreeNodeClient) GetX(ctx context.Context, id uuid.UUID) *TreeNode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTree queries the tree edge of a TreeNode.
func (c *TreeNodeClient) QueryTree(tn *TreeNode) *TreeQuery {
	query := (&TreeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treenode.Table, treenode.FieldID, id),
			sqlgraph.To(tree.Table, tree.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, treenode.TreeTable, treenode.TreeColumn),
		)
		fromV = sqlgraph.Neighbors(tn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a TreeNode.
func (c *TreeNodeClient) QueryParent(tn *TreeNode) *TreeNodeQuery {
	query := (&TreeNodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treenode.Table, treenode.FieldID, id),
			sqlgraph.To(treenode.Table, treenode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, treenode.ParentTable, treenode.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(tn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySigningKeyshare queries the signing_keyshare edge of a TreeNode.
func (c *TreeNodeClient) QuerySigningKeyshare(tn *TreeNode) *SigningKeyshareQuery {
	query := (&SigningKeyshareClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treenode.Table, treenode.FieldID, id),
			sqlgraph.To(signingkeyshare.Table, signingkeyshare.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, treenode.SigningKeyshareTable, treenode.SigningKeyshareColumn),
		)
		fromV = sqlgraph.Neighbors(tn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a TreeNode.
func (c *TreeNodeClient) QueryChildren(tn *TreeNode) *TreeNodeQuery {
	query := (&TreeNodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treenode.Table, treenode.FieldID, id),
			sqlgraph.To(treenode.Table, treenode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, treenode.ChildrenTable, treenode.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(tn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TreeNodeClient) Hooks() []Hook {
	return c.hooks.TreeNode
}

// Interceptors returns the client interceptors.
func (c *TreeNodeClient) Interceptors() []Interceptor {
	return c.inters.TreeNode
}

func (c *TreeNodeClient) mutate(ctx context.Context, m *TreeNodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TreeNodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TreeNodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TreeNodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TreeNodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TreeNode mutation op: %q", m.Op())
	}
}

// UserSignedTransactionClient is a client for the UserSignedTransaction schema.
type UserSignedTransactionClient struct {
	config
}

// NewUserSignedTransactionClient returns a client for the UserSignedTransaction from the given config.
func NewUserSignedTransactionClient(c config) *UserSignedTransactionClient {
	return &UserSignedTransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersignedtransaction.Hooks(f(g(h())))`.
func (c *UserSignedTransactionClient) Use(hooks ...Hook) {
	c.hooks.UserSignedTransaction = append(c.hooks.UserSignedTransaction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usersignedtransaction.Intercept(f(g(h())))`.
func (c *UserSignedTransactionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSignedTransaction = append(c.inters.UserSignedTransaction, interceptors...)
}

// Create returns a builder for creating a UserSignedTransaction entity.
func (c *UserSignedTransactionClient) Create() *UserSignedTransactionCreate {
	mutation := newUserSignedTransactionMutation(c.config, OpCreate)
	return &UserSignedTransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSignedTransaction entities.
func (c *UserSignedTransactionClient) CreateBulk(builders ...*UserSignedTransactionCreate) *UserSignedTransactionCreateBulk {
	return &UserSignedTransactionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserSignedTransactionClient) MapCreateBulk(slice any, setFunc func(*UserSignedTransactionCreate, int)) *UserSignedTransactionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserSignedTransactionCreateBulk{err: fmt.Errorf("calling to UserSignedTransactionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserSignedTransactionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserSignedTransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSignedTransaction.
func (c *UserSignedTransactionClient) Update() *UserSignedTransactionUpdate {
	mutation := newUserSignedTransactionMutation(c.config, OpUpdate)
	return &UserSignedTransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSignedTransactionClient) UpdateOne(ust *UserSignedTransaction) *UserSignedTransactionUpdateOne {
	mutation := newUserSignedTransactionMutation(c.config, OpUpdateOne, withUserSignedTransaction(ust))
	return &UserSignedTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSignedTransactionClient) UpdateOneID(id uuid.UUID) *UserSignedTransactionUpdateOne {
	mutation := newUserSignedTransactionMutation(c.config, OpUpdateOne, withUserSignedTransactionID(id))
	return &UserSignedTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSignedTransaction.
func (c *UserSignedTransactionClient) Delete() *UserSignedTransactionDelete {
	mutation := newUserSignedTransactionMutation(c.config, OpDelete)
	return &UserSignedTransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSignedTransactionClient) DeleteOne(ust *UserSignedTransaction) *UserSignedTransactionDeleteOne {
	return c.DeleteOneID(ust.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSignedTransactionClient) DeleteOneID(id uuid.UUID) *UserSignedTransactionDeleteOne {
	builder := c.Delete().Where(usersignedtransaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSignedTransactionDeleteOne{builder}
}

// Query returns a query builder for UserSignedTransaction.
func (c *UserSignedTransactionClient) Query() *UserSignedTransactionQuery {
	return &UserSignedTransactionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSignedTransaction},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSignedTransaction entity by its id.
func (c *UserSignedTransactionClient) Get(ctx context.Context, id uuid.UUID) (*UserSignedTransaction, error) {
	return c.Query().Where(usersignedtransaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSignedTransactionClient) GetX(ctx context.Context, id uuid.UUID) *UserSignedTransaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTreeNode queries the tree_node edge of a UserSignedTransaction.
func (c *UserSignedTransactionClient) QueryTreeNode(ust *UserSignedTransaction) *TreeNodeQuery {
	query := (&TreeNodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ust.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersignedtransaction.Table, usersignedtransaction.FieldID, id),
			sqlgraph.To(treenode.Table, treenode.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usersignedtransaction.TreeNodeTable, usersignedtransaction.TreeNodeColumn),
		)
		fromV = sqlgraph.Neighbors(ust.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPreimageRequest queries the preimage_request edge of a UserSignedTransaction.
func (c *UserSignedTransactionClient) QueryPreimageRequest(ust *UserSignedTransaction) *PreimageRequestQuery {
	query := (&PreimageRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ust.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersignedtransaction.Table, usersignedtransaction.FieldID, id),
			sqlgraph.To(preimagerequest.Table, preimagerequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usersignedtransaction.PreimageRequestTable, usersignedtransaction.PreimageRequestColumn),
		)
		fromV = sqlgraph.Neighbors(ust.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserSignedTransactionClient) Hooks() []Hook {
	return c.hooks.UserSignedTransaction
}

// Interceptors returns the client interceptors.
func (c *UserSignedTransactionClient) Interceptors() []Interceptor {
	return c.inters.UserSignedTransaction
}

func (c *UserSignedTransactionClient) mutate(ctx context.Context, m *UserSignedTransactionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSignedTransactionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSignedTransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSignedTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSignedTransactionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserSignedTransaction mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CooperativeExit, DepositAddress, PreimageRequest, PreimageShare,
		SigningKeyshare, SigningNonce, Transfer, TransferLeaf, Tree, TreeNode,
		UserSignedTransaction []ent.Hook
	}
	inters struct {
		CooperativeExit, DepositAddress, PreimageRequest, PreimageShare,
		SigningKeyshare, SigningNonce, Transfer, TransferLeaf, Tree, TreeNode,
		UserSignedTransaction []ent.Interceptor
	}
)
