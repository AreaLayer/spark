// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/predicate"
	"github.com/lightsparkdev/spark-go/so/ent/tokenissuance"
	"github.com/lightsparkdev/spark-go/so/ent/tokenleaf"
	"github.com/lightsparkdev/spark-go/so/ent/tokentransactionreceipt"
)

// TokenTransactionReceiptQuery is the builder for querying TokenTransactionReceipt entities.
type TokenTransactionReceiptQuery struct {
	config
	ctx             *QueryContext
	order           []tokentransactionreceipt.OrderOption
	inters          []Interceptor
	predicates      []predicate.TokenTransactionReceipt
	withSpentLeaf   *TokenLeafQuery
	withCreatedLeaf *TokenLeafQuery
	withIssuance    *TokenIssuanceQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TokenTransactionReceiptQuery builder.
func (ttrq *TokenTransactionReceiptQuery) Where(ps ...predicate.TokenTransactionReceipt) *TokenTransactionReceiptQuery {
	ttrq.predicates = append(ttrq.predicates, ps...)
	return ttrq
}

// Limit the number of records to be returned by this query.
func (ttrq *TokenTransactionReceiptQuery) Limit(limit int) *TokenTransactionReceiptQuery {
	ttrq.ctx.Limit = &limit
	return ttrq
}

// Offset to start from.
func (ttrq *TokenTransactionReceiptQuery) Offset(offset int) *TokenTransactionReceiptQuery {
	ttrq.ctx.Offset = &offset
	return ttrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ttrq *TokenTransactionReceiptQuery) Unique(unique bool) *TokenTransactionReceiptQuery {
	ttrq.ctx.Unique = &unique
	return ttrq
}

// Order specifies how the records should be ordered.
func (ttrq *TokenTransactionReceiptQuery) Order(o ...tokentransactionreceipt.OrderOption) *TokenTransactionReceiptQuery {
	ttrq.order = append(ttrq.order, o...)
	return ttrq
}

// QuerySpentLeaf chains the current query on the "spent_leaf" edge.
func (ttrq *TokenTransactionReceiptQuery) QuerySpentLeaf() *TokenLeafQuery {
	query := (&TokenLeafClient{config: ttrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tokentransactionreceipt.Table, tokentransactionreceipt.FieldID, selector),
			sqlgraph.To(tokenleaf.Table, tokenleaf.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, tokentransactionreceipt.SpentLeafTable, tokentransactionreceipt.SpentLeafColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedLeaf chains the current query on the "created_leaf" edge.
func (ttrq *TokenTransactionReceiptQuery) QueryCreatedLeaf() *TokenLeafQuery {
	query := (&TokenLeafClient{config: ttrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tokentransactionreceipt.Table, tokentransactionreceipt.FieldID, selector),
			sqlgraph.To(tokenleaf.Table, tokenleaf.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, tokentransactionreceipt.CreatedLeafTable, tokentransactionreceipt.CreatedLeafColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIssuance chains the current query on the "issuance" edge.
func (ttrq *TokenTransactionReceiptQuery) QueryIssuance() *TokenIssuanceQuery {
	query := (&TokenIssuanceClient{config: ttrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tokentransactionreceipt.Table, tokentransactionreceipt.FieldID, selector),
			sqlgraph.To(tokenissuance.Table, tokenissuance.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, tokentransactionreceipt.IssuanceTable, tokentransactionreceipt.IssuanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TokenTransactionReceipt entity from the query.
// Returns a *NotFoundError when no TokenTransactionReceipt was found.
func (ttrq *TokenTransactionReceiptQuery) First(ctx context.Context) (*TokenTransactionReceipt, error) {
	nodes, err := ttrq.Limit(1).All(setContextOp(ctx, ttrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tokentransactionreceipt.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ttrq *TokenTransactionReceiptQuery) FirstX(ctx context.Context) *TokenTransactionReceipt {
	node, err := ttrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TokenTransactionReceipt ID from the query.
// Returns a *NotFoundError when no TokenTransactionReceipt ID was found.
func (ttrq *TokenTransactionReceiptQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ttrq.Limit(1).IDs(setContextOp(ctx, ttrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tokentransactionreceipt.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ttrq *TokenTransactionReceiptQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ttrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TokenTransactionReceipt entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TokenTransactionReceipt entity is found.
// Returns a *NotFoundError when no TokenTransactionReceipt entities are found.
func (ttrq *TokenTransactionReceiptQuery) Only(ctx context.Context) (*TokenTransactionReceipt, error) {
	nodes, err := ttrq.Limit(2).All(setContextOp(ctx, ttrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tokentransactionreceipt.Label}
	default:
		return nil, &NotSingularError{tokentransactionreceipt.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ttrq *TokenTransactionReceiptQuery) OnlyX(ctx context.Context) *TokenTransactionReceipt {
	node, err := ttrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TokenTransactionReceipt ID in the query.
// Returns a *NotSingularError when more than one TokenTransactionReceipt ID is found.
// Returns a *NotFoundError when no entities are found.
func (ttrq *TokenTransactionReceiptQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ttrq.Limit(2).IDs(setContextOp(ctx, ttrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tokentransactionreceipt.Label}
	default:
		err = &NotSingularError{tokentransactionreceipt.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ttrq *TokenTransactionReceiptQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ttrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TokenTransactionReceipts.
func (ttrq *TokenTransactionReceiptQuery) All(ctx context.Context) ([]*TokenTransactionReceipt, error) {
	ctx = setContextOp(ctx, ttrq.ctx, ent.OpQueryAll)
	if err := ttrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TokenTransactionReceipt, *TokenTransactionReceiptQuery]()
	return withInterceptors[[]*TokenTransactionReceipt](ctx, ttrq, qr, ttrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ttrq *TokenTransactionReceiptQuery) AllX(ctx context.Context) []*TokenTransactionReceipt {
	nodes, err := ttrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TokenTransactionReceipt IDs.
func (ttrq *TokenTransactionReceiptQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ttrq.ctx.Unique == nil && ttrq.path != nil {
		ttrq.Unique(true)
	}
	ctx = setContextOp(ctx, ttrq.ctx, ent.OpQueryIDs)
	if err = ttrq.Select(tokentransactionreceipt.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ttrq *TokenTransactionReceiptQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ttrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ttrq *TokenTransactionReceiptQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ttrq.ctx, ent.OpQueryCount)
	if err := ttrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ttrq, querierCount[*TokenTransactionReceiptQuery](), ttrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ttrq *TokenTransactionReceiptQuery) CountX(ctx context.Context) int {
	count, err := ttrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ttrq *TokenTransactionReceiptQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ttrq.ctx, ent.OpQueryExist)
	switch _, err := ttrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ttrq *TokenTransactionReceiptQuery) ExistX(ctx context.Context) bool {
	exist, err := ttrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TokenTransactionReceiptQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ttrq *TokenTransactionReceiptQuery) Clone() *TokenTransactionReceiptQuery {
	if ttrq == nil {
		return nil
	}
	return &TokenTransactionReceiptQuery{
		config:          ttrq.config,
		ctx:             ttrq.ctx.Clone(),
		order:           append([]tokentransactionreceipt.OrderOption{}, ttrq.order...),
		inters:          append([]Interceptor{}, ttrq.inters...),
		predicates:      append([]predicate.TokenTransactionReceipt{}, ttrq.predicates...),
		withSpentLeaf:   ttrq.withSpentLeaf.Clone(),
		withCreatedLeaf: ttrq.withCreatedLeaf.Clone(),
		withIssuance:    ttrq.withIssuance.Clone(),
		// clone intermediate query.
		sql:  ttrq.sql.Clone(),
		path: ttrq.path,
	}
}

// WithSpentLeaf tells the query-builder to eager-load the nodes that are connected to
// the "spent_leaf" edge. The optional arguments are used to configure the query builder of the edge.
func (ttrq *TokenTransactionReceiptQuery) WithSpentLeaf(opts ...func(*TokenLeafQuery)) *TokenTransactionReceiptQuery {
	query := (&TokenLeafClient{config: ttrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttrq.withSpentLeaf = query
	return ttrq
}

// WithCreatedLeaf tells the query-builder to eager-load the nodes that are connected to
// the "created_leaf" edge. The optional arguments are used to configure the query builder of the edge.
func (ttrq *TokenTransactionReceiptQuery) WithCreatedLeaf(opts ...func(*TokenLeafQuery)) *TokenTransactionReceiptQuery {
	query := (&TokenLeafClient{config: ttrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttrq.withCreatedLeaf = query
	return ttrq
}

// WithIssuance tells the query-builder to eager-load the nodes that are connected to
// the "issuance" edge. The optional arguments are used to configure the query builder of the edge.
func (ttrq *TokenTransactionReceiptQuery) WithIssuance(opts ...func(*TokenIssuanceQuery)) *TokenTransactionReceiptQuery {
	query := (&TokenIssuanceClient{config: ttrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttrq.withIssuance = query
	return ttrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TokenTransactionReceipt.Query().
//		GroupBy(tokentransactionreceipt.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ttrq *TokenTransactionReceiptQuery) GroupBy(field string, fields ...string) *TokenTransactionReceiptGroupBy {
	ttrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TokenTransactionReceiptGroupBy{build: ttrq}
	grbuild.flds = &ttrq.ctx.Fields
	grbuild.label = tokentransactionreceipt.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.TokenTransactionReceipt.Query().
//		Select(tokentransactionreceipt.FieldCreateTime).
//		Scan(ctx, &v)
func (ttrq *TokenTransactionReceiptQuery) Select(fields ...string) *TokenTransactionReceiptSelect {
	ttrq.ctx.Fields = append(ttrq.ctx.Fields, fields...)
	sbuild := &TokenTransactionReceiptSelect{TokenTransactionReceiptQuery: ttrq}
	sbuild.label = tokentransactionreceipt.Label
	sbuild.flds, sbuild.scan = &ttrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TokenTransactionReceiptSelect configured with the given aggregations.
func (ttrq *TokenTransactionReceiptQuery) Aggregate(fns ...AggregateFunc) *TokenTransactionReceiptSelect {
	return ttrq.Select().Aggregate(fns...)
}

func (ttrq *TokenTransactionReceiptQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ttrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ttrq); err != nil {
				return err
			}
		}
	}
	for _, f := range ttrq.ctx.Fields {
		if !tokentransactionreceipt.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ttrq.path != nil {
		prev, err := ttrq.path(ctx)
		if err != nil {
			return err
		}
		ttrq.sql = prev
	}
	return nil
}

func (ttrq *TokenTransactionReceiptQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TokenTransactionReceipt, error) {
	var (
		nodes       = []*TokenTransactionReceipt{}
		withFKs     = ttrq.withFKs
		_spec       = ttrq.querySpec()
		loadedTypes = [3]bool{
			ttrq.withSpentLeaf != nil,
			ttrq.withCreatedLeaf != nil,
			ttrq.withIssuance != nil,
		}
	)
	if ttrq.withIssuance != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, tokentransactionreceipt.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TokenTransactionReceipt).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TokenTransactionReceipt{config: ttrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ttrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ttrq.withSpentLeaf; query != nil {
		if err := ttrq.loadSpentLeaf(ctx, query, nodes,
			func(n *TokenTransactionReceipt) { n.Edges.SpentLeaf = []*TokenLeaf{} },
			func(n *TokenTransactionReceipt, e *TokenLeaf) { n.Edges.SpentLeaf = append(n.Edges.SpentLeaf, e) }); err != nil {
			return nil, err
		}
	}
	if query := ttrq.withCreatedLeaf; query != nil {
		if err := ttrq.loadCreatedLeaf(ctx, query, nodes,
			func(n *TokenTransactionReceipt) { n.Edges.CreatedLeaf = []*TokenLeaf{} },
			func(n *TokenTransactionReceipt, e *TokenLeaf) { n.Edges.CreatedLeaf = append(n.Edges.CreatedLeaf, e) }); err != nil {
			return nil, err
		}
	}
	if query := ttrq.withIssuance; query != nil {
		if err := ttrq.loadIssuance(ctx, query, nodes, nil,
			func(n *TokenTransactionReceipt, e *TokenIssuance) { n.Edges.Issuance = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ttrq *TokenTransactionReceiptQuery) loadSpentLeaf(ctx context.Context, query *TokenLeafQuery, nodes []*TokenTransactionReceipt, init func(*TokenTransactionReceipt), assign func(*TokenTransactionReceipt, *TokenLeaf)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*TokenTransactionReceipt)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TokenLeaf(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tokentransactionreceipt.SpentLeafColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.token_leaf_leaf_spent_token_transaction_receipt
		if fk == nil {
			return fmt.Errorf(`foreign-key "token_leaf_leaf_spent_token_transaction_receipt" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "token_leaf_leaf_spent_token_transaction_receipt" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ttrq *TokenTransactionReceiptQuery) loadCreatedLeaf(ctx context.Context, query *TokenLeafQuery, nodes []*TokenTransactionReceipt, init func(*TokenTransactionReceipt), assign func(*TokenTransactionReceipt, *TokenLeaf)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*TokenTransactionReceipt)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TokenLeaf(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tokentransactionreceipt.CreatedLeafColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.token_leaf_leaf_created_token_transaction_receipt
		if fk == nil {
			return fmt.Errorf(`foreign-key "token_leaf_leaf_created_token_transaction_receipt" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "token_leaf_leaf_created_token_transaction_receipt" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ttrq *TokenTransactionReceiptQuery) loadIssuance(ctx context.Context, query *TokenIssuanceQuery, nodes []*TokenTransactionReceipt, init func(*TokenTransactionReceipt), assign func(*TokenTransactionReceipt, *TokenIssuance)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TokenTransactionReceipt)
	for i := range nodes {
		if nodes[i].token_issuance_token_transaction_receipt_issuance == nil {
			continue
		}
		fk := *nodes[i].token_issuance_token_transaction_receipt_issuance
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tokenissuance.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "token_issuance_token_transaction_receipt_issuance" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ttrq *TokenTransactionReceiptQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ttrq.querySpec()
	_spec.Node.Columns = ttrq.ctx.Fields
	if len(ttrq.ctx.Fields) > 0 {
		_spec.Unique = ttrq.ctx.Unique != nil && *ttrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ttrq.driver, _spec)
}

func (ttrq *TokenTransactionReceiptQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tokentransactionreceipt.Table, tokentransactionreceipt.Columns, sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID))
	_spec.From = ttrq.sql
	if unique := ttrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ttrq.path != nil {
		_spec.Unique = true
	}
	if fields := ttrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tokentransactionreceipt.FieldID)
		for i := range fields {
			if fields[i] != tokentransactionreceipt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ttrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ttrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ttrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ttrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ttrq *TokenTransactionReceiptQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ttrq.driver.Dialect())
	t1 := builder.Table(tokentransactionreceipt.Table)
	columns := ttrq.ctx.Fields
	if len(columns) == 0 {
		columns = tokentransactionreceipt.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ttrq.sql != nil {
		selector = ttrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ttrq.ctx.Unique != nil && *ttrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ttrq.predicates {
		p(selector)
	}
	for _, p := range ttrq.order {
		p(selector)
	}
	if offset := ttrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ttrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TokenTransactionReceiptGroupBy is the group-by builder for TokenTransactionReceipt entities.
type TokenTransactionReceiptGroupBy struct {
	selector
	build *TokenTransactionReceiptQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ttrgb *TokenTransactionReceiptGroupBy) Aggregate(fns ...AggregateFunc) *TokenTransactionReceiptGroupBy {
	ttrgb.fns = append(ttrgb.fns, fns...)
	return ttrgb
}

// Scan applies the selector query and scans the result into the given value.
func (ttrgb *TokenTransactionReceiptGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ttrgb.build.ctx, ent.OpQueryGroupBy)
	if err := ttrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TokenTransactionReceiptQuery, *TokenTransactionReceiptGroupBy](ctx, ttrgb.build, ttrgb, ttrgb.build.inters, v)
}

func (ttrgb *TokenTransactionReceiptGroupBy) sqlScan(ctx context.Context, root *TokenTransactionReceiptQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ttrgb.fns))
	for _, fn := range ttrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ttrgb.flds)+len(ttrgb.fns))
		for _, f := range *ttrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ttrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TokenTransactionReceiptSelect is the builder for selecting fields of TokenTransactionReceipt entities.
type TokenTransactionReceiptSelect struct {
	*TokenTransactionReceiptQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ttrs *TokenTransactionReceiptSelect) Aggregate(fns ...AggregateFunc) *TokenTransactionReceiptSelect {
	ttrs.fns = append(ttrs.fns, fns...)
	return ttrs
}

// Scan applies the selector query and scans the result into the given value.
func (ttrs *TokenTransactionReceiptSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ttrs.ctx, ent.OpQuerySelect)
	if err := ttrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TokenTransactionReceiptQuery, *TokenTransactionReceiptSelect](ctx, ttrs.TokenTransactionReceiptQuery, ttrs, ttrs.inters, v)
}

func (ttrs *TokenTransactionReceiptSelect) sqlScan(ctx context.Context, root *TokenTransactionReceiptQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ttrs.fns))
	for _, fn := range ttrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ttrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
