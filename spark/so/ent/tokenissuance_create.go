// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/tokenissuance"
	"github.com/lightsparkdev/spark-go/so/ent/tokentransactionreceipt"
)

// TokenIssuanceCreate is the builder for creating a TokenIssuance entity.
type TokenIssuanceCreate struct {
	config
	mutation *TokenIssuanceMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (tic *TokenIssuanceCreate) SetCreateTime(t time.Time) *TokenIssuanceCreate {
	tic.mutation.SetCreateTime(t)
	return tic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tic *TokenIssuanceCreate) SetNillableCreateTime(t *time.Time) *TokenIssuanceCreate {
	if t != nil {
		tic.SetCreateTime(*t)
	}
	return tic
}

// SetUpdateTime sets the "update_time" field.
func (tic *TokenIssuanceCreate) SetUpdateTime(t time.Time) *TokenIssuanceCreate {
	tic.mutation.SetUpdateTime(t)
	return tic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tic *TokenIssuanceCreate) SetNillableUpdateTime(t *time.Time) *TokenIssuanceCreate {
	if t != nil {
		tic.SetUpdateTime(*t)
	}
	return tic
}

// SetIssuerPublicKey sets the "issuer_public_key" field.
func (tic *TokenIssuanceCreate) SetIssuerPublicKey(b []byte) *TokenIssuanceCreate {
	tic.mutation.SetIssuerPublicKey(b)
	return tic
}

// SetIssuerSignature sets the "issuer_signature" field.
func (tic *TokenIssuanceCreate) SetIssuerSignature(b []byte) *TokenIssuanceCreate {
	tic.mutation.SetIssuerSignature(b)
	return tic
}

// SetID sets the "id" field.
func (tic *TokenIssuanceCreate) SetID(u uuid.UUID) *TokenIssuanceCreate {
	tic.mutation.SetID(u)
	return tic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tic *TokenIssuanceCreate) SetNillableID(u *uuid.UUID) *TokenIssuanceCreate {
	if u != nil {
		tic.SetID(*u)
	}
	return tic
}

// AddTokenTransactionReceiptIDs adds the "token_transaction_receipt" edge to the TokenTransactionReceipt entity by IDs.
func (tic *TokenIssuanceCreate) AddTokenTransactionReceiptIDs(ids ...uuid.UUID) *TokenIssuanceCreate {
	tic.mutation.AddTokenTransactionReceiptIDs(ids...)
	return tic
}

// AddTokenTransactionReceipt adds the "token_transaction_receipt" edges to the TokenTransactionReceipt entity.
func (tic *TokenIssuanceCreate) AddTokenTransactionReceipt(t ...*TokenTransactionReceipt) *TokenIssuanceCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tic.AddTokenTransactionReceiptIDs(ids...)
}

// Mutation returns the TokenIssuanceMutation object of the builder.
func (tic *TokenIssuanceCreate) Mutation() *TokenIssuanceMutation {
	return tic.mutation
}

// Save creates the TokenIssuance in the database.
func (tic *TokenIssuanceCreate) Save(ctx context.Context) (*TokenIssuance, error) {
	tic.defaults()
	return withHooks(ctx, tic.sqlSave, tic.mutation, tic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tic *TokenIssuanceCreate) SaveX(ctx context.Context) *TokenIssuance {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tic *TokenIssuanceCreate) Exec(ctx context.Context) error {
	_, err := tic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tic *TokenIssuanceCreate) ExecX(ctx context.Context) {
	if err := tic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tic *TokenIssuanceCreate) defaults() {
	if _, ok := tic.mutation.CreateTime(); !ok {
		v := tokenissuance.DefaultCreateTime()
		tic.mutation.SetCreateTime(v)
	}
	if _, ok := tic.mutation.UpdateTime(); !ok {
		v := tokenissuance.DefaultUpdateTime()
		tic.mutation.SetUpdateTime(v)
	}
	if _, ok := tic.mutation.ID(); !ok {
		v := tokenissuance.DefaultID()
		tic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tic *TokenIssuanceCreate) check() error {
	if _, ok := tic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TokenIssuance.create_time"`)}
	}
	if _, ok := tic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TokenIssuance.update_time"`)}
	}
	if _, ok := tic.mutation.IssuerPublicKey(); !ok {
		return &ValidationError{Name: "issuer_public_key", err: errors.New(`ent: missing required field "TokenIssuance.issuer_public_key"`)}
	}
	if v, ok := tic.mutation.IssuerPublicKey(); ok {
		if err := tokenissuance.IssuerPublicKeyValidator(v); err != nil {
			return &ValidationError{Name: "issuer_public_key", err: fmt.Errorf(`ent: validator failed for field "TokenIssuance.issuer_public_key": %w`, err)}
		}
	}
	if _, ok := tic.mutation.IssuerSignature(); !ok {
		return &ValidationError{Name: "issuer_signature", err: errors.New(`ent: missing required field "TokenIssuance.issuer_signature"`)}
	}
	if v, ok := tic.mutation.IssuerSignature(); ok {
		if err := tokenissuance.IssuerSignatureValidator(v); err != nil {
			return &ValidationError{Name: "issuer_signature", err: fmt.Errorf(`ent: validator failed for field "TokenIssuance.issuer_signature": %w`, err)}
		}
	}
	return nil
}

func (tic *TokenIssuanceCreate) sqlSave(ctx context.Context) (*TokenIssuance, error) {
	if err := tic.check(); err != nil {
		return nil, err
	}
	_node, _spec := tic.createSpec()
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tic.mutation.id = &_node.ID
	tic.mutation.done = true
	return _node, nil
}

func (tic *TokenIssuanceCreate) createSpec() (*TokenIssuance, *sqlgraph.CreateSpec) {
	var (
		_node = &TokenIssuance{config: tic.config}
		_spec = sqlgraph.NewCreateSpec(tokenissuance.Table, sqlgraph.NewFieldSpec(tokenissuance.FieldID, field.TypeUUID))
	)
	if id, ok := tic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tic.mutation.CreateTime(); ok {
		_spec.SetField(tokenissuance.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tic.mutation.UpdateTime(); ok {
		_spec.SetField(tokenissuance.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tic.mutation.IssuerPublicKey(); ok {
		_spec.SetField(tokenissuance.FieldIssuerPublicKey, field.TypeBytes, value)
		_node.IssuerPublicKey = value
	}
	if value, ok := tic.mutation.IssuerSignature(); ok {
		_spec.SetField(tokenissuance.FieldIssuerSignature, field.TypeBytes, value)
		_node.IssuerSignature = value
	}
	if nodes := tic.mutation.TokenTransactionReceiptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tokenissuance.TokenTransactionReceiptTable,
			Columns: []string{tokenissuance.TokenTransactionReceiptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tokentransactionreceipt.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TokenIssuanceCreateBulk is the builder for creating many TokenIssuance entities in bulk.
type TokenIssuanceCreateBulk struct {
	config
	err      error
	builders []*TokenIssuanceCreate
}

// Save creates the TokenIssuance entities in the database.
func (ticb *TokenIssuanceCreateBulk) Save(ctx context.Context) ([]*TokenIssuance, error) {
	if ticb.err != nil {
		return nil, ticb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ticb.builders))
	nodes := make([]*TokenIssuance, len(ticb.builders))
	mutators := make([]Mutator, len(ticb.builders))
	for i := range ticb.builders {
		func(i int, root context.Context) {
			builder := ticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TokenIssuanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ticb *TokenIssuanceCreateBulk) SaveX(ctx context.Context) []*TokenIssuance {
	v, err := ticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ticb *TokenIssuanceCreateBulk) Exec(ctx context.Context) error {
	_, err := ticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ticb *TokenIssuanceCreateBulk) ExecX(ctx context.Context) {
	if err := ticb.Exec(ctx); err != nil {
		panic(err)
	}
}
