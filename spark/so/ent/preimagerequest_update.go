// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lightsparkdev/spark-go/so/ent/predicate"
	"github.com/lightsparkdev/spark-go/so/ent/preimagerequest"
	"github.com/lightsparkdev/spark-go/so/ent/preimageshare"
	"github.com/lightsparkdev/spark-go/so/ent/usersignedtransaction"
)

// PreimageRequestUpdate is the builder for updating PreimageRequest entities.
type PreimageRequestUpdate struct {
	config
	hooks    []Hook
	mutation *PreimageRequestMutation
}

// Where appends a list predicates to the PreimageRequestUpdate builder.
func (pru *PreimageRequestUpdate) Where(ps ...predicate.PreimageRequest) *PreimageRequestUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetUpdateTime sets the "update_time" field.
func (pru *PreimageRequestUpdate) SetUpdateTime(t time.Time) *PreimageRequestUpdate {
	pru.mutation.SetUpdateTime(t)
	return pru
}

// AddTransactionIDs adds the "transactions" edge to the UserSignedTransaction entity by IDs.
func (pru *PreimageRequestUpdate) AddTransactionIDs(ids ...uuid.UUID) *PreimageRequestUpdate {
	pru.mutation.AddTransactionIDs(ids...)
	return pru
}

// AddTransactions adds the "transactions" edges to the UserSignedTransaction entity.
func (pru *PreimageRequestUpdate) AddTransactions(u ...*UserSignedTransaction) *PreimageRequestUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pru.AddTransactionIDs(ids...)
}

// SetPreimageSharesID sets the "preimage_shares" edge to the PreimageShare entity by ID.
func (pru *PreimageRequestUpdate) SetPreimageSharesID(id uuid.UUID) *PreimageRequestUpdate {
	pru.mutation.SetPreimageSharesID(id)
	return pru
}

// SetNillablePreimageSharesID sets the "preimage_shares" edge to the PreimageShare entity by ID if the given value is not nil.
func (pru *PreimageRequestUpdate) SetNillablePreimageSharesID(id *uuid.UUID) *PreimageRequestUpdate {
	if id != nil {
		pru = pru.SetPreimageSharesID(*id)
	}
	return pru
}

// SetPreimageShares sets the "preimage_shares" edge to the PreimageShare entity.
func (pru *PreimageRequestUpdate) SetPreimageShares(p *PreimageShare) *PreimageRequestUpdate {
	return pru.SetPreimageSharesID(p.ID)
}

// Mutation returns the PreimageRequestMutation object of the builder.
func (pru *PreimageRequestUpdate) Mutation() *PreimageRequestMutation {
	return pru.mutation
}

// ClearTransactions clears all "transactions" edges to the UserSignedTransaction entity.
func (pru *PreimageRequestUpdate) ClearTransactions() *PreimageRequestUpdate {
	pru.mutation.ClearTransactions()
	return pru
}

// RemoveTransactionIDs removes the "transactions" edge to UserSignedTransaction entities by IDs.
func (pru *PreimageRequestUpdate) RemoveTransactionIDs(ids ...uuid.UUID) *PreimageRequestUpdate {
	pru.mutation.RemoveTransactionIDs(ids...)
	return pru
}

// RemoveTransactions removes "transactions" edges to UserSignedTransaction entities.
func (pru *PreimageRequestUpdate) RemoveTransactions(u ...*UserSignedTransaction) *PreimageRequestUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pru.RemoveTransactionIDs(ids...)
}

// ClearPreimageShares clears the "preimage_shares" edge to the PreimageShare entity.
func (pru *PreimageRequestUpdate) ClearPreimageShares() *PreimageRequestUpdate {
	pru.mutation.ClearPreimageShares()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PreimageRequestUpdate) Save(ctx context.Context) (int, error) {
	pru.defaults()
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PreimageRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PreimageRequestUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PreimageRequestUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pru *PreimageRequestUpdate) defaults() {
	if _, ok := pru.mutation.UpdateTime(); !ok {
		v := preimagerequest.UpdateDefaultUpdateTime()
		pru.mutation.SetUpdateTime(v)
	}
}

func (pru *PreimageRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(preimagerequest.Table, preimagerequest.Columns, sqlgraph.NewFieldSpec(preimagerequest.FieldID, field.TypeUUID))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.UpdateTime(); ok {
		_spec.SetField(preimagerequest.FieldUpdateTime, field.TypeTime, value)
	}
	if pru.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   preimagerequest.TransactionsTable,
			Columns: []string{preimagerequest.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersignedtransaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !pru.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   preimagerequest.TransactionsTable,
			Columns: []string{preimagerequest.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersignedtransaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   preimagerequest.TransactionsTable,
			Columns: []string{preimagerequest.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersignedtransaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.PreimageSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   preimagerequest.PreimageSharesTable,
			Columns: []string{preimagerequest.PreimageSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preimageshare.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.PreimageSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   preimagerequest.PreimageSharesTable,
			Columns: []string{preimagerequest.PreimageSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preimageshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{preimagerequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PreimageRequestUpdateOne is the builder for updating a single PreimageRequest entity.
type PreimageRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PreimageRequestMutation
}

// SetUpdateTime sets the "update_time" field.
func (pruo *PreimageRequestUpdateOne) SetUpdateTime(t time.Time) *PreimageRequestUpdateOne {
	pruo.mutation.SetUpdateTime(t)
	return pruo
}

// AddTransactionIDs adds the "transactions" edge to the UserSignedTransaction entity by IDs.
func (pruo *PreimageRequestUpdateOne) AddTransactionIDs(ids ...uuid.UUID) *PreimageRequestUpdateOne {
	pruo.mutation.AddTransactionIDs(ids...)
	return pruo
}

// AddTransactions adds the "transactions" edges to the UserSignedTransaction entity.
func (pruo *PreimageRequestUpdateOne) AddTransactions(u ...*UserSignedTransaction) *PreimageRequestUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pruo.AddTransactionIDs(ids...)
}

// SetPreimageSharesID sets the "preimage_shares" edge to the PreimageShare entity by ID.
func (pruo *PreimageRequestUpdateOne) SetPreimageSharesID(id uuid.UUID) *PreimageRequestUpdateOne {
	pruo.mutation.SetPreimageSharesID(id)
	return pruo
}

// SetNillablePreimageSharesID sets the "preimage_shares" edge to the PreimageShare entity by ID if the given value is not nil.
func (pruo *PreimageRequestUpdateOne) SetNillablePreimageSharesID(id *uuid.UUID) *PreimageRequestUpdateOne {
	if id != nil {
		pruo = pruo.SetPreimageSharesID(*id)
	}
	return pruo
}

// SetPreimageShares sets the "preimage_shares" edge to the PreimageShare entity.
func (pruo *PreimageRequestUpdateOne) SetPreimageShares(p *PreimageShare) *PreimageRequestUpdateOne {
	return pruo.SetPreimageSharesID(p.ID)
}

// Mutation returns the PreimageRequestMutation object of the builder.
func (pruo *PreimageRequestUpdateOne) Mutation() *PreimageRequestMutation {
	return pruo.mutation
}

// ClearTransactions clears all "transactions" edges to the UserSignedTransaction entity.
func (pruo *PreimageRequestUpdateOne) ClearTransactions() *PreimageRequestUpdateOne {
	pruo.mutation.ClearTransactions()
	return pruo
}

// RemoveTransactionIDs removes the "transactions" edge to UserSignedTransaction entities by IDs.
func (pruo *PreimageRequestUpdateOne) RemoveTransactionIDs(ids ...uuid.UUID) *PreimageRequestUpdateOne {
	pruo.mutation.RemoveTransactionIDs(ids...)
	return pruo
}

// RemoveTransactions removes "transactions" edges to UserSignedTransaction entities.
func (pruo *PreimageRequestUpdateOne) RemoveTransactions(u ...*UserSignedTransaction) *PreimageRequestUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pruo.RemoveTransactionIDs(ids...)
}

// ClearPreimageShares clears the "preimage_shares" edge to the PreimageShare entity.
func (pruo *PreimageRequestUpdateOne) ClearPreimageShares() *PreimageRequestUpdateOne {
	pruo.mutation.ClearPreimageShares()
	return pruo
}

// Where appends a list predicates to the PreimageRequestUpdate builder.
func (pruo *PreimageRequestUpdateOne) Where(ps ...predicate.PreimageRequest) *PreimageRequestUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PreimageRequestUpdateOne) Select(field string, fields ...string) *PreimageRequestUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PreimageRequest entity.
func (pruo *PreimageRequestUpdateOne) Save(ctx context.Context) (*PreimageRequest, error) {
	pruo.defaults()
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PreimageRequestUpdateOne) SaveX(ctx context.Context) *PreimageRequest {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PreimageRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PreimageRequestUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pruo *PreimageRequestUpdateOne) defaults() {
	if _, ok := pruo.mutation.UpdateTime(); !ok {
		v := preimagerequest.UpdateDefaultUpdateTime()
		pruo.mutation.SetUpdateTime(v)
	}
}

func (pruo *PreimageRequestUpdateOne) sqlSave(ctx context.Context) (_node *PreimageRequest, err error) {
	_spec := sqlgraph.NewUpdateSpec(preimagerequest.Table, preimagerequest.Columns, sqlgraph.NewFieldSpec(preimagerequest.FieldID, field.TypeUUID))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PreimageRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, preimagerequest.FieldID)
		for _, f := range fields {
			if !preimagerequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != preimagerequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.UpdateTime(); ok {
		_spec.SetField(preimagerequest.FieldUpdateTime, field.TypeTime, value)
	}
	if pruo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   preimagerequest.TransactionsTable,
			Columns: []string{preimagerequest.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersignedtransaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !pruo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   preimagerequest.TransactionsTable,
			Columns: []string{preimagerequest.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersignedtransaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   preimagerequest.TransactionsTable,
			Columns: []string{preimagerequest.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersignedtransaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.PreimageSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   preimagerequest.PreimageSharesTable,
			Columns: []string{preimagerequest.PreimageSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preimageshare.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.PreimageSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   preimagerequest.PreimageSharesTable,
			Columns: []string{preimagerequest.PreimageSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(preimageshare.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PreimageRequest{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{preimagerequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
