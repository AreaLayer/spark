// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.3
// source: dkg.proto

package dkg

import (
	common "github.com/lightsparkdev/spark-go/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Initiate Distributed Key Generation Request
type InitiateDkgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An uuid to identify the request.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The number of keys to generate.
	KeyCount uint64 `protobuf:"varint,2,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
	// The minimum number of signers, this is the threshold for the threshold signature scheme.
	MinSigners uint64 `protobuf:"varint,3,opt,name=min_signers,json=minSigners,proto3" json:"min_signers,omitempty"`
	// The maximum number of signers, this is the size of the threshold signature scheme.
	MaxSigners uint64 `protobuf:"varint,4,opt,name=max_signers,json=maxSigners,proto3" json:"max_signers,omitempty"`
	// The coordinator index.
	CoordinatorIndex uint64 `protobuf:"varint,5,opt,name=coordinator_index,json=coordinatorIndex,proto3" json:"coordinator_index,omitempty"`
}

func (x *InitiateDkgRequest) Reset() {
	*x = InitiateDkgRequest{}
	mi := &file_dkg_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateDkgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateDkgRequest) ProtoMessage() {}

func (x *InitiateDkgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dkg_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateDkgRequest.ProtoReflect.Descriptor instead.
func (*InitiateDkgRequest) Descriptor() ([]byte, []int) {
	return file_dkg_proto_rawDescGZIP(), []int{0}
}

func (x *InitiateDkgRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *InitiateDkgRequest) GetKeyCount() uint64 {
	if x != nil {
		return x.KeyCount
	}
	return 0
}

func (x *InitiateDkgRequest) GetMinSigners() uint64 {
	if x != nil {
		return x.MinSigners
	}
	return 0
}

func (x *InitiateDkgRequest) GetMaxSigners() uint64 {
	if x != nil {
		return x.MaxSigners
	}
	return 0
}

func (x *InitiateDkgRequest) GetCoordinatorIndex() uint64 {
	if x != nil {
		return x.CoordinatorIndex
	}
	return 0
}

// Initiate Distributed Key Generation Response
type InitiateDkgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the participant.
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The round1 package for the participant.
	Round1Package [][]byte `protobuf:"bytes,2,rep,name=round1_package,json=round1Package,proto3" json:"round1_package,omitempty"`
}

func (x *InitiateDkgResponse) Reset() {
	*x = InitiateDkgResponse{}
	mi := &file_dkg_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateDkgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateDkgResponse) ProtoMessage() {}

func (x *InitiateDkgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dkg_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateDkgResponse.ProtoReflect.Descriptor instead.
func (*InitiateDkgResponse) Descriptor() ([]byte, []int) {
	return file_dkg_proto_rawDescGZIP(), []int{1}
}

func (x *InitiateDkgResponse) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *InitiateDkgResponse) GetRound1Package() [][]byte {
	if x != nil {
		return x.Round1Package
	}
	return nil
}

type Round1PackagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An uuid to identify the request.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The round1 packages from the participants.
	Round1Packages []*common.PackageMap `protobuf:"bytes,2,rep,name=round1_packages,json=round1Packages,proto3" json:"round1_packages,omitempty"`
}

func (x *Round1PackagesRequest) Reset() {
	*x = Round1PackagesRequest{}
	mi := &file_dkg_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Round1PackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round1PackagesRequest) ProtoMessage() {}

func (x *Round1PackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dkg_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round1PackagesRequest.ProtoReflect.Descriptor instead.
func (*Round1PackagesRequest) Descriptor() ([]byte, []int) {
	return file_dkg_proto_rawDescGZIP(), []int{2}
}

func (x *Round1PackagesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Round1PackagesRequest) GetRound1Packages() []*common.PackageMap {
	if x != nil {
		return x.Round1Packages
	}
	return nil
}

type Round1PackagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the participant.
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The round1 package signature from the participant.
	Round1Signature []byte `protobuf:"bytes,2,opt,name=round1_signature,json=round1Signature,proto3" json:"round1_signature,omitempty"`
}

func (x *Round1PackagesResponse) Reset() {
	*x = Round1PackagesResponse{}
	mi := &file_dkg_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Round1PackagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round1PackagesResponse) ProtoMessage() {}

func (x *Round1PackagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dkg_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round1PackagesResponse.ProtoReflect.Descriptor instead.
func (*Round1PackagesResponse) Descriptor() ([]byte, []int) {
	return file_dkg_proto_rawDescGZIP(), []int{3}
}

func (x *Round1PackagesResponse) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Round1PackagesResponse) GetRound1Signature() []byte {
	if x != nil {
		return x.Round1Signature
	}
	return nil
}

type Round1SignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An uuid to identify the request.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The round1 package signatures from the participants.
	Round1Signatures map[string][]byte `protobuf:"bytes,2,rep,name=round1_signatures,json=round1Signatures,proto3" json:"round1_signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Round1SignatureRequest) Reset() {
	*x = Round1SignatureRequest{}
	mi := &file_dkg_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Round1SignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round1SignatureRequest) ProtoMessage() {}

func (x *Round1SignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dkg_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round1SignatureRequest.ProtoReflect.Descriptor instead.
func (*Round1SignatureRequest) Descriptor() ([]byte, []int) {
	return file_dkg_proto_rawDescGZIP(), []int{4}
}

func (x *Round1SignatureRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Round1SignatureRequest) GetRound1Signatures() map[string][]byte {
	if x != nil {
		return x.Round1Signatures
	}
	return nil
}

type Round1SignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the participant.
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The identifiers of the participants that failed the validation of the round1 package
	// signatures.
	ValidationFailures []string `protobuf:"bytes,2,rep,name=validation_failures,json=validationFailures,proto3" json:"validation_failures,omitempty"`
}

func (x *Round1SignatureResponse) Reset() {
	*x = Round1SignatureResponse{}
	mi := &file_dkg_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Round1SignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round1SignatureResponse) ProtoMessage() {}

func (x *Round1SignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dkg_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round1SignatureResponse.ProtoReflect.Descriptor instead.
func (*Round1SignatureResponse) Descriptor() ([]byte, []int) {
	return file_dkg_proto_rawDescGZIP(), []int{5}
}

func (x *Round1SignatureResponse) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Round1SignatureResponse) GetValidationFailures() []string {
	if x != nil {
		return x.ValidationFailures
	}
	return nil
}

type Round2PackagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An uuid to identify the request.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The identifier of the participant.
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The round2 packages from the participant.
	Round2Packages [][]byte `protobuf:"bytes,3,rep,name=round2_packages,json=round2Packages,proto3" json:"round2_packages,omitempty"`
	// The signature on the hash of the round2 packages by the participant.
	Round2Signature []byte `protobuf:"bytes,4,opt,name=round2_signature,json=round2Signature,proto3" json:"round2_signature,omitempty"`
}

func (x *Round2PackagesRequest) Reset() {
	*x = Round2PackagesRequest{}
	mi := &file_dkg_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Round2PackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round2PackagesRequest) ProtoMessage() {}

func (x *Round2PackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dkg_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round2PackagesRequest.ProtoReflect.Descriptor instead.
func (*Round2PackagesRequest) Descriptor() ([]byte, []int) {
	return file_dkg_proto_rawDescGZIP(), []int{6}
}

func (x *Round2PackagesRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Round2PackagesRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Round2PackagesRequest) GetRound2Packages() [][]byte {
	if x != nil {
		return x.Round2Packages
	}
	return nil
}

func (x *Round2PackagesRequest) GetRound2Signature() []byte {
	if x != nil {
		return x.Round2Signature
	}
	return nil
}

// Acknowledge the round2 packages from the participant.
type Round2PackagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Round2PackagesResponse) Reset() {
	*x = Round2PackagesResponse{}
	mi := &file_dkg_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Round2PackagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Round2PackagesResponse) ProtoMessage() {}

func (x *Round2PackagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dkg_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Round2PackagesResponse.ProtoReflect.Descriptor instead.
func (*Round2PackagesResponse) Descriptor() ([]byte, []int) {
	return file_dkg_proto_rawDescGZIP(), []int{7}
}

type StartDkgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of participants in the signing group.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *StartDkgRequest) Reset() {
	*x = StartDkgRequest{}
	mi := &file_dkg_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartDkgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDkgRequest) ProtoMessage() {}

func (x *StartDkgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dkg_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDkgRequest.ProtoReflect.Descriptor instead.
func (*StartDkgRequest) Descriptor() ([]byte, []int) {
	return file_dkg_proto_rawDescGZIP(), []int{8}
}

func (x *StartDkgRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_dkg_proto protoreflect.FileDescriptor

var file_dkg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x64, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x64, 0x6b, 0x67,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x01, 0x0a, 0x12,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x44, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5c, 0x0a,
	0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x44, 0x6b, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x31, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x15, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x31, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70,
	0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x63, 0x0a, 0x16, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x31, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x16, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x5e, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x6b, 0x67,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x31, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a,
	0x43, 0x0a, 0x15, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x17, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xaa, 0x01, 0x0a, 0x15, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x32, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x32, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x18, 0x0a,
	0x16, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x32, 0xfb, 0x02, 0x0a, 0x0a, 0x44, 0x4b, 0x47, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x6b, 0x67, 0x12, 0x14, 0x2e, 0x64,
	0x6b, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x6b, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6b, 0x67, 0x12, 0x17, 0x2e, 0x64,
	0x6b, 0x67, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x44, 0x6b, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x44, 0x6b, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x31, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x64, 0x6b, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6b, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dkg_proto_rawDescOnce sync.Once
	file_dkg_proto_rawDescData = file_dkg_proto_rawDesc
)

func file_dkg_proto_rawDescGZIP() []byte {
	file_dkg_proto_rawDescOnce.Do(func() {
		file_dkg_proto_rawDescData = protoimpl.X.CompressGZIP(file_dkg_proto_rawDescData)
	})
	return file_dkg_proto_rawDescData
}

var file_dkg_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_dkg_proto_goTypes = []any{
	(*InitiateDkgRequest)(nil),      // 0: dkg.InitiateDkgRequest
	(*InitiateDkgResponse)(nil),     // 1: dkg.InitiateDkgResponse
	(*Round1PackagesRequest)(nil),   // 2: dkg.Round1PackagesRequest
	(*Round1PackagesResponse)(nil),  // 3: dkg.Round1PackagesResponse
	(*Round1SignatureRequest)(nil),  // 4: dkg.Round1SignatureRequest
	(*Round1SignatureResponse)(nil), // 5: dkg.Round1SignatureResponse
	(*Round2PackagesRequest)(nil),   // 6: dkg.Round2PackagesRequest
	(*Round2PackagesResponse)(nil),  // 7: dkg.Round2PackagesResponse
	(*StartDkgRequest)(nil),         // 8: dkg.StartDkgRequest
	nil,                             // 9: dkg.Round1SignatureRequest.Round1SignaturesEntry
	(*common.PackageMap)(nil),       // 10: common.PackageMap
	(*emptypb.Empty)(nil),           // 11: google.protobuf.Empty
}
var file_dkg_proto_depIdxs = []int32{
	10, // 0: dkg.Round1PackagesRequest.round1_packages:type_name -> common.PackageMap
	9,  // 1: dkg.Round1SignatureRequest.round1_signatures:type_name -> dkg.Round1SignatureRequest.Round1SignaturesEntry
	8,  // 2: dkg.DKGService.start_dkg:input_type -> dkg.StartDkgRequest
	0,  // 3: dkg.DKGService.initiate_dkg:input_type -> dkg.InitiateDkgRequest
	2,  // 4: dkg.DKGService.round1_packages:input_type -> dkg.Round1PackagesRequest
	4,  // 5: dkg.DKGService.round1_signature:input_type -> dkg.Round1SignatureRequest
	6,  // 6: dkg.DKGService.round2_packages:input_type -> dkg.Round2PackagesRequest
	11, // 7: dkg.DKGService.start_dkg:output_type -> google.protobuf.Empty
	1,  // 8: dkg.DKGService.initiate_dkg:output_type -> dkg.InitiateDkgResponse
	3,  // 9: dkg.DKGService.round1_packages:output_type -> dkg.Round1PackagesResponse
	5,  // 10: dkg.DKGService.round1_signature:output_type -> dkg.Round1SignatureResponse
	7,  // 11: dkg.DKGService.round2_packages:output_type -> dkg.Round2PackagesResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_dkg_proto_init() }
func file_dkg_proto_init() {
	if File_dkg_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dkg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dkg_proto_goTypes,
		DependencyIndexes: file_dkg_proto_depIdxs,
		MessageInfos:      file_dkg_proto_msgTypes,
	}.Build()
	File_dkg_proto = out.File
	file_dkg_proto_rawDesc = nil
	file_dkg_proto_goTypes = nil
	file_dkg_proto_depIdxs = nil
}
