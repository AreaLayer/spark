// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: frost.proto

package frost

import (
	common "github.com/lightsparkdev/spark-go/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The role of the participant in the signing.
type SigningRole int32

const (
	SigningRole_STATECHAIN SigningRole = 0
	SigningRole_USER       SigningRole = 1
)

// Enum value maps for SigningRole.
var (
	SigningRole_name = map[int32]string{
		0: "STATECHAIN",
		1: "USER",
	}
	SigningRole_value = map[string]int32{
		"STATECHAIN": 0,
		"USER":       1,
	}
)

func (x SigningRole) Enum() *SigningRole {
	p := new(SigningRole)
	*p = x
	return p
}

func (x SigningRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SigningRole) Descriptor() protoreflect.EnumDescriptor {
	return file_frost_proto_enumTypes[0].Descriptor()
}

func (SigningRole) Type() protoreflect.EnumType {
	return &file_frost_proto_enumTypes[0]
}

func (x SigningRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SigningRole.Descriptor instead.
func (SigningRole) EnumDescriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{0}
}

type EchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	mi := &file_frost_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{0}
}

func (x *EchoRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EchoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EchoResponse) Reset() {
	*x = EchoResponse{}
	mi := &file_frost_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResponse) ProtoMessage() {}

func (x *EchoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResponse.ProtoReflect.Descriptor instead.
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{1}
}

func (x *EchoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Distributed Key Generation Round 1 Request
//
// This request is sent to the server to start the Distributed Key Generation
// protocol. This will be a batch request, so the server will generate the
// keys for all participants in the batch.
type DkgRound1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An uuid to identify the request.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Identifier of the participant, this will be used as the index of the Shamir secret share. The
	// value should be not be 0. This is a 32-byte hex string.
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The maximum number of signers, this is the size of the threshold signature scheme.
	MaxSigners uint64 `protobuf:"varint,3,opt,name=max_signers,json=maxSigners,proto3" json:"max_signers,omitempty"`
	// The minimum number of signers, this is the threshold for the threshold signature scheme.
	MinSigners uint64 `protobuf:"varint,4,opt,name=min_signers,json=minSigners,proto3" json:"min_signers,omitempty"`
	// The number of keys to generate.
	KeyCount uint64 `protobuf:"varint,5,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
}

func (x *DkgRound1Request) Reset() {
	*x = DkgRound1Request{}
	mi := &file_frost_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound1Request) ProtoMessage() {}

func (x *DkgRound1Request) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound1Request.ProtoReflect.Descriptor instead.
func (*DkgRound1Request) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{2}
}

func (x *DkgRound1Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DkgRound1Request) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *DkgRound1Request) GetMaxSigners() uint64 {
	if x != nil {
		return x.MaxSigners
	}
	return 0
}

func (x *DkgRound1Request) GetMinSigners() uint64 {
	if x != nil {
		return x.MinSigners
	}
	return 0
}

func (x *DkgRound1Request) GetKeyCount() uint64 {
	if x != nil {
		return x.KeyCount
	}
	return 0
}

// Distributed Key Generation Round 1 Response
//
// This response is sent from the server to the client after the Distributed Key Generation
// protocol has been completed.
type DkgRound1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The packages for the participants. This will be sent to all participants and will be used for
	// the next round.
	Round1Packages [][]byte `protobuf:"bytes,1,rep,name=round1_packages,json=round1Packages,proto3" json:"round1_packages,omitempty"`
}

func (x *DkgRound1Response) Reset() {
	*x = DkgRound1Response{}
	mi := &file_frost_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound1Response) ProtoMessage() {}

func (x *DkgRound1Response) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound1Response.ProtoReflect.Descriptor instead.
func (*DkgRound1Response) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{3}
}

func (x *DkgRound1Response) GetRound1Packages() [][]byte {
	if x != nil {
		return x.Round1Packages
	}
	return nil
}

// Distributed Key Generation Round 2 Request
//
// This request is sent to the server for the round 2 of DKG protocol.
// This will be a batch request.
type DkgRound2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An uuid to identify the request.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// A map of all participants' identifiers to their serialized round1 packages.
	Round1PackagesMaps []*common.PackageMap `protobuf:"bytes,2,rep,name=round1_packages_maps,json=round1PackagesMaps,proto3" json:"round1_packages_maps,omitempty"`
}

func (x *DkgRound2Request) Reset() {
	*x = DkgRound2Request{}
	mi := &file_frost_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound2Request) ProtoMessage() {}

func (x *DkgRound2Request) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound2Request.ProtoReflect.Descriptor instead.
func (*DkgRound2Request) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{4}
}

func (x *DkgRound2Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DkgRound2Request) GetRound1PackagesMaps() []*common.PackageMap {
	if x != nil {
		return x.Round1PackagesMaps
	}
	return nil
}

// Distributed Key Generation Round 2 Response
//
// This response is sent from the server to the client after the Distributed Key Generation
// protocol has been completed.
type DkgRound2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The serialized round2 packages.
	Round2Packages []*common.PackageMap `protobuf:"bytes,1,rep,name=round2_packages,json=round2Packages,proto3" json:"round2_packages,omitempty"`
}

func (x *DkgRound2Response) Reset() {
	*x = DkgRound2Response{}
	mi := &file_frost_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound2Response) ProtoMessage() {}

func (x *DkgRound2Response) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound2Response.ProtoReflect.Descriptor instead.
func (*DkgRound2Response) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{5}
}

func (x *DkgRound2Response) GetRound2Packages() []*common.PackageMap {
	if x != nil {
		return x.Round2Packages
	}
	return nil
}

// Distributed Key Generation Round 3 Request
//
// This request is sent to the server for the round 3 of DKG protocol.
type DkgRound3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An uuid to identify the request.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// A map of all participants' identifiers to their serialized round1 packages.
	Round1PackagesMaps []*common.PackageMap `protobuf:"bytes,2,rep,name=round1_packages_maps,json=round1PackagesMaps,proto3" json:"round1_packages_maps,omitempty"`
	// A map of all participants' identifiers to their serialized round2 packages.
	Round2PackagesMaps []*common.PackageMap `protobuf:"bytes,3,rep,name=round2_packages_maps,json=round2PackagesMaps,proto3" json:"round2_packages_maps,omitempty"`
}

func (x *DkgRound3Request) Reset() {
	*x = DkgRound3Request{}
	mi := &file_frost_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound3Request) ProtoMessage() {}

func (x *DkgRound3Request) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound3Request.ProtoReflect.Descriptor instead.
func (*DkgRound3Request) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{6}
}

func (x *DkgRound3Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DkgRound3Request) GetRound1PackagesMaps() []*common.PackageMap {
	if x != nil {
		return x.Round1PackagesMaps
	}
	return nil
}

func (x *DkgRound3Request) GetRound2PackagesMaps() []*common.PackageMap {
	if x != nil {
		return x.Round2PackagesMaps
	}
	return nil
}

// A key package for frost signing.
type KeyPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the participant.
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The secret share for the participant.
	SecretShare []byte `protobuf:"bytes,2,opt,name=secret_share,json=secretShare,proto3" json:"secret_share,omitempty"`
	// The public shares for each participant.
	PublicShares map[string][]byte `protobuf:"bytes,3,rep,name=public_shares,json=publicShares,proto3" json:"public_shares,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The public key for the group.
	PublicKey []byte `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The minimum number of signers for the threshold signature scheme.
	MinSigners uint32 `protobuf:"varint,5,opt,name=min_signers,json=minSigners,proto3" json:"min_signers,omitempty"`
}

func (x *KeyPackage) Reset() {
	*x = KeyPackage{}
	mi := &file_frost_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPackage) ProtoMessage() {}

func (x *KeyPackage) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPackage.ProtoReflect.Descriptor instead.
func (*KeyPackage) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{7}
}

func (x *KeyPackage) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *KeyPackage) GetSecretShare() []byte {
	if x != nil {
		return x.SecretShare
	}
	return nil
}

func (x *KeyPackage) GetPublicShares() map[string][]byte {
	if x != nil {
		return x.PublicShares
	}
	return nil
}

func (x *KeyPackage) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *KeyPackage) GetMinSigners() uint32 {
	if x != nil {
		return x.MinSigners
	}
	return 0
}

// Distributed Key Generation Round 3 Response
//
// This response is sent from the server to the client after the Distributed Key Generation
// protocol has been completed.
type DkgRound3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key packages for the participants.
	KeyPackages []*KeyPackage `protobuf:"bytes,1,rep,name=key_packages,json=keyPackages,proto3" json:"key_packages,omitempty"`
}

func (x *DkgRound3Response) Reset() {
	*x = DkgRound3Response{}
	mi := &file_frost_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound3Response) ProtoMessage() {}

func (x *DkgRound3Response) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound3Response.ProtoReflect.Descriptor instead.
func (*DkgRound3Response) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{8}
}

func (x *DkgRound3Response) GetKeyPackages() []*KeyPackage {
	if x != nil {
		return x.KeyPackages
	}
	return nil
}

// A nonce for frost signing.
// It's a pair of private keys in secp256k1 sha256 field.
type SigningNonce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The private key for hiding. 32 bytes.
	Hiding []byte `protobuf:"bytes,1,opt,name=hiding,proto3" json:"hiding,omitempty"`
	// The private key for binding. 32 bytes.
	Binding []byte `protobuf:"bytes,2,opt,name=binding,proto3" json:"binding,omitempty"`
}

func (x *SigningNonce) Reset() {
	*x = SigningNonce{}
	mi := &file_frost_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningNonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningNonce) ProtoMessage() {}

func (x *SigningNonce) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningNonce.ProtoReflect.Descriptor instead.
func (*SigningNonce) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{9}
}

func (x *SigningNonce) GetHiding() []byte {
	if x != nil {
		return x.Hiding
	}
	return nil
}

func (x *SigningNonce) GetBinding() []byte {
	if x != nil {
		return x.Binding
	}
	return nil
}

type FrostNonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key packages for the signing, used as entropy for the nonce.
	KeyPackages []*KeyPackage `protobuf:"bytes,1,rep,name=key_packages,json=keyPackages,proto3" json:"key_packages,omitempty"`
}

func (x *FrostNonceRequest) Reset() {
	*x = FrostNonceRequest{}
	mi := &file_frost_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostNonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostNonceRequest) ProtoMessage() {}

func (x *FrostNonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostNonceRequest.ProtoReflect.Descriptor instead.
func (*FrostNonceRequest) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{10}
}

func (x *FrostNonceRequest) GetKeyPackages() []*KeyPackage {
	if x != nil {
		return x.KeyPackages
	}
	return nil
}

type SigningNonceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nonces for the signing.
	Nonces *SigningNonce `protobuf:"bytes,1,opt,name=nonces,proto3" json:"nonces,omitempty"`
	// The commitments for the signing.
	Commitments *common.SigningCommitment `protobuf:"bytes,2,opt,name=commitments,proto3" json:"commitments,omitempty"`
}

func (x *SigningNonceResult) Reset() {
	*x = SigningNonceResult{}
	mi := &file_frost_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningNonceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningNonceResult) ProtoMessage() {}

func (x *SigningNonceResult) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningNonceResult.ProtoReflect.Descriptor instead.
func (*SigningNonceResult) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{11}
}

func (x *SigningNonceResult) GetNonces() *SigningNonce {
	if x != nil {
		return x.Nonces
	}
	return nil
}

func (x *SigningNonceResult) GetCommitments() *common.SigningCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

type FrostNonceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SigningNonceResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FrostNonceResponse) Reset() {
	*x = FrostNonceResponse{}
	mi := &file_frost_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostNonceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostNonceResponse) ProtoMessage() {}

func (x *FrostNonceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostNonceResponse.ProtoReflect.Descriptor instead.
func (*FrostNonceResponse) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{12}
}

func (x *FrostNonceResponse) GetResults() []*SigningNonceResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FrostSigningJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the signing job.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The message to sign.
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The secret package from DKG round 3.
	KeyPackage *KeyPackage `protobuf:"bytes,3,opt,name=key_package,json=keyPackage,proto3" json:"key_package,omitempty"`
	// The verifying key. This should be the total public key for both user and StatechainEntity.
	VerifyingKey []byte `protobuf:"bytes,4,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
	// The nonce for current participant.
	Nonce *SigningNonce `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The commitments for all participants of the statechain.
	Commitments map[string]*common.SigningCommitment `protobuf:"bytes,6,rep,name=commitments,proto3" json:"commitments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The commitments for all participants of the user.
	UserCommitments *common.SigningCommitment `protobuf:"bytes,7,opt,name=user_commitments,json=userCommitments,proto3" json:"user_commitments,omitempty"`
}

func (x *FrostSigningJob) Reset() {
	*x = FrostSigningJob{}
	mi := &file_frost_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostSigningJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostSigningJob) ProtoMessage() {}

func (x *FrostSigningJob) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostSigningJob.ProtoReflect.Descriptor instead.
func (*FrostSigningJob) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{13}
}

func (x *FrostSigningJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *FrostSigningJob) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FrostSigningJob) GetKeyPackage() *KeyPackage {
	if x != nil {
		return x.KeyPackage
	}
	return nil
}

func (x *FrostSigningJob) GetVerifyingKey() []byte {
	if x != nil {
		return x.VerifyingKey
	}
	return nil
}

func (x *FrostSigningJob) GetNonce() *SigningNonce {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *FrostSigningJob) GetCommitments() map[string]*common.SigningCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *FrostSigningJob) GetUserCommitments() *common.SigningCommitment {
	if x != nil {
		return x.UserCommitments
	}
	return nil
}

// Signing request
//
// This request is sent to the server for the signing.
type SignFrostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signing jobs.
	SigningJobs []*FrostSigningJob `protobuf:"bytes,1,rep,name=signing_jobs,json=signingJobs,proto3" json:"signing_jobs,omitempty"`
	// The role of the participant in the signing.
	Role SigningRole `protobuf:"varint,2,opt,name=role,proto3,enum=frost.SigningRole" json:"role,omitempty"`
}

func (x *SignFrostRequest) Reset() {
	*x = SignFrostRequest{}
	mi := &file_frost_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignFrostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignFrostRequest) ProtoMessage() {}

func (x *SignFrostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignFrostRequest.ProtoReflect.Descriptor instead.
func (*SignFrostRequest) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{14}
}

func (x *SignFrostRequest) GetSigningJobs() []*FrostSigningJob {
	if x != nil {
		return x.SigningJobs
	}
	return nil
}

func (x *SignFrostRequest) GetRole() SigningRole {
	if x != nil {
		return x.Role
	}
	return SigningRole_STATECHAIN
}

// Signing response
//
// This response is sent from the server to the client after the signing has been completed.
type SignFrostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signature shares.
	Results map[string]*common.SigningResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SignFrostResponse) Reset() {
	*x = SignFrostResponse{}
	mi := &file_frost_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignFrostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignFrostResponse) ProtoMessage() {}

func (x *SignFrostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignFrostResponse.ProtoReflect.Descriptor instead.
func (*SignFrostResponse) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{15}
}

func (x *SignFrostResponse) GetResults() map[string]*common.SigningResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Aggregate frost request
//
// This request is sent to the server for the aggregate signing.
type AggregateFrostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message to sign.
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The signature shares for each participant of the statechain.
	SignatureShares map[string][]byte `protobuf:"bytes,2,rep,name=signature_shares,json=signatureShares,proto3" json:"signature_shares,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The public shares for each participant of the statechain.
	PublicShares map[string][]byte `protobuf:"bytes,3,rep,name=public_shares,json=publicShares,proto3" json:"public_shares,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The verifying key. This should be the total public key for both user and StatechainEntity.
	VerifyingKey []byte `protobuf:"bytes,4,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
	// The commitments for all participants of the statechain.
	Commitments map[string]*common.SigningCommitment `protobuf:"bytes,5,rep,name=commitments,proto3" json:"commitments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The commitments for all participants of the user.
	UserCommitments *common.SigningCommitment `protobuf:"bytes,6,opt,name=user_commitments,json=userCommitments,proto3" json:"user_commitments,omitempty"`
	// The user's public key.
	UserPublicKey []byte `protobuf:"bytes,7,opt,name=user_public_key,json=userPublicKey,proto3" json:"user_public_key,omitempty"`
	// The user's signature share.
	UserSignatureShare []byte `protobuf:"bytes,8,opt,name=user_signature_share,json=userSignatureShare,proto3" json:"user_signature_share,omitempty"`
}

func (x *AggregateFrostRequest) Reset() {
	*x = AggregateFrostRequest{}
	mi := &file_frost_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateFrostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateFrostRequest) ProtoMessage() {}

func (x *AggregateFrostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateFrostRequest.ProtoReflect.Descriptor instead.
func (*AggregateFrostRequest) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{16}
}

func (x *AggregateFrostRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AggregateFrostRequest) GetSignatureShares() map[string][]byte {
	if x != nil {
		return x.SignatureShares
	}
	return nil
}

func (x *AggregateFrostRequest) GetPublicShares() map[string][]byte {
	if x != nil {
		return x.PublicShares
	}
	return nil
}

func (x *AggregateFrostRequest) GetVerifyingKey() []byte {
	if x != nil {
		return x.VerifyingKey
	}
	return nil
}

func (x *AggregateFrostRequest) GetCommitments() map[string]*common.SigningCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *AggregateFrostRequest) GetUserCommitments() *common.SigningCommitment {
	if x != nil {
		return x.UserCommitments
	}
	return nil
}

func (x *AggregateFrostRequest) GetUserPublicKey() []byte {
	if x != nil {
		return x.UserPublicKey
	}
	return nil
}

func (x *AggregateFrostRequest) GetUserSignatureShare() []byte {
	if x != nil {
		return x.UserSignatureShare
	}
	return nil
}

// Aggregate frost response
//
// This response is sent from the server to the client after the aggregate signing has been completed.
type AggregateFrostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signature.
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AggregateFrostResponse) Reset() {
	*x = AggregateFrostResponse{}
	mi := &file_frost_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateFrostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateFrostResponse) ProtoMessage() {}

func (x *AggregateFrostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateFrostResponse.ProtoReflect.Descriptor instead.
func (*AggregateFrostResponse) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{17}
}

func (x *AggregateFrostResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_frost_proto protoreflect.FileDescriptor

var file_frost_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66,
	0x72, 0x6f, 0x73, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0b, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x45,
	0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b,
	0x65, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x11, 0x44, 0x6b, 0x67, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x10, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x14, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x31, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x12, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x31, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x73, 0x22,
	0x50, 0x0a, 0x11, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x70, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x44, 0x0a, 0x14, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x32, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x12, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x32, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x61, 0x70,
	0x73, 0x22, 0x9a, 0x02, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0x3f, 0x0a,
	0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49,
	0x0a, 0x11, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6b, 0x65,
	0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0c, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x69, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x49, 0x0a, 0x11, 0x46,
	0x72, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x72, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x12, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0xb2, 0x03, 0x0a, 0x0f, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0a,
	0x6b, 0x65, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x59, 0x0a, 0x10, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x72,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xa7, 0x01,
	0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xda, 0x05, 0x0a, 0x15, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x16, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0x27, 0x0a, 0x0b,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x01, 0x32, 0xe5, 0x03, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x12,
	0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x64, 0x6b, 0x67,
	0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x12, 0x17, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e,
	0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a,
	0x64, 0x6b, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x12, 0x17, 0x2e, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x2e, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x44, 0x6b, 0x67, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x0a, 0x64, 0x6b, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x12, 0x17, 0x2e,
	0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x44,
	0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x18, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x72, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x12, 0x1c,
	0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x66,
	0x72, 0x6f, 0x73, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2f, 0x5a,
	0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frost_proto_rawDescOnce sync.Once
	file_frost_proto_rawDescData = file_frost_proto_rawDesc
)

func file_frost_proto_rawDescGZIP() []byte {
	file_frost_proto_rawDescOnce.Do(func() {
		file_frost_proto_rawDescData = protoimpl.X.CompressGZIP(file_frost_proto_rawDescData)
	})
	return file_frost_proto_rawDescData
}

var file_frost_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_frost_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_frost_proto_goTypes = []any{
	(SigningRole)(0),                 // 0: frost.SigningRole
	(*EchoRequest)(nil),              // 1: frost.EchoRequest
	(*EchoResponse)(nil),             // 2: frost.EchoResponse
	(*DkgRound1Request)(nil),         // 3: frost.DkgRound1Request
	(*DkgRound1Response)(nil),        // 4: frost.DkgRound1Response
	(*DkgRound2Request)(nil),         // 5: frost.DkgRound2Request
	(*DkgRound2Response)(nil),        // 6: frost.DkgRound2Response
	(*DkgRound3Request)(nil),         // 7: frost.DkgRound3Request
	(*KeyPackage)(nil),               // 8: frost.KeyPackage
	(*DkgRound3Response)(nil),        // 9: frost.DkgRound3Response
	(*SigningNonce)(nil),             // 10: frost.SigningNonce
	(*FrostNonceRequest)(nil),        // 11: frost.FrostNonceRequest
	(*SigningNonceResult)(nil),       // 12: frost.SigningNonceResult
	(*FrostNonceResponse)(nil),       // 13: frost.FrostNonceResponse
	(*FrostSigningJob)(nil),          // 14: frost.FrostSigningJob
	(*SignFrostRequest)(nil),         // 15: frost.SignFrostRequest
	(*SignFrostResponse)(nil),        // 16: frost.SignFrostResponse
	(*AggregateFrostRequest)(nil),    // 17: frost.AggregateFrostRequest
	(*AggregateFrostResponse)(nil),   // 18: frost.AggregateFrostResponse
	nil,                              // 19: frost.KeyPackage.PublicSharesEntry
	nil,                              // 20: frost.FrostSigningJob.CommitmentsEntry
	nil,                              // 21: frost.SignFrostResponse.ResultsEntry
	nil,                              // 22: frost.AggregateFrostRequest.SignatureSharesEntry
	nil,                              // 23: frost.AggregateFrostRequest.PublicSharesEntry
	nil,                              // 24: frost.AggregateFrostRequest.CommitmentsEntry
	(*common.PackageMap)(nil),        // 25: common.PackageMap
	(*common.SigningCommitment)(nil), // 26: common.SigningCommitment
	(*common.SigningResult)(nil),     // 27: common.SigningResult
}
var file_frost_proto_depIdxs = []int32{
	25, // 0: frost.DkgRound2Request.round1_packages_maps:type_name -> common.PackageMap
	25, // 1: frost.DkgRound2Response.round2_packages:type_name -> common.PackageMap
	25, // 2: frost.DkgRound3Request.round1_packages_maps:type_name -> common.PackageMap
	25, // 3: frost.DkgRound3Request.round2_packages_maps:type_name -> common.PackageMap
	19, // 4: frost.KeyPackage.public_shares:type_name -> frost.KeyPackage.PublicSharesEntry
	8,  // 5: frost.DkgRound3Response.key_packages:type_name -> frost.KeyPackage
	8,  // 6: frost.FrostNonceRequest.key_packages:type_name -> frost.KeyPackage
	10, // 7: frost.SigningNonceResult.nonces:type_name -> frost.SigningNonce
	26, // 8: frost.SigningNonceResult.commitments:type_name -> common.SigningCommitment
	12, // 9: frost.FrostNonceResponse.results:type_name -> frost.SigningNonceResult
	8,  // 10: frost.FrostSigningJob.key_package:type_name -> frost.KeyPackage
	10, // 11: frost.FrostSigningJob.nonce:type_name -> frost.SigningNonce
	20, // 12: frost.FrostSigningJob.commitments:type_name -> frost.FrostSigningJob.CommitmentsEntry
	26, // 13: frost.FrostSigningJob.user_commitments:type_name -> common.SigningCommitment
	14, // 14: frost.SignFrostRequest.signing_jobs:type_name -> frost.FrostSigningJob
	0,  // 15: frost.SignFrostRequest.role:type_name -> frost.SigningRole
	21, // 16: frost.SignFrostResponse.results:type_name -> frost.SignFrostResponse.ResultsEntry
	22, // 17: frost.AggregateFrostRequest.signature_shares:type_name -> frost.AggregateFrostRequest.SignatureSharesEntry
	23, // 18: frost.AggregateFrostRequest.public_shares:type_name -> frost.AggregateFrostRequest.PublicSharesEntry
	24, // 19: frost.AggregateFrostRequest.commitments:type_name -> frost.AggregateFrostRequest.CommitmentsEntry
	26, // 20: frost.AggregateFrostRequest.user_commitments:type_name -> common.SigningCommitment
	26, // 21: frost.FrostSigningJob.CommitmentsEntry.value:type_name -> common.SigningCommitment
	27, // 22: frost.SignFrostResponse.ResultsEntry.value:type_name -> common.SigningResult
	26, // 23: frost.AggregateFrostRequest.CommitmentsEntry.value:type_name -> common.SigningCommitment
	1,  // 24: frost.FrostService.echo:input_type -> frost.EchoRequest
	3,  // 25: frost.FrostService.dkg_round1:input_type -> frost.DkgRound1Request
	5,  // 26: frost.FrostService.dkg_round2:input_type -> frost.DkgRound2Request
	7,  // 27: frost.FrostService.dkg_round3:input_type -> frost.DkgRound3Request
	11, // 28: frost.FrostService.frost_nonce:input_type -> frost.FrostNonceRequest
	15, // 29: frost.FrostService.sign_frost:input_type -> frost.SignFrostRequest
	17, // 30: frost.FrostService.aggregate_frost:input_type -> frost.AggregateFrostRequest
	2,  // 31: frost.FrostService.echo:output_type -> frost.EchoResponse
	4,  // 32: frost.FrostService.dkg_round1:output_type -> frost.DkgRound1Response
	6,  // 33: frost.FrostService.dkg_round2:output_type -> frost.DkgRound2Response
	9,  // 34: frost.FrostService.dkg_round3:output_type -> frost.DkgRound3Response
	13, // 35: frost.FrostService.frost_nonce:output_type -> frost.FrostNonceResponse
	16, // 36: frost.FrostService.sign_frost:output_type -> frost.SignFrostResponse
	18, // 37: frost.FrostService.aggregate_frost:output_type -> frost.AggregateFrostResponse
	31, // [31:38] is the sub-list for method output_type
	24, // [24:31] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_frost_proto_init() }
func file_frost_proto_init() {
	if File_frost_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frost_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_frost_proto_goTypes,
		DependencyIndexes: file_frost_proto_depIdxs,
		EnumInfos:         file_frost_proto_enumTypes,
		MessageInfos:      file_frost_proto_msgTypes,
	}.Build()
	File_frost_proto = out.File
	file_frost_proto_rawDesc = nil
	file_frost_proto_goTypes = nil
	file_frost_proto_depIdxs = nil
}
