// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: spark_tree.proto

package spark_tree

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SparkTreeService_GetLeafDenominationCounts_FullMethodName = "/spark.SparkTreeService/get_leaf_denomination_counts"
	SparkTreeService_FindLeavesToGiveUser_FullMethodName      = "/spark.SparkTreeService/find_leaves_to_give_user"
	SparkTreeService_FindLeavesToTakeFromUser_FullMethodName  = "/spark.SparkTreeService/find_leaves_to_take_from_user"
	SparkTreeService_ProposeTreeDenominations_FullMethodName  = "/spark.SparkTreeService/propose_tree_denominations"
)

// SparkTreeServiceClient is the client API for SparkTreeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SparkTreeServiceClient interface {
	GetLeafDenominationCounts(ctx context.Context, in *GetLeafDenominationCountsRequest, opts ...grpc.CallOption) (*GetLeafDenominationCountsResponse, error)
	FindLeavesToGiveUser(ctx context.Context, in *FindLeavesToGiveUserRequest, opts ...grpc.CallOption) (*FindLeavesToGiveUserResponse, error)
	FindLeavesToTakeFromUser(ctx context.Context, in *FindLeavesToTakeFromUserRequest, opts ...grpc.CallOption) (*FindLeavesToTakeFromUserResponse, error)
	ProposeTreeDenominations(ctx context.Context, in *ProposeTreeDenominationsRequest, opts ...grpc.CallOption) (*ProposeTreeDenominationsResponse, error)
}

type sparkTreeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSparkTreeServiceClient(cc grpc.ClientConnInterface) SparkTreeServiceClient {
	return &sparkTreeServiceClient{cc}
}

func (c *sparkTreeServiceClient) GetLeafDenominationCounts(ctx context.Context, in *GetLeafDenominationCountsRequest, opts ...grpc.CallOption) (*GetLeafDenominationCountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeafDenominationCountsResponse)
	err := c.cc.Invoke(ctx, SparkTreeService_GetLeafDenominationCounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkTreeServiceClient) FindLeavesToGiveUser(ctx context.Context, in *FindLeavesToGiveUserRequest, opts ...grpc.CallOption) (*FindLeavesToGiveUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindLeavesToGiveUserResponse)
	err := c.cc.Invoke(ctx, SparkTreeService_FindLeavesToGiveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkTreeServiceClient) FindLeavesToTakeFromUser(ctx context.Context, in *FindLeavesToTakeFromUserRequest, opts ...grpc.CallOption) (*FindLeavesToTakeFromUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindLeavesToTakeFromUserResponse)
	err := c.cc.Invoke(ctx, SparkTreeService_FindLeavesToTakeFromUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkTreeServiceClient) ProposeTreeDenominations(ctx context.Context, in *ProposeTreeDenominationsRequest, opts ...grpc.CallOption) (*ProposeTreeDenominationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProposeTreeDenominationsResponse)
	err := c.cc.Invoke(ctx, SparkTreeService_ProposeTreeDenominations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SparkTreeServiceServer is the server API for SparkTreeService service.
// All implementations must embed UnimplementedSparkTreeServiceServer
// for forward compatibility.
type SparkTreeServiceServer interface {
	GetLeafDenominationCounts(context.Context, *GetLeafDenominationCountsRequest) (*GetLeafDenominationCountsResponse, error)
	FindLeavesToGiveUser(context.Context, *FindLeavesToGiveUserRequest) (*FindLeavesToGiveUserResponse, error)
	FindLeavesToTakeFromUser(context.Context, *FindLeavesToTakeFromUserRequest) (*FindLeavesToTakeFromUserResponse, error)
	ProposeTreeDenominations(context.Context, *ProposeTreeDenominationsRequest) (*ProposeTreeDenominationsResponse, error)
	mustEmbedUnimplementedSparkTreeServiceServer()
}

// UnimplementedSparkTreeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSparkTreeServiceServer struct{}

func (UnimplementedSparkTreeServiceServer) GetLeafDenominationCounts(context.Context, *GetLeafDenominationCountsRequest) (*GetLeafDenominationCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeafDenominationCounts not implemented")
}
func (UnimplementedSparkTreeServiceServer) FindLeavesToGiveUser(context.Context, *FindLeavesToGiveUserRequest) (*FindLeavesToGiveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLeavesToGiveUser not implemented")
}
func (UnimplementedSparkTreeServiceServer) FindLeavesToTakeFromUser(context.Context, *FindLeavesToTakeFromUserRequest) (*FindLeavesToTakeFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindLeavesToTakeFromUser not implemented")
}
func (UnimplementedSparkTreeServiceServer) ProposeTreeDenominations(context.Context, *ProposeTreeDenominationsRequest) (*ProposeTreeDenominationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeTreeDenominations not implemented")
}
func (UnimplementedSparkTreeServiceServer) mustEmbedUnimplementedSparkTreeServiceServer() {}
func (UnimplementedSparkTreeServiceServer) testEmbeddedByValue()                          {}

// UnsafeSparkTreeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SparkTreeServiceServer will
// result in compilation errors.
type UnsafeSparkTreeServiceServer interface {
	mustEmbedUnimplementedSparkTreeServiceServer()
}

func RegisterSparkTreeServiceServer(s grpc.ServiceRegistrar, srv SparkTreeServiceServer) {
	// If the following call pancis, it indicates UnimplementedSparkTreeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SparkTreeService_ServiceDesc, srv)
}

func _SparkTreeService_GetLeafDenominationCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeafDenominationCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkTreeServiceServer).GetLeafDenominationCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkTreeService_GetLeafDenominationCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkTreeServiceServer).GetLeafDenominationCounts(ctx, req.(*GetLeafDenominationCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkTreeService_FindLeavesToGiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLeavesToGiveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkTreeServiceServer).FindLeavesToGiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkTreeService_FindLeavesToGiveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkTreeServiceServer).FindLeavesToGiveUser(ctx, req.(*FindLeavesToGiveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkTreeService_FindLeavesToTakeFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindLeavesToTakeFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkTreeServiceServer).FindLeavesToTakeFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkTreeService_FindLeavesToTakeFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkTreeServiceServer).FindLeavesToTakeFromUser(ctx, req.(*FindLeavesToTakeFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkTreeService_ProposeTreeDenominations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeTreeDenominationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkTreeServiceServer).ProposeTreeDenominations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkTreeService_ProposeTreeDenominations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkTreeServiceServer).ProposeTreeDenominations(ctx, req.(*ProposeTreeDenominationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SparkTreeService_ServiceDesc is the grpc.ServiceDesc for SparkTreeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SparkTreeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spark.SparkTreeService",
	HandlerType: (*SparkTreeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_leaf_denomination_counts",
			Handler:    _SparkTreeService_GetLeafDenominationCounts_Handler,
		},
		{
			MethodName: "find_leaves_to_give_user",
			Handler:    _SparkTreeService_FindLeavesToGiveUser_Handler,
		},
		{
			MethodName: "find_leaves_to_take_from_user",
			Handler:    _SparkTreeService_FindLeavesToTakeFromUser_Handler,
		},
		{
			MethodName: "propose_tree_denominations",
			Handler:    _SparkTreeService_ProposeTreeDenominations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spark_tree.proto",
}
