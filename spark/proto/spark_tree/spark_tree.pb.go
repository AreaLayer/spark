// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: spark_tree.proto

package spark_tree

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetLeafDenominationCountsRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	OwnerIdentityPublicKey []byte                 `protobuf:"bytes,1,opt,name=owner_identity_public_key,json=ownerIdentityPublicKey,proto3" json:"owner_identity_public_key,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetLeafDenominationCountsRequest) Reset() {
	*x = GetLeafDenominationCountsRequest{}
	mi := &file_spark_tree_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeafDenominationCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeafDenominationCountsRequest) ProtoMessage() {}

func (x *GetLeafDenominationCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeafDenominationCountsRequest.ProtoReflect.Descriptor instead.
func (*GetLeafDenominationCountsRequest) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{0}
}

func (x *GetLeafDenominationCountsRequest) GetOwnerIdentityPublicKey() []byte {
	if x != nil {
		return x.OwnerIdentityPublicKey
	}
	return nil
}

type GetLeafDenominationCountsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Counts        map[uint64]uint64      `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeafDenominationCountsResponse) Reset() {
	*x = GetLeafDenominationCountsResponse{}
	mi := &file_spark_tree_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeafDenominationCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeafDenominationCountsResponse) ProtoMessage() {}

func (x *GetLeafDenominationCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeafDenominationCountsResponse.ProtoReflect.Descriptor instead.
func (*GetLeafDenominationCountsResponse) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{1}
}

func (x *GetLeafDenominationCountsResponse) GetCounts() map[uint64]uint64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type FindLeavesToGiveUserRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	SspIdentityPublicKey  []byte                 `protobuf:"bytes,1,opt,name=ssp_identity_public_key,json=sspIdentityPublicKey,proto3" json:"ssp_identity_public_key,omitempty"`
	UserIdentityPublicKey []byte                 `protobuf:"bytes,2,opt,name=user_identity_public_key,json=userIdentityPublicKey,proto3" json:"user_identity_public_key,omitempty"`
	AmountSats            uint64                 `protobuf:"varint,3,opt,name=amount_sats,json=amountSats,proto3" json:"amount_sats,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FindLeavesToGiveUserRequest) Reset() {
	*x = FindLeavesToGiveUserRequest{}
	mi := &file_spark_tree_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindLeavesToGiveUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLeavesToGiveUserRequest) ProtoMessage() {}

func (x *FindLeavesToGiveUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLeavesToGiveUserRequest.ProtoReflect.Descriptor instead.
func (*FindLeavesToGiveUserRequest) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{2}
}

func (x *FindLeavesToGiveUserRequest) GetSspIdentityPublicKey() []byte {
	if x != nil {
		return x.SspIdentityPublicKey
	}
	return nil
}

func (x *FindLeavesToGiveUserRequest) GetUserIdentityPublicKey() []byte {
	if x != nil {
		return x.UserIdentityPublicKey
	}
	return nil
}

func (x *FindLeavesToGiveUserRequest) GetAmountSats() uint64 {
	if x != nil {
		return x.AmountSats
	}
	return 0
}

type FindLeavesToGiveUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Leaves        [][]byte               `protobuf:"bytes,1,rep,name=leaves,proto3" json:"leaves,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindLeavesToGiveUserResponse) Reset() {
	*x = FindLeavesToGiveUserResponse{}
	mi := &file_spark_tree_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindLeavesToGiveUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLeavesToGiveUserResponse) ProtoMessage() {}

func (x *FindLeavesToGiveUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLeavesToGiveUserResponse.ProtoReflect.Descriptor instead.
func (*FindLeavesToGiveUserResponse) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{3}
}

func (x *FindLeavesToGiveUserResponse) GetLeaves() [][]byte {
	if x != nil {
		return x.Leaves
	}
	return nil
}

type FindLeavesToTakeFromUserRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	SspIdentityPublicKey  []byte                 `protobuf:"bytes,1,opt,name=ssp_identity_public_key,json=sspIdentityPublicKey,proto3" json:"ssp_identity_public_key,omitempty"`
	UserIdentityPublicKey []byte                 `protobuf:"bytes,2,opt,name=user_identity_public_key,json=userIdentityPublicKey,proto3" json:"user_identity_public_key,omitempty"`
	AmountSats            uint64                 `protobuf:"varint,3,opt,name=amount_sats,json=amountSats,proto3" json:"amount_sats,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FindLeavesToTakeFromUserRequest) Reset() {
	*x = FindLeavesToTakeFromUserRequest{}
	mi := &file_spark_tree_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindLeavesToTakeFromUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLeavesToTakeFromUserRequest) ProtoMessage() {}

func (x *FindLeavesToTakeFromUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLeavesToTakeFromUserRequest.ProtoReflect.Descriptor instead.
func (*FindLeavesToTakeFromUserRequest) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{4}
}

func (x *FindLeavesToTakeFromUserRequest) GetSspIdentityPublicKey() []byte {
	if x != nil {
		return x.SspIdentityPublicKey
	}
	return nil
}

func (x *FindLeavesToTakeFromUserRequest) GetUserIdentityPublicKey() []byte {
	if x != nil {
		return x.UserIdentityPublicKey
	}
	return nil
}

func (x *FindLeavesToTakeFromUserRequest) GetAmountSats() uint64 {
	if x != nil {
		return x.AmountSats
	}
	return 0
}

type FindLeavesToTakeFromUserResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The leaves that the user will give to the SSP.
	LeavesToTake [][]byte `protobuf:"bytes,1,rep,name=leaves_to_take,json=leavesToTake,proto3" json:"leaves_to_take,omitempty"`
	// The leaves that the SSP will give to the user.
	LeavesToSwap  [][]byte `protobuf:"bytes,2,rep,name=leaves_to_swap,json=leavesToSwap,proto3" json:"leaves_to_swap,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindLeavesToTakeFromUserResponse) Reset() {
	*x = FindLeavesToTakeFromUserResponse{}
	mi := &file_spark_tree_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindLeavesToTakeFromUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindLeavesToTakeFromUserResponse) ProtoMessage() {}

func (x *FindLeavesToTakeFromUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindLeavesToTakeFromUserResponse.ProtoReflect.Descriptor instead.
func (*FindLeavesToTakeFromUserResponse) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{5}
}

func (x *FindLeavesToTakeFromUserResponse) GetLeavesToTake() [][]byte {
	if x != nil {
		return x.LeavesToTake
	}
	return nil
}

func (x *FindLeavesToTakeFromUserResponse) GetLeavesToSwap() [][]byte {
	if x != nil {
		return x.LeavesToSwap
	}
	return nil
}

type ProposeTreeDenominationsRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SspIdentityPublicKey []byte                 `protobuf:"bytes,1,opt,name=ssp_identity_public_key,json=sspIdentityPublicKey,proto3" json:"ssp_identity_public_key,omitempty"`
	MaxAmountSats        uint64                 `protobuf:"varint,2,opt,name=max_amount_sats,json=maxAmountSats,proto3" json:"max_amount_sats,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ProposeTreeDenominationsRequest) Reset() {
	*x = ProposeTreeDenominationsRequest{}
	mi := &file_spark_tree_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposeTreeDenominationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeTreeDenominationsRequest) ProtoMessage() {}

func (x *ProposeTreeDenominationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeTreeDenominationsRequest.ProtoReflect.Descriptor instead.
func (*ProposeTreeDenominationsRequest) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{6}
}

func (x *ProposeTreeDenominationsRequest) GetSspIdentityPublicKey() []byte {
	if x != nil {
		return x.SspIdentityPublicKey
	}
	return nil
}

func (x *ProposeTreeDenominationsRequest) GetMaxAmountSats() uint64 {
	if x != nil {
		return x.MaxAmountSats
	}
	return 0
}

type ProposeTreeDenominationsResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SmallDenominations []uint64               `protobuf:"varint,1,rep,packed,name=small_denominations,json=smallDenominations,proto3" json:"small_denominations,omitempty"`
	LargeDenominations []uint64               `protobuf:"varint,2,rep,packed,name=large_denominations,json=largeDenominations,proto3" json:"large_denominations,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProposeTreeDenominationsResponse) Reset() {
	*x = ProposeTreeDenominationsResponse{}
	mi := &file_spark_tree_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposeTreeDenominationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeTreeDenominationsResponse) ProtoMessage() {}

func (x *ProposeTreeDenominationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeTreeDenominationsResponse.ProtoReflect.Descriptor instead.
func (*ProposeTreeDenominationsResponse) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{7}
}

func (x *ProposeTreeDenominationsResponse) GetSmallDenominations() []uint64 {
	if x != nil {
		return x.SmallDenominations
	}
	return nil
}

func (x *ProposeTreeDenominationsResponse) GetLargeDenominations() []uint64 {
	if x != nil {
		return x.LargeDenominations
	}
	return nil
}

var File_spark_tree_proto protoreflect.FileDescriptor

var file_spark_tree_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x22, 0x5d, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x66, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x19, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x16, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xac, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x66, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x73, 0x70, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x73, 0x70, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x37,
	0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x61, 0x74, 0x73, 0x22, 0x36, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73,
	0x22, 0xb2, 0x01, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x54,
	0x6f, 0x54, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x73, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x61, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x20, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x73, 0x54, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x61,
	0x76, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x54,
	0x6f, 0x53, 0x77, 0x61, 0x70, 0x22, 0x80, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x73, 0x70,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x73, 0x70, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73,
	0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x61, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x61, 0x72,
	0x67, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0xd3, 0x03, 0x0a, 0x10, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x66,
	0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x66, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x18, 0x66, 0x69, 0x6e,
	0x64, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x69, 0x76, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x69,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x72, 0x0a, 0x1d, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x54, 0x6f, 0x54, 0x61,
	0x6b, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x64, 0x65,
	0x76, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_spark_tree_proto_rawDescOnce sync.Once
	file_spark_tree_proto_rawDescData []byte
)

func file_spark_tree_proto_rawDescGZIP() []byte {
	file_spark_tree_proto_rawDescOnce.Do(func() {
		file_spark_tree_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spark_tree_proto_rawDesc), len(file_spark_tree_proto_rawDesc)))
	})
	return file_spark_tree_proto_rawDescData
}

var file_spark_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_spark_tree_proto_goTypes = []any{
	(*GetLeafDenominationCountsRequest)(nil),  // 0: spark.GetLeafDenominationCountsRequest
	(*GetLeafDenominationCountsResponse)(nil), // 1: spark.GetLeafDenominationCountsResponse
	(*FindLeavesToGiveUserRequest)(nil),       // 2: spark.FindLeavesToGiveUserRequest
	(*FindLeavesToGiveUserResponse)(nil),      // 3: spark.FindLeavesToGiveUserResponse
	(*FindLeavesToTakeFromUserRequest)(nil),   // 4: spark.FindLeavesToTakeFromUserRequest
	(*FindLeavesToTakeFromUserResponse)(nil),  // 5: spark.FindLeavesToTakeFromUserResponse
	(*ProposeTreeDenominationsRequest)(nil),   // 6: spark.ProposeTreeDenominationsRequest
	(*ProposeTreeDenominationsResponse)(nil),  // 7: spark.ProposeTreeDenominationsResponse
	nil,                                       // 8: spark.GetLeafDenominationCountsResponse.CountsEntry
}
var file_spark_tree_proto_depIdxs = []int32{
	8, // 0: spark.GetLeafDenominationCountsResponse.counts:type_name -> spark.GetLeafDenominationCountsResponse.CountsEntry
	0, // 1: spark.SparkTreeService.get_leaf_denomination_counts:input_type -> spark.GetLeafDenominationCountsRequest
	2, // 2: spark.SparkTreeService.find_leaves_to_give_user:input_type -> spark.FindLeavesToGiveUserRequest
	4, // 3: spark.SparkTreeService.find_leaves_to_take_from_user:input_type -> spark.FindLeavesToTakeFromUserRequest
	6, // 4: spark.SparkTreeService.propose_tree_denominations:input_type -> spark.ProposeTreeDenominationsRequest
	1, // 5: spark.SparkTreeService.get_leaf_denomination_counts:output_type -> spark.GetLeafDenominationCountsResponse
	3, // 6: spark.SparkTreeService.find_leaves_to_give_user:output_type -> spark.FindLeavesToGiveUserResponse
	5, // 7: spark.SparkTreeService.find_leaves_to_take_from_user:output_type -> spark.FindLeavesToTakeFromUserResponse
	7, // 8: spark.SparkTreeService.propose_tree_denominations:output_type -> spark.ProposeTreeDenominationsResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_spark_tree_proto_init() }
func file_spark_tree_proto_init() {
	if File_spark_tree_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spark_tree_proto_rawDesc), len(file_spark_tree_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spark_tree_proto_goTypes,
		DependencyIndexes: file_spark_tree_proto_depIdxs,
		MessageInfos:      file_spark_tree_proto_msgTypes,
	}.Build()
	File_spark_tree_proto = out.File
	file_spark_tree_proto_goTypes = nil
	file_spark_tree_proto_depIdxs = nil
}
