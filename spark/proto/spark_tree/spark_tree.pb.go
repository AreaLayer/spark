// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: spark_tree.proto

package spark_tree

import (
	spark "github.com/lightsparkdev/spark-go/proto/spark"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetLeafDenominationCountsRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	OwnerIdentityPublicKey []byte                 `protobuf:"bytes,1,opt,name=owner_identity_public_key,json=ownerIdentityPublicKey,proto3" json:"owner_identity_public_key,omitempty"`
	Network                spark.Network          `protobuf:"varint,2,opt,name=network,proto3,enum=spark.Network" json:"network,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetLeafDenominationCountsRequest) Reset() {
	*x = GetLeafDenominationCountsRequest{}
	mi := &file_spark_tree_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeafDenominationCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeafDenominationCountsRequest) ProtoMessage() {}

func (x *GetLeafDenominationCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeafDenominationCountsRequest.ProtoReflect.Descriptor instead.
func (*GetLeafDenominationCountsRequest) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{0}
}

func (x *GetLeafDenominationCountsRequest) GetOwnerIdentityPublicKey() []byte {
	if x != nil {
		return x.OwnerIdentityPublicKey
	}
	return nil
}

func (x *GetLeafDenominationCountsRequest) GetNetwork() spark.Network {
	if x != nil {
		return x.Network
	}
	return spark.Network(0)
}

type GetLeafDenominationCountsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Counts        map[uint64]uint64      `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeafDenominationCountsResponse) Reset() {
	*x = GetLeafDenominationCountsResponse{}
	mi := &file_spark_tree_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeafDenominationCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeafDenominationCountsResponse) ProtoMessage() {}

func (x *GetLeafDenominationCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeafDenominationCountsResponse.ProtoReflect.Descriptor instead.
func (*GetLeafDenominationCountsResponse) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{1}
}

func (x *GetLeafDenominationCountsResponse) GetCounts() map[uint64]uint64 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type ProposeTreeDenominationsRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SspIdentityPublicKey []byte                 `protobuf:"bytes,1,opt,name=ssp_identity_public_key,json=sspIdentityPublicKey,proto3" json:"ssp_identity_public_key,omitempty"`
	MaxAmountSats        uint64                 `protobuf:"varint,2,opt,name=max_amount_sats,json=maxAmountSats,proto3" json:"max_amount_sats,omitempty"`
	MaxTreeDepth         uint64                 `protobuf:"varint,3,opt,name=max_tree_depth,json=maxTreeDepth,proto3" json:"max_tree_depth,omitempty"`
	MinTreeDepth         uint64                 `protobuf:"varint,4,opt,name=min_tree_depth,json=minTreeDepth,proto3" json:"min_tree_depth,omitempty"`
	Network              spark.Network          `protobuf:"varint,5,opt,name=network,proto3,enum=spark.Network" json:"network,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ProposeTreeDenominationsRequest) Reset() {
	*x = ProposeTreeDenominationsRequest{}
	mi := &file_spark_tree_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposeTreeDenominationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeTreeDenominationsRequest) ProtoMessage() {}

func (x *ProposeTreeDenominationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeTreeDenominationsRequest.ProtoReflect.Descriptor instead.
func (*ProposeTreeDenominationsRequest) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{2}
}

func (x *ProposeTreeDenominationsRequest) GetSspIdentityPublicKey() []byte {
	if x != nil {
		return x.SspIdentityPublicKey
	}
	return nil
}

func (x *ProposeTreeDenominationsRequest) GetMaxAmountSats() uint64 {
	if x != nil {
		return x.MaxAmountSats
	}
	return 0
}

func (x *ProposeTreeDenominationsRequest) GetMaxTreeDepth() uint64 {
	if x != nil {
		return x.MaxTreeDepth
	}
	return 0
}

func (x *ProposeTreeDenominationsRequest) GetMinTreeDepth() uint64 {
	if x != nil {
		return x.MinTreeDepth
	}
	return 0
}

func (x *ProposeTreeDenominationsRequest) GetNetwork() spark.Network {
	if x != nil {
		return x.Network
	}
	return spark.Network(0)
}

type ProposeTree struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSmall       bool                   `protobuf:"varint,1,opt,name=is_small,json=isSmall,proto3" json:"is_small,omitempty"`
	Leaves        []uint64               `protobuf:"varint,2,rep,packed,name=leaves,proto3" json:"leaves,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProposeTree) Reset() {
	*x = ProposeTree{}
	mi := &file_spark_tree_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposeTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeTree) ProtoMessage() {}

func (x *ProposeTree) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeTree.ProtoReflect.Descriptor instead.
func (*ProposeTree) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{3}
}

func (x *ProposeTree) GetIsSmall() bool {
	if x != nil {
		return x.IsSmall
	}
	return false
}

func (x *ProposeTree) GetLeaves() []uint64 {
	if x != nil {
		return x.Leaves
	}
	return nil
}

type ProposeTreeDenominationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trees         []*ProposeTree         `protobuf:"bytes,1,rep,name=trees,proto3" json:"trees,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProposeTreeDenominationsResponse) Reset() {
	*x = ProposeTreeDenominationsResponse{}
	mi := &file_spark_tree_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProposeTreeDenominationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeTreeDenominationsResponse) ProtoMessage() {}

func (x *ProposeTreeDenominationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeTreeDenominationsResponse.ProtoReflect.Descriptor instead.
func (*ProposeTreeDenominationsResponse) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{4}
}

func (x *ProposeTreeDenominationsResponse) GetTrees() []*ProposeTree {
	if x != nil {
		return x.Trees
	}
	return nil
}

type FetchPolarityScoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublicKeys    [][]byte               `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchPolarityScoreRequest) Reset() {
	*x = FetchPolarityScoreRequest{}
	mi := &file_spark_tree_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchPolarityScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchPolarityScoreRequest) ProtoMessage() {}

func (x *FetchPolarityScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchPolarityScoreRequest.ProtoReflect.Descriptor instead.
func (*FetchPolarityScoreRequest) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{5}
}

func (x *FetchPolarityScoreRequest) GetPublicKeys() [][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

type PolarityScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LeafId        string                 `protobuf:"bytes,1,opt,name=leaf_id,json=leafId,proto3" json:"leaf_id,omitempty"`
	PublicKey     []byte                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Score         float32                `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolarityScore) Reset() {
	*x = PolarityScore{}
	mi := &file_spark_tree_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolarityScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolarityScore) ProtoMessage() {}

func (x *PolarityScore) ProtoReflect() protoreflect.Message {
	mi := &file_spark_tree_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolarityScore.ProtoReflect.Descriptor instead.
func (*PolarityScore) Descriptor() ([]byte, []int) {
	return file_spark_tree_proto_rawDescGZIP(), []int{6}
}

func (x *PolarityScore) GetLeafId() string {
	if x != nil {
		return x.LeafId
	}
	return ""
}

func (x *PolarityScore) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *PolarityScore) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

var File_spark_tree_proto protoreflect.FileDescriptor

var file_spark_tree_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x1a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x66, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x22, 0xac, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf6, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x73, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x61,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54,
	0x72, 0x65, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x28,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x40, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x20, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x74, 0x72, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x05, 0x74, 0x72, 0x65, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x5d, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x66, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x32, 0xcd, 0x02, 0x0a, 0x10, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x54,
	0x72, 0x65, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x67, 0x65,
	0x74, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x66, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x15, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x50, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x64, 0x65,
	0x76, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_spark_tree_proto_rawDescOnce sync.Once
	file_spark_tree_proto_rawDescData []byte
)

func file_spark_tree_proto_rawDescGZIP() []byte {
	file_spark_tree_proto_rawDescOnce.Do(func() {
		file_spark_tree_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spark_tree_proto_rawDesc), len(file_spark_tree_proto_rawDesc)))
	})
	return file_spark_tree_proto_rawDescData
}

var file_spark_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_spark_tree_proto_goTypes = []any{
	(*GetLeafDenominationCountsRequest)(nil),  // 0: spark.GetLeafDenominationCountsRequest
	(*GetLeafDenominationCountsResponse)(nil), // 1: spark.GetLeafDenominationCountsResponse
	(*ProposeTreeDenominationsRequest)(nil),   // 2: spark.ProposeTreeDenominationsRequest
	(*ProposeTree)(nil),                       // 3: spark.ProposeTree
	(*ProposeTreeDenominationsResponse)(nil),  // 4: spark.ProposeTreeDenominationsResponse
	(*FetchPolarityScoreRequest)(nil),         // 5: spark.FetchPolarityScoreRequest
	(*PolarityScore)(nil),                     // 6: spark.PolarityScore
	nil,                                       // 7: spark.GetLeafDenominationCountsResponse.CountsEntry
	(spark.Network)(0),                        // 8: spark.Network
}
var file_spark_tree_proto_depIdxs = []int32{
	8, // 0: spark.GetLeafDenominationCountsRequest.network:type_name -> spark.Network
	7, // 1: spark.GetLeafDenominationCountsResponse.counts:type_name -> spark.GetLeafDenominationCountsResponse.CountsEntry
	8, // 2: spark.ProposeTreeDenominationsRequest.network:type_name -> spark.Network
	3, // 3: spark.ProposeTreeDenominationsResponse.trees:type_name -> spark.ProposeTree
	0, // 4: spark.SparkTreeService.get_leaf_denomination_counts:input_type -> spark.GetLeafDenominationCountsRequest
	2, // 5: spark.SparkTreeService.propose_tree_denominations:input_type -> spark.ProposeTreeDenominationsRequest
	5, // 6: spark.SparkTreeService.fetch_polarity_scores:input_type -> spark.FetchPolarityScoreRequest
	1, // 7: spark.SparkTreeService.get_leaf_denomination_counts:output_type -> spark.GetLeafDenominationCountsResponse
	4, // 8: spark.SparkTreeService.propose_tree_denominations:output_type -> spark.ProposeTreeDenominationsResponse
	6, // 9: spark.SparkTreeService.fetch_polarity_scores:output_type -> spark.PolarityScore
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_spark_tree_proto_init() }
func file_spark_tree_proto_init() {
	if File_spark_tree_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spark_tree_proto_rawDesc), len(file_spark_tree_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spark_tree_proto_goTypes,
		DependencyIndexes: file_spark_tree_proto_depIdxs,
		MessageInfos:      file_spark_tree_proto_msgTypes,
	}.Build()
	File_spark_tree_proto = out.File
	file_spark_tree_proto_goTypes = nil
	file_spark_tree_proto_depIdxs = nil
}
