// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: spark_tree.proto

package spark_tree

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetLeafDenominationCountsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetLeafDenominationCountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeafDenominationCountsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetLeafDenominationCountsRequestMultiError, or nil if none found.
func (m *GetLeafDenominationCountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeafDenominationCountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerIdentityPublicKey

	// no validation rules for Network

	if len(errors) > 0 {
		return GetLeafDenominationCountsRequestMultiError(errors)
	}

	return nil
}

// GetLeafDenominationCountsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetLeafDenominationCountsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLeafDenominationCountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeafDenominationCountsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeafDenominationCountsRequestMultiError) AllErrors() []error { return m }

// GetLeafDenominationCountsRequestValidationError is the validation error
// returned by GetLeafDenominationCountsRequest.Validate if the designated
// constraints aren't met.
type GetLeafDenominationCountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeafDenominationCountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeafDenominationCountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeafDenominationCountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeafDenominationCountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeafDenominationCountsRequestValidationError) ErrorName() string {
	return "GetLeafDenominationCountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeafDenominationCountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeafDenominationCountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeafDenominationCountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeafDenominationCountsRequestValidationError{}

// Validate checks the field values on GetLeafDenominationCountsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetLeafDenominationCountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLeafDenominationCountsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetLeafDenominationCountsResponseMultiError, or nil if none found.
func (m *GetLeafDenominationCountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLeafDenominationCountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Counts

	if len(errors) > 0 {
		return GetLeafDenominationCountsResponseMultiError(errors)
	}

	return nil
}

// GetLeafDenominationCountsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetLeafDenominationCountsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLeafDenominationCountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLeafDenominationCountsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLeafDenominationCountsResponseMultiError) AllErrors() []error { return m }

// GetLeafDenominationCountsResponseValidationError is the validation error
// returned by GetLeafDenominationCountsResponse.Validate if the designated
// constraints aren't met.
type GetLeafDenominationCountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLeafDenominationCountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLeafDenominationCountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLeafDenominationCountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLeafDenominationCountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLeafDenominationCountsResponseValidationError) ErrorName() string {
	return "GetLeafDenominationCountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLeafDenominationCountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLeafDenominationCountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLeafDenominationCountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLeafDenominationCountsResponseValidationError{}

// Validate checks the field values on ProposeTreeDenominationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProposeTreeDenominationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProposeTreeDenominationsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProposeTreeDenominationsRequestMultiError, or nil if none found.
func (m *ProposeTreeDenominationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProposeTreeDenominationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SspIdentityPublicKey

	// no validation rules for MaxAmountSats

	// no validation rules for MaxTreeDepth

	// no validation rules for MinTreeDepth

	// no validation rules for Network

	if len(errors) > 0 {
		return ProposeTreeDenominationsRequestMultiError(errors)
	}

	return nil
}

// ProposeTreeDenominationsRequestMultiError is an error wrapping multiple
// validation errors returned by ProposeTreeDenominationsRequest.ValidateAll()
// if the designated constraints aren't met.
type ProposeTreeDenominationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProposeTreeDenominationsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProposeTreeDenominationsRequestMultiError) AllErrors() []error { return m }

// ProposeTreeDenominationsRequestValidationError is the validation error
// returned by ProposeTreeDenominationsRequest.Validate if the designated
// constraints aren't met.
type ProposeTreeDenominationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProposeTreeDenominationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProposeTreeDenominationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProposeTreeDenominationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProposeTreeDenominationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProposeTreeDenominationsRequestValidationError) ErrorName() string {
	return "ProposeTreeDenominationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProposeTreeDenominationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProposeTreeDenominationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProposeTreeDenominationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProposeTreeDenominationsRequestValidationError{}

// Validate checks the field values on ProposeTree with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProposeTree) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProposeTree with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProposeTreeMultiError, or
// nil if none found.
func (m *ProposeTree) ValidateAll() error {
	return m.validate(true)
}

func (m *ProposeTree) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsSmall

	if len(errors) > 0 {
		return ProposeTreeMultiError(errors)
	}

	return nil
}

// ProposeTreeMultiError is an error wrapping multiple validation errors
// returned by ProposeTree.ValidateAll() if the designated constraints aren't met.
type ProposeTreeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProposeTreeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProposeTreeMultiError) AllErrors() []error { return m }

// ProposeTreeValidationError is the validation error returned by
// ProposeTree.Validate if the designated constraints aren't met.
type ProposeTreeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProposeTreeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProposeTreeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProposeTreeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProposeTreeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProposeTreeValidationError) ErrorName() string { return "ProposeTreeValidationError" }

// Error satisfies the builtin error interface
func (e ProposeTreeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProposeTree.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProposeTreeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProposeTreeValidationError{}

// Validate checks the field values on ProposeTreeDenominationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProposeTreeDenominationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProposeTreeDenominationsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProposeTreeDenominationsResponseMultiError, or nil if none found.
func (m *ProposeTreeDenominationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProposeTreeDenominationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTrees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProposeTreeDenominationsResponseValidationError{
						field:  fmt.Sprintf("Trees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProposeTreeDenominationsResponseValidationError{
						field:  fmt.Sprintf("Trees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProposeTreeDenominationsResponseValidationError{
					field:  fmt.Sprintf("Trees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProposeTreeDenominationsResponseMultiError(errors)
	}

	return nil
}

// ProposeTreeDenominationsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ProposeTreeDenominationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ProposeTreeDenominationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProposeTreeDenominationsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProposeTreeDenominationsResponseMultiError) AllErrors() []error { return m }

// ProposeTreeDenominationsResponseValidationError is the validation error
// returned by ProposeTreeDenominationsResponse.Validate if the designated
// constraints aren't met.
type ProposeTreeDenominationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProposeTreeDenominationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProposeTreeDenominationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProposeTreeDenominationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProposeTreeDenominationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProposeTreeDenominationsResponseValidationError) ErrorName() string {
	return "ProposeTreeDenominationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProposeTreeDenominationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProposeTreeDenominationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProposeTreeDenominationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProposeTreeDenominationsResponseValidationError{}

// Validate checks the field values on FetchPolarityScoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchPolarityScoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchPolarityScoreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchPolarityScoreRequestMultiError, or nil if none found.
func (m *FetchPolarityScoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchPolarityScoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FetchPolarityScoreRequestMultiError(errors)
	}

	return nil
}

// FetchPolarityScoreRequestMultiError is an error wrapping multiple validation
// errors returned by FetchPolarityScoreRequest.ValidateAll() if the
// designated constraints aren't met.
type FetchPolarityScoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchPolarityScoreRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchPolarityScoreRequestMultiError) AllErrors() []error { return m }

// FetchPolarityScoreRequestValidationError is the validation error returned by
// FetchPolarityScoreRequest.Validate if the designated constraints aren't met.
type FetchPolarityScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchPolarityScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchPolarityScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchPolarityScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchPolarityScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchPolarityScoreRequestValidationError) ErrorName() string {
	return "FetchPolarityScoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchPolarityScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchPolarityScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchPolarityScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchPolarityScoreRequestValidationError{}

// Validate checks the field values on PolarityScore with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolarityScore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolarityScore with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolarityScoreMultiError, or
// nil if none found.
func (m *PolarityScore) ValidateAll() error {
	return m.validate(true)
}

func (m *PolarityScore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LeafId

	// no validation rules for PublicKey

	// no validation rules for Score

	if len(errors) > 0 {
		return PolarityScoreMultiError(errors)
	}

	return nil
}

// PolarityScoreMultiError is an error wrapping multiple validation errors
// returned by PolarityScore.ValidateAll() if the designated constraints
// aren't met.
type PolarityScoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolarityScoreMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolarityScoreMultiError) AllErrors() []error { return m }

// PolarityScoreValidationError is the validation error returned by
// PolarityScore.Validate if the designated constraints aren't met.
type PolarityScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolarityScoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolarityScoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolarityScoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolarityScoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolarityScoreValidationError) ErrorName() string { return "PolarityScoreValidationError" }

// Error satisfies the builtin error interface
func (e PolarityScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolarityScore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolarityScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolarityScoreValidationError{}
