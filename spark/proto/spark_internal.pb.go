// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v4.23.4
// source: spark_internal.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarkKeysharesAsUsedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyshareId []string `protobuf:"bytes,1,rep,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
}

func (x *MarkKeysharesAsUsedRequest) Reset() {
	*x = MarkKeysharesAsUsedRequest{}
	mi := &file_spark_internal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkKeysharesAsUsedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkKeysharesAsUsedRequest) ProtoMessage() {}

func (x *MarkKeysharesAsUsedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkKeysharesAsUsedRequest.ProtoReflect.Descriptor instead.
func (*MarkKeysharesAsUsedRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{0}
}

func (x *MarkKeysharesAsUsedRequest) GetKeyshareId() []string {
	if x != nil {
		return x.KeyshareId
	}
	return nil
}

type MarkKeyshareForDepositAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyshareId string `protobuf:"bytes,1,opt,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *MarkKeyshareForDepositAddressRequest) Reset() {
	*x = MarkKeyshareForDepositAddressRequest{}
	mi := &file_spark_internal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkKeyshareForDepositAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkKeyshareForDepositAddressRequest) ProtoMessage() {}

func (x *MarkKeyshareForDepositAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkKeyshareForDepositAddressRequest.ProtoReflect.Descriptor instead.
func (*MarkKeyshareForDepositAddressRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{1}
}

func (x *MarkKeyshareForDepositAddressRequest) GetKeyshareId() string {
	if x != nil {
		return x.KeyshareId
	}
	return ""
}

func (x *MarkKeyshareForDepositAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type FrostRound1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyshareId string `protobuf:"bytes,1,opt,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
}

func (x *FrostRound1Request) Reset() {
	*x = FrostRound1Request{}
	mi := &file_spark_internal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound1Request) ProtoMessage() {}

func (x *FrostRound1Request) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound1Request.ProtoReflect.Descriptor instead.
func (*FrostRound1Request) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{2}
}

func (x *FrostRound1Request) GetKeyshareId() string {
	if x != nil {
		return x.KeyshareId
	}
	return ""
}

type FrostRound1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigningCommitment *SigningCommitment `protobuf:"bytes,1,opt,name=signing_commitment,json=signingCommitment,proto3" json:"signing_commitment,omitempty"`
}

func (x *FrostRound1Response) Reset() {
	*x = FrostRound1Response{}
	mi := &file_spark_internal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound1Response) ProtoMessage() {}

func (x *FrostRound1Response) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound1Response.ProtoReflect.Descriptor instead.
func (*FrostRound1Response) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{3}
}

func (x *FrostRound1Response) GetSigningCommitment() *SigningCommitment {
	if x != nil {
		return x.SigningCommitment
	}
	return nil
}

type FrostRound2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message to sign.
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The secret package from DKG round 3.
	KeyshareId string `protobuf:"bytes,2,opt,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	// The verifying key. This should be the total public key for both user and StatechainEntity.
	VerifyingKey []byte `protobuf:"bytes,3,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
	// The commitments for all participants of the statechain.
	Commitments map[string]*SigningCommitment `protobuf:"bytes,4,rep,name=commitments,proto3" json:"commitments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The commitments for all participants of the user.
	UserCommitments *SigningCommitment `protobuf:"bytes,5,opt,name=user_commitments,json=userCommitments,proto3" json:"user_commitments,omitempty"`
}

func (x *FrostRound2Request) Reset() {
	*x = FrostRound2Request{}
	mi := &file_spark_internal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound2Request) ProtoMessage() {}

func (x *FrostRound2Request) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound2Request.ProtoReflect.Descriptor instead.
func (*FrostRound2Request) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{4}
}

func (x *FrostRound2Request) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FrostRound2Request) GetKeyshareId() string {
	if x != nil {
		return x.KeyshareId
	}
	return ""
}

func (x *FrostRound2Request) GetVerifyingKey() []byte {
	if x != nil {
		return x.VerifyingKey
	}
	return nil
}

func (x *FrostRound2Request) GetCommitments() map[string]*SigningCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *FrostRound2Request) GetUserCommitments() *SigningCommitment {
	if x != nil {
		return x.UserCommitments
	}
	return nil
}

type FrostRound2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureShare []byte `protobuf:"bytes,1,opt,name=signature_share,json=signatureShare,proto3" json:"signature_share,omitempty"`
}

func (x *FrostRound2Response) Reset() {
	*x = FrostRound2Response{}
	mi := &file_spark_internal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound2Response) ProtoMessage() {}

func (x *FrostRound2Response) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound2Response.ProtoReflect.Descriptor instead.
func (*FrostRound2Response) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{5}
}

func (x *FrostRound2Response) GetSignatureShare() []byte {
	if x != nil {
		return x.SignatureShare
	}
	return nil
}

var File_spark_internal_proto protoreflect.FileDescriptor

var file_spark_internal_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d, 0x0a, 0x1a, 0x4d, 0x61, 0x72, 0x6b, 0x4b,
	0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x41, 0x73, 0x55, 0x73, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x24, 0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65,
	0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x35, 0x0a, 0x12, 0x46, 0x72, 0x6f,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x22, 0x5e, 0x0a, 0x13, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xe1, 0x02, 0x0a, 0x12, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x58, 0x0a, 0x10, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x13, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x32, 0xeb, 0x02, 0x0a, 0x14, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a,
	0x16, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x12, 0x21, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x41, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x21, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6f,
	0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31,
	0x12, 0x19, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x12, 0x19, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x46, 0x72, 0x6f,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x64, 0x65, 0x76, 0x2f, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spark_internal_proto_rawDescOnce sync.Once
	file_spark_internal_proto_rawDescData = file_spark_internal_proto_rawDesc
)

func file_spark_internal_proto_rawDescGZIP() []byte {
	file_spark_internal_proto_rawDescOnce.Do(func() {
		file_spark_internal_proto_rawDescData = protoimpl.X.CompressGZIP(file_spark_internal_proto_rawDescData)
	})
	return file_spark_internal_proto_rawDescData
}

var file_spark_internal_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_spark_internal_proto_goTypes = []any{
	(*MarkKeysharesAsUsedRequest)(nil),           // 0: spark.MarkKeysharesAsUsedRequest
	(*MarkKeyshareForDepositAddressRequest)(nil), // 1: spark.MarkKeyshareForDepositAddressRequest
	(*FrostRound1Request)(nil),                   // 2: spark.FrostRound1Request
	(*FrostRound1Response)(nil),                  // 3: spark.FrostRound1Response
	(*FrostRound2Request)(nil),                   // 4: spark.FrostRound2Request
	(*FrostRound2Response)(nil),                  // 5: spark.FrostRound2Response
	nil,                                          // 6: spark.FrostRound2Request.CommitmentsEntry
	(*SigningCommitment)(nil),                    // 7: frost.SigningCommitment
	(*emptypb.Empty)(nil),                        // 8: google.protobuf.Empty
}
var file_spark_internal_proto_depIdxs = []int32{
	7, // 0: spark.FrostRound1Response.signing_commitment:type_name -> frost.SigningCommitment
	6, // 1: spark.FrostRound2Request.commitments:type_name -> spark.FrostRound2Request.CommitmentsEntry
	7, // 2: spark.FrostRound2Request.user_commitments:type_name -> frost.SigningCommitment
	7, // 3: spark.FrostRound2Request.CommitmentsEntry.value:type_name -> frost.SigningCommitment
	0, // 4: spark.SparkInternalService.mark_keyshares_as_used:input_type -> spark.MarkKeysharesAsUsedRequest
	1, // 5: spark.SparkInternalService.mark_keyshare_for_deposit_address:input_type -> spark.MarkKeyshareForDepositAddressRequest
	2, // 6: spark.SparkInternalService.frost_round1:input_type -> spark.FrostRound1Request
	4, // 7: spark.SparkInternalService.frost_round2:input_type -> spark.FrostRound2Request
	8, // 8: spark.SparkInternalService.mark_keyshares_as_used:output_type -> google.protobuf.Empty
	8, // 9: spark.SparkInternalService.mark_keyshare_for_deposit_address:output_type -> google.protobuf.Empty
	3, // 10: spark.SparkInternalService.frost_round1:output_type -> spark.FrostRound1Response
	5, // 11: spark.SparkInternalService.frost_round2:output_type -> spark.FrostRound2Response
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_spark_internal_proto_init() }
func file_spark_internal_proto_init() {
	if File_spark_internal_proto != nil {
		return
	}
	file_frost_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spark_internal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spark_internal_proto_goTypes,
		DependencyIndexes: file_spark_internal_proto_depIdxs,
		MessageInfos:      file_spark_internal_proto_msgTypes,
	}.Build()
	File_spark_internal_proto = out.File
	file_spark_internal_proto_rawDesc = nil
	file_spark_internal_proto_goTypes = nil
	file_spark_internal_proto_depIdxs = nil
}
