// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v4.23.4
// source: frost.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EchoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	mi := &file_frost_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{0}
}

func (x *EchoRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type EchoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EchoResponse) Reset() {
	*x = EchoResponse{}
	mi := &file_frost_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResponse) ProtoMessage() {}

func (x *EchoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResponse.ProtoReflect.Descriptor instead.
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{1}
}

func (x *EchoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Distributed Key Generation Round 1 Request
//
// This request is sent to the server to start the Distributed Key Generation
// protocol. This will be a batch request, so the server will generate the
// keys for all participants in the batch.
type DkgRound1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the participant, this will be used as the index of the Shamir secret share. The
	// value should be not be 0. This is a hex string.
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The maximum number of signers, this is the size of the threshold signature scheme.
	MaxSigners uint64 `protobuf:"varint,2,opt,name=max_signers,json=maxSigners,proto3" json:"max_signers,omitempty"`
	// The minimum number of signers, this is the threshold for the threshold signature scheme.
	MinSigners uint64 `protobuf:"varint,3,opt,name=min_signers,json=minSigners,proto3" json:"min_signers,omitempty"`
	// The number of keys to generate.
	KeyCount uint64 `protobuf:"varint,4,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
}

func (x *DkgRound1Request) Reset() {
	*x = DkgRound1Request{}
	mi := &file_frost_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound1Request) ProtoMessage() {}

func (x *DkgRound1Request) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound1Request.ProtoReflect.Descriptor instead.
func (*DkgRound1Request) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{2}
}

func (x *DkgRound1Request) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *DkgRound1Request) GetMaxSigners() uint64 {
	if x != nil {
		return x.MaxSigners
	}
	return 0
}

func (x *DkgRound1Request) GetMinSigners() uint64 {
	if x != nil {
		return x.MinSigners
	}
	return 0
}

func (x *DkgRound1Request) GetKeyCount() uint64 {
	if x != nil {
		return x.KeyCount
	}
	return 0
}

// Distributed Key Generation Round 1 Response
//
// This response is sent from the server to the client after the Distributed Key Generation
// protocol has been completed.
type DkgRound1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The packages for the participants. This will be sent to all participants and will be used for
	// the next round.
	Round1Packages [][]byte `protobuf:"bytes,1,rep,name=round1_packages,json=round1Packages,proto3" json:"round1_packages,omitempty"`
}

func (x *DkgRound1Response) Reset() {
	*x = DkgRound1Response{}
	mi := &file_frost_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound1Response) ProtoMessage() {}

func (x *DkgRound1Response) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound1Response.ProtoReflect.Descriptor instead.
func (*DkgRound1Response) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{3}
}

func (x *DkgRound1Response) GetRound1Packages() [][]byte {
	if x != nil {
		return x.Round1Packages
	}
	return nil
}

// A map of participant identifiers to their serialized round1 packages.
type PackageMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map of participant identifiers to their serialized packages.
	Packages map[string][]byte `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PackageMap) Reset() {
	*x = PackageMap{}
	mi := &file_frost_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackageMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageMap) ProtoMessage() {}

func (x *PackageMap) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageMap.ProtoReflect.Descriptor instead.
func (*PackageMap) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{4}
}

func (x *PackageMap) GetPackages() map[string][]byte {
	if x != nil {
		return x.Packages
	}
	return nil
}

// Distributed Key Generation Round 2 Request
//
// This request is sent to the server for the round 2 of DKG protocol.
// This will be a batch request.
type DkgRound2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of all participants' identifiers to their serialized round1 packages.
	Round1PackagesMaps []*PackageMap `protobuf:"bytes,1,rep,name=round1_packages_maps,json=round1PackagesMaps,proto3" json:"round1_packages_maps,omitempty"`
}

func (x *DkgRound2Request) Reset() {
	*x = DkgRound2Request{}
	mi := &file_frost_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound2Request) ProtoMessage() {}

func (x *DkgRound2Request) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound2Request.ProtoReflect.Descriptor instead.
func (*DkgRound2Request) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{5}
}

func (x *DkgRound2Request) GetRound1PackagesMaps() []*PackageMap {
	if x != nil {
		return x.Round1PackagesMaps
	}
	return nil
}

// Distributed Key Generation Round 2 Response
//
// This response is sent from the server to the client after the Distributed Key Generation
// protocol has been completed.
type DkgRound2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The serialized round2 packages.
	Round2Packages []*PackageMap `protobuf:"bytes,1,rep,name=round2_packages,json=round2Packages,proto3" json:"round2_packages,omitempty"`
}

func (x *DkgRound2Response) Reset() {
	*x = DkgRound2Response{}
	mi := &file_frost_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound2Response) ProtoMessage() {}

func (x *DkgRound2Response) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound2Response.ProtoReflect.Descriptor instead.
func (*DkgRound2Response) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{6}
}

func (x *DkgRound2Response) GetRound2Packages() []*PackageMap {
	if x != nil {
		return x.Round2Packages
	}
	return nil
}

// Distributed Key Generation Round 3 Request
//
// This request is sent to the server for the round 3 of DKG protocol.
type DkgRound3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of all participants' identifiers to their serialized round1 packages.
	Round1PackagesMaps []*PackageMap `protobuf:"bytes,1,rep,name=round1_packages_maps,json=round1PackagesMaps,proto3" json:"round1_packages_maps,omitempty"`
	// A map of all participants' identifiers to their serialized round2 packages.
	Round2PackagesMaps []*PackageMap `protobuf:"bytes,2,rep,name=round2_packages_maps,json=round2PackagesMaps,proto3" json:"round2_packages_maps,omitempty"`
}

func (x *DkgRound3Request) Reset() {
	*x = DkgRound3Request{}
	mi := &file_frost_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound3Request) ProtoMessage() {}

func (x *DkgRound3Request) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound3Request.ProtoReflect.Descriptor instead.
func (*DkgRound3Request) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{7}
}

func (x *DkgRound3Request) GetRound1PackagesMaps() []*PackageMap {
	if x != nil {
		return x.Round1PackagesMaps
	}
	return nil
}

func (x *DkgRound3Request) GetRound2PackagesMaps() []*PackageMap {
	if x != nil {
		return x.Round2PackagesMaps
	}
	return nil
}

// Distributed Key Generation Round 3 Response
//
// This response is sent from the server to the client after the Distributed Key Generation
// protocol has been completed.
type DkgRound3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The serialized secret packages.
	SecretPackages [][]byte `protobuf:"bytes,1,rep,name=secret_packages,json=secretPackages,proto3" json:"secret_packages,omitempty"`
	// The serialized public packages.
	PublicPackages [][]byte `protobuf:"bytes,2,rep,name=public_packages,json=publicPackages,proto3" json:"public_packages,omitempty"`
}

func (x *DkgRound3Response) Reset() {
	*x = DkgRound3Response{}
	mi := &file_frost_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DkgRound3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound3Response) ProtoMessage() {}

func (x *DkgRound3Response) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound3Response.ProtoReflect.Descriptor instead.
func (*DkgRound3Response) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{8}
}

func (x *DkgRound3Response) GetSecretPackages() [][]byte {
	if x != nil {
		return x.SecretPackages
	}
	return nil
}

func (x *DkgRound3Response) GetPublicPackages() [][]byte {
	if x != nil {
		return x.PublicPackages
	}
	return nil
}

type SignFrostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SignFrostRequest) Reset() {
	*x = SignFrostRequest{}
	mi := &file_frost_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignFrostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignFrostRequest) ProtoMessage() {}

func (x *SignFrostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignFrostRequest.ProtoReflect.Descriptor instead.
func (*SignFrostRequest) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{9}
}

func (x *SignFrostRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SignFrostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SignFrostResponse) Reset() {
	*x = SignFrostResponse{}
	mi := &file_frost_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignFrostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignFrostResponse) ProtoMessage() {}

func (x *SignFrostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignFrostResponse.ProtoReflect.Descriptor instead.
func (*SignFrostResponse) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{10}
}

func (x *SignFrostResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AggregateFrostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AggregateFrostRequest) Reset() {
	*x = AggregateFrostRequest{}
	mi := &file_frost_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateFrostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateFrostRequest) ProtoMessage() {}

func (x *AggregateFrostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateFrostRequest.ProtoReflect.Descriptor instead.
func (*AggregateFrostRequest) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{11}
}

func (x *AggregateFrostRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AggregateFrostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AggregateFrostResponse) Reset() {
	*x = AggregateFrostResponse{}
	mi := &file_frost_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateFrostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateFrostResponse) ProtoMessage() {}

func (x *AggregateFrostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frost_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateFrostResponse.ProtoReflect.Descriptor instead.
func (*AggregateFrostResponse) Descriptor() ([]byte, []int) {
	return file_frost_proto_rawDescGZIP(), []int{12}
}

func (x *AggregateFrostResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_frost_proto protoreflect.FileDescriptor

var file_frost_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66,
	0x72, 0x6f, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x0b, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x28, 0x0a,
	0x0c, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x44, 0x6b, 0x67, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x11, 0x44,
	0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x31, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x57, 0x0a, 0x10, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x73, 0x22, 0x4f, 0x0a, 0x11, 0x44,
	0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x0e, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x32, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a,
	0x10, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d,
	0x61, 0x70, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x73, 0x22, 0x65, 0x0a, 0x11, 0x44,
	0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x2c, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x2d, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x31, 0x0a, 0x15, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x9f, 0x03, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12,
	0x12, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x45, 0x63, 0x68, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x64, 0x6b,
	0x67, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x12, 0x17, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74,
	0x2e, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0a, 0x64, 0x6b, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x12, 0x17, 0x2e, 0x66, 0x72,
	0x6f, 0x73, 0x74, 0x2e, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x44, 0x6b, 0x67,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0a, 0x64, 0x6b, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x12, 0x17,
	0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e,
	0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x12, 0x17, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x72,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x66, 0x72, 0x6f, 0x73,
	0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frost_proto_rawDescOnce sync.Once
	file_frost_proto_rawDescData = file_frost_proto_rawDesc
)

func file_frost_proto_rawDescGZIP() []byte {
	file_frost_proto_rawDescOnce.Do(func() {
		file_frost_proto_rawDescData = protoimpl.X.CompressGZIP(file_frost_proto_rawDescData)
	})
	return file_frost_proto_rawDescData
}

var file_frost_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_frost_proto_goTypes = []any{
	(*EchoRequest)(nil),            // 0: frost.EchoRequest
	(*EchoResponse)(nil),           // 1: frost.EchoResponse
	(*DkgRound1Request)(nil),       // 2: frost.DkgRound1Request
	(*DkgRound1Response)(nil),      // 3: frost.DkgRound1Response
	(*PackageMap)(nil),             // 4: frost.PackageMap
	(*DkgRound2Request)(nil),       // 5: frost.DkgRound2Request
	(*DkgRound2Response)(nil),      // 6: frost.DkgRound2Response
	(*DkgRound3Request)(nil),       // 7: frost.DkgRound3Request
	(*DkgRound3Response)(nil),      // 8: frost.DkgRound3Response
	(*SignFrostRequest)(nil),       // 9: frost.SignFrostRequest
	(*SignFrostResponse)(nil),      // 10: frost.SignFrostResponse
	(*AggregateFrostRequest)(nil),  // 11: frost.AggregateFrostRequest
	(*AggregateFrostResponse)(nil), // 12: frost.AggregateFrostResponse
	nil,                            // 13: frost.PackageMap.PackagesEntry
}
var file_frost_proto_depIdxs = []int32{
	13, // 0: frost.PackageMap.packages:type_name -> frost.PackageMap.PackagesEntry
	4,  // 1: frost.DkgRound2Request.round1_packages_maps:type_name -> frost.PackageMap
	4,  // 2: frost.DkgRound2Response.round2_packages:type_name -> frost.PackageMap
	4,  // 3: frost.DkgRound3Request.round1_packages_maps:type_name -> frost.PackageMap
	4,  // 4: frost.DkgRound3Request.round2_packages_maps:type_name -> frost.PackageMap
	0,  // 5: frost.FrostService.echo:input_type -> frost.EchoRequest
	2,  // 6: frost.FrostService.dkg_round1:input_type -> frost.DkgRound1Request
	5,  // 7: frost.FrostService.dkg_round2:input_type -> frost.DkgRound2Request
	7,  // 8: frost.FrostService.dkg_round3:input_type -> frost.DkgRound3Request
	9,  // 9: frost.FrostService.sign_frost:input_type -> frost.SignFrostRequest
	11, // 10: frost.FrostService.aggregate_frost:input_type -> frost.AggregateFrostRequest
	1,  // 11: frost.FrostService.echo:output_type -> frost.EchoResponse
	3,  // 12: frost.FrostService.dkg_round1:output_type -> frost.DkgRound1Response
	6,  // 13: frost.FrostService.dkg_round2:output_type -> frost.DkgRound2Response
	8,  // 14: frost.FrostService.dkg_round3:output_type -> frost.DkgRound3Response
	10, // 15: frost.FrostService.sign_frost:output_type -> frost.SignFrostResponse
	12, // 16: frost.FrostService.aggregate_frost:output_type -> frost.AggregateFrostResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_frost_proto_init() }
func file_frost_proto_init() {
	if File_frost_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frost_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_frost_proto_goTypes,
		DependencyIndexes: file_frost_proto_depIdxs,
		MessageInfos:      file_frost_proto_msgTypes,
	}.Build()
	File_frost_proto = out.File
	file_frost_proto_rawDesc = nil
	file_frost_proto_goTypes = nil
	file_frost_proto_depIdxs = nil
}
