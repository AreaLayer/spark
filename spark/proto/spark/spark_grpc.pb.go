// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: spark.proto

package spark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SparkService_GenerateDepositAddress_FullMethodName   = "/spark.SparkService/generate_deposit_address"
	SparkService_StartTreeCreation_FullMethodName        = "/spark.SparkService/start_tree_creation"
	SparkService_PrepareSplitAddress_FullMethodName      = "/spark.SparkService/prepare_split_address"
	SparkService_SplitNode_FullMethodName                = "/spark.SparkService/split_node"
	SparkService_FinalizeNodeSignatures_FullMethodName   = "/spark.SparkService/finalize_node_signatures"
	SparkService_SendTransfer_FullMethodName             = "/spark.SparkService/send_transfer"
	SparkService_QueryPendingTransfers_FullMethodName    = "/spark.SparkService/query_pending_transfers"
	SparkService_ClaimTransferTweakKeys_FullMethodName   = "/spark.SparkService/claim_transfer_tweak_keys"
	SparkService_ClaimTransferSignRefunds_FullMethodName = "/spark.SparkService/claim_transfer_sign_refunds"
	SparkService_AggregateNodes_FullMethodName           = "/spark.SparkService/aggregate_nodes"
)

// SparkServiceClient is the client API for SparkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SparkServiceClient interface {
	GenerateDepositAddress(ctx context.Context, in *GenerateDepositAddressRequest, opts ...grpc.CallOption) (*GenerateDepositAddressResponse, error)
	StartTreeCreation(ctx context.Context, in *StartTreeCreationRequest, opts ...grpc.CallOption) (*StartTreeCreationResponse, error)
	PrepareSplitAddress(ctx context.Context, in *PrepareSplitAddressRequest, opts ...grpc.CallOption) (*PrepareSplitAddressResponse, error)
	SplitNode(ctx context.Context, in *SplitNodeRequest, opts ...grpc.CallOption) (*SplitNodeResponse, error)
	FinalizeNodeSignatures(ctx context.Context, in *FinalizeNodeSignaturesRequest, opts ...grpc.CallOption) (*FinalizeNodeSignaturesResponse, error)
	SendTransfer(ctx context.Context, in *SendTransferRequest, opts ...grpc.CallOption) (*SendTransferResponse, error)
	QueryPendingTransfers(ctx context.Context, in *QueryPendingTransfersRequest, opts ...grpc.CallOption) (*QueryPendingTransfersResponse, error)
	ClaimTransferTweakKeys(ctx context.Context, in *ClaimTransferTweakKeysRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClaimTransferSignRefunds(ctx context.Context, in *ClaimTransferSignRefundsRequest, opts ...grpc.CallOption) (*ClaimTransferSignRefundsResponse, error)
	AggregateNodes(ctx context.Context, in *AggregateNodesRequest, opts ...grpc.CallOption) (*AggregateNodesResponse, error)
}

type sparkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSparkServiceClient(cc grpc.ClientConnInterface) SparkServiceClient {
	return &sparkServiceClient{cc}
}

func (c *sparkServiceClient) GenerateDepositAddress(ctx context.Context, in *GenerateDepositAddressRequest, opts ...grpc.CallOption) (*GenerateDepositAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateDepositAddressResponse)
	err := c.cc.Invoke(ctx, SparkService_GenerateDepositAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) StartTreeCreation(ctx context.Context, in *StartTreeCreationRequest, opts ...grpc.CallOption) (*StartTreeCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTreeCreationResponse)
	err := c.cc.Invoke(ctx, SparkService_StartTreeCreation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) PrepareSplitAddress(ctx context.Context, in *PrepareSplitAddressRequest, opts ...grpc.CallOption) (*PrepareSplitAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareSplitAddressResponse)
	err := c.cc.Invoke(ctx, SparkService_PrepareSplitAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) SplitNode(ctx context.Context, in *SplitNodeRequest, opts ...grpc.CallOption) (*SplitNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SplitNodeResponse)
	err := c.cc.Invoke(ctx, SparkService_SplitNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) FinalizeNodeSignatures(ctx context.Context, in *FinalizeNodeSignaturesRequest, opts ...grpc.CallOption) (*FinalizeNodeSignaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeNodeSignaturesResponse)
	err := c.cc.Invoke(ctx, SparkService_FinalizeNodeSignatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) SendTransfer(ctx context.Context, in *SendTransferRequest, opts ...grpc.CallOption) (*SendTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendTransferResponse)
	err := c.cc.Invoke(ctx, SparkService_SendTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) QueryPendingTransfers(ctx context.Context, in *QueryPendingTransfersRequest, opts ...grpc.CallOption) (*QueryPendingTransfersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPendingTransfersResponse)
	err := c.cc.Invoke(ctx, SparkService_QueryPendingTransfers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) ClaimTransferTweakKeys(ctx context.Context, in *ClaimTransferTweakKeysRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkService_ClaimTransferTweakKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) ClaimTransferSignRefunds(ctx context.Context, in *ClaimTransferSignRefundsRequest, opts ...grpc.CallOption) (*ClaimTransferSignRefundsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimTransferSignRefundsResponse)
	err := c.cc.Invoke(ctx, SparkService_ClaimTransferSignRefunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) AggregateNodes(ctx context.Context, in *AggregateNodesRequest, opts ...grpc.CallOption) (*AggregateNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AggregateNodesResponse)
	err := c.cc.Invoke(ctx, SparkService_AggregateNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SparkServiceServer is the server API for SparkService service.
// All implementations must embed UnimplementedSparkServiceServer
// for forward compatibility.
type SparkServiceServer interface {
	GenerateDepositAddress(context.Context, *GenerateDepositAddressRequest) (*GenerateDepositAddressResponse, error)
	StartTreeCreation(context.Context, *StartTreeCreationRequest) (*StartTreeCreationResponse, error)
	PrepareSplitAddress(context.Context, *PrepareSplitAddressRequest) (*PrepareSplitAddressResponse, error)
	SplitNode(context.Context, *SplitNodeRequest) (*SplitNodeResponse, error)
	FinalizeNodeSignatures(context.Context, *FinalizeNodeSignaturesRequest) (*FinalizeNodeSignaturesResponse, error)
	SendTransfer(context.Context, *SendTransferRequest) (*SendTransferResponse, error)
	QueryPendingTransfers(context.Context, *QueryPendingTransfersRequest) (*QueryPendingTransfersResponse, error)
	ClaimTransferTweakKeys(context.Context, *ClaimTransferTweakKeysRequest) (*emptypb.Empty, error)
	ClaimTransferSignRefunds(context.Context, *ClaimTransferSignRefundsRequest) (*ClaimTransferSignRefundsResponse, error)
	AggregateNodes(context.Context, *AggregateNodesRequest) (*AggregateNodesResponse, error)
	mustEmbedUnimplementedSparkServiceServer()
}

// UnimplementedSparkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSparkServiceServer struct{}

func (UnimplementedSparkServiceServer) GenerateDepositAddress(context.Context, *GenerateDepositAddressRequest) (*GenerateDepositAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDepositAddress not implemented")
}
func (UnimplementedSparkServiceServer) StartTreeCreation(context.Context, *StartTreeCreationRequest) (*StartTreeCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTreeCreation not implemented")
}
func (UnimplementedSparkServiceServer) PrepareSplitAddress(context.Context, *PrepareSplitAddressRequest) (*PrepareSplitAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareSplitAddress not implemented")
}
func (UnimplementedSparkServiceServer) SplitNode(context.Context, *SplitNodeRequest) (*SplitNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitNode not implemented")
}
func (UnimplementedSparkServiceServer) FinalizeNodeSignatures(context.Context, *FinalizeNodeSignaturesRequest) (*FinalizeNodeSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeNodeSignatures not implemented")
}
func (UnimplementedSparkServiceServer) SendTransfer(context.Context, *SendTransferRequest) (*SendTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransfer not implemented")
}
func (UnimplementedSparkServiceServer) QueryPendingTransfers(context.Context, *QueryPendingTransfersRequest) (*QueryPendingTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPendingTransfers not implemented")
}
func (UnimplementedSparkServiceServer) ClaimTransferTweakKeys(context.Context, *ClaimTransferTweakKeysRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTransferTweakKeys not implemented")
}
func (UnimplementedSparkServiceServer) ClaimTransferSignRefunds(context.Context, *ClaimTransferSignRefundsRequest) (*ClaimTransferSignRefundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTransferSignRefunds not implemented")
}
func (UnimplementedSparkServiceServer) AggregateNodes(context.Context, *AggregateNodesRequest) (*AggregateNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateNodes not implemented")
}
func (UnimplementedSparkServiceServer) mustEmbedUnimplementedSparkServiceServer() {}
func (UnimplementedSparkServiceServer) testEmbeddedByValue()                      {}

// UnsafeSparkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SparkServiceServer will
// result in compilation errors.
type UnsafeSparkServiceServer interface {
	mustEmbedUnimplementedSparkServiceServer()
}

func RegisterSparkServiceServer(s grpc.ServiceRegistrar, srv SparkServiceServer) {
	// If the following call pancis, it indicates UnimplementedSparkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SparkService_ServiceDesc, srv)
}

func _SparkService_GenerateDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).GenerateDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_GenerateDepositAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).GenerateDepositAddress(ctx, req.(*GenerateDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_StartTreeCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTreeCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).StartTreeCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_StartTreeCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).StartTreeCreation(ctx, req.(*StartTreeCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_PrepareSplitAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareSplitAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).PrepareSplitAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_PrepareSplitAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).PrepareSplitAddress(ctx, req.(*PrepareSplitAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_SplitNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).SplitNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_SplitNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).SplitNode(ctx, req.(*SplitNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_FinalizeNodeSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeNodeSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).FinalizeNodeSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_FinalizeNodeSignatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).FinalizeNodeSignatures(ctx, req.(*FinalizeNodeSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_SendTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).SendTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_SendTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).SendTransfer(ctx, req.(*SendTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_QueryPendingTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueryPendingTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_QueryPendingTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueryPendingTransfers(ctx, req.(*QueryPendingTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_ClaimTransferTweakKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTransferTweakKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).ClaimTransferTweakKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_ClaimTransferTweakKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).ClaimTransferTweakKeys(ctx, req.(*ClaimTransferTweakKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_ClaimTransferSignRefunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTransferSignRefundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).ClaimTransferSignRefunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_ClaimTransferSignRefunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).ClaimTransferSignRefunds(ctx, req.(*ClaimTransferSignRefundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_AggregateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).AggregateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_AggregateNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).AggregateNodes(ctx, req.(*AggregateNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SparkService_ServiceDesc is the grpc.ServiceDesc for SparkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SparkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spark.SparkService",
	HandlerType: (*SparkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "generate_deposit_address",
			Handler:    _SparkService_GenerateDepositAddress_Handler,
		},
		{
			MethodName: "start_tree_creation",
			Handler:    _SparkService_StartTreeCreation_Handler,
		},
		{
			MethodName: "prepare_split_address",
			Handler:    _SparkService_PrepareSplitAddress_Handler,
		},
		{
			MethodName: "split_node",
			Handler:    _SparkService_SplitNode_Handler,
		},
		{
			MethodName: "finalize_node_signatures",
			Handler:    _SparkService_FinalizeNodeSignatures_Handler,
		},
		{
			MethodName: "send_transfer",
			Handler:    _SparkService_SendTransfer_Handler,
		},
		{
			MethodName: "query_pending_transfers",
			Handler:    _SparkService_QueryPendingTransfers_Handler,
		},
		{
			MethodName: "claim_transfer_tweak_keys",
			Handler:    _SparkService_ClaimTransferTweakKeys_Handler,
		},
		{
			MethodName: "claim_transfer_sign_refunds",
			Handler:    _SparkService_ClaimTransferSignRefunds_Handler,
		},
		{
			MethodName: "aggregate_nodes",
			Handler:    _SparkService_AggregateNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spark.proto",
}
