// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: spark.proto

package spark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SparkService_GenerateDepositAddress_FullMethodName = "/spark.SparkService/generate_deposit_address"
	SparkService_StartTreeCreation_FullMethodName      = "/spark.SparkService/start_tree_creation"
	SparkService_CompleteTreeCreation_FullMethodName   = "/spark.SparkService/complete_tree_creation"
	SparkService_SplitNode_FullMethodName              = "/spark.SparkService/split_node"
	SparkService_FinalizeSplit_FullMethodName          = "/spark.SparkService/finalize_split"
)

// SparkServiceClient is the client API for SparkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SparkServiceClient interface {
	GenerateDepositAddress(ctx context.Context, in *GenerateDepositAddressRequest, opts ...grpc.CallOption) (*GenerateDepositAddressResponse, error)
	StartTreeCreation(ctx context.Context, in *StartTreeCreationRequest, opts ...grpc.CallOption) (*StartTreeCreationResponse, error)
	CompleteTreeCreation(ctx context.Context, in *CompleteTreeCreationRequest, opts ...grpc.CallOption) (*CompleteTreeCreationResponse, error)
	SplitNode(ctx context.Context, in *SplitNodeRequest, opts ...grpc.CallOption) (*SplitNodeResponse, error)
	FinalizeSplit(ctx context.Context, in *FinalizeSplitRequest, opts ...grpc.CallOption) (*FinalizeSplitResponse, error)
}

type sparkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSparkServiceClient(cc grpc.ClientConnInterface) SparkServiceClient {
	return &sparkServiceClient{cc}
}

func (c *sparkServiceClient) GenerateDepositAddress(ctx context.Context, in *GenerateDepositAddressRequest, opts ...grpc.CallOption) (*GenerateDepositAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateDepositAddressResponse)
	err := c.cc.Invoke(ctx, SparkService_GenerateDepositAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) StartTreeCreation(ctx context.Context, in *StartTreeCreationRequest, opts ...grpc.CallOption) (*StartTreeCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTreeCreationResponse)
	err := c.cc.Invoke(ctx, SparkService_StartTreeCreation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) CompleteTreeCreation(ctx context.Context, in *CompleteTreeCreationRequest, opts ...grpc.CallOption) (*CompleteTreeCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteTreeCreationResponse)
	err := c.cc.Invoke(ctx, SparkService_CompleteTreeCreation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) SplitNode(ctx context.Context, in *SplitNodeRequest, opts ...grpc.CallOption) (*SplitNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SplitNodeResponse)
	err := c.cc.Invoke(ctx, SparkService_SplitNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) FinalizeSplit(ctx context.Context, in *FinalizeSplitRequest, opts ...grpc.CallOption) (*FinalizeSplitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinalizeSplitResponse)
	err := c.cc.Invoke(ctx, SparkService_FinalizeSplit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SparkServiceServer is the server API for SparkService service.
// All implementations must embed UnimplementedSparkServiceServer
// for forward compatibility.
type SparkServiceServer interface {
	GenerateDepositAddress(context.Context, *GenerateDepositAddressRequest) (*GenerateDepositAddressResponse, error)
	StartTreeCreation(context.Context, *StartTreeCreationRequest) (*StartTreeCreationResponse, error)
	CompleteTreeCreation(context.Context, *CompleteTreeCreationRequest) (*CompleteTreeCreationResponse, error)
	SplitNode(context.Context, *SplitNodeRequest) (*SplitNodeResponse, error)
	FinalizeSplit(context.Context, *FinalizeSplitRequest) (*FinalizeSplitResponse, error)
	mustEmbedUnimplementedSparkServiceServer()
}

// UnimplementedSparkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSparkServiceServer struct{}

func (UnimplementedSparkServiceServer) GenerateDepositAddress(context.Context, *GenerateDepositAddressRequest) (*GenerateDepositAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDepositAddress not implemented")
}
func (UnimplementedSparkServiceServer) StartTreeCreation(context.Context, *StartTreeCreationRequest) (*StartTreeCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTreeCreation not implemented")
}
func (UnimplementedSparkServiceServer) CompleteTreeCreation(context.Context, *CompleteTreeCreationRequest) (*CompleteTreeCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTreeCreation not implemented")
}
func (UnimplementedSparkServiceServer) SplitNode(context.Context, *SplitNodeRequest) (*SplitNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitNode not implemented")
}
func (UnimplementedSparkServiceServer) FinalizeSplit(context.Context, *FinalizeSplitRequest) (*FinalizeSplitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeSplit not implemented")
}
func (UnimplementedSparkServiceServer) mustEmbedUnimplementedSparkServiceServer() {}
func (UnimplementedSparkServiceServer) testEmbeddedByValue()                      {}

// UnsafeSparkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SparkServiceServer will
// result in compilation errors.
type UnsafeSparkServiceServer interface {
	mustEmbedUnimplementedSparkServiceServer()
}

func RegisterSparkServiceServer(s grpc.ServiceRegistrar, srv SparkServiceServer) {
	// If the following call pancis, it indicates UnimplementedSparkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SparkService_ServiceDesc, srv)
}

func _SparkService_GenerateDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).GenerateDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_GenerateDepositAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).GenerateDepositAddress(ctx, req.(*GenerateDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_StartTreeCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTreeCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).StartTreeCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_StartTreeCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).StartTreeCreation(ctx, req.(*StartTreeCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_CompleteTreeCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTreeCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).CompleteTreeCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_CompleteTreeCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).CompleteTreeCreation(ctx, req.(*CompleteTreeCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_SplitNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).SplitNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_SplitNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).SplitNode(ctx, req.(*SplitNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_FinalizeSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeSplitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).FinalizeSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkService_FinalizeSplit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).FinalizeSplit(ctx, req.(*FinalizeSplitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SparkService_ServiceDesc is the grpc.ServiceDesc for SparkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SparkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spark.SparkService",
	HandlerType: (*SparkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "generate_deposit_address",
			Handler:    _SparkService_GenerateDepositAddress_Handler,
		},
		{
			MethodName: "start_tree_creation",
			Handler:    _SparkService_StartTreeCreation_Handler,
		},
		{
			MethodName: "complete_tree_creation",
			Handler:    _SparkService_CompleteTreeCreation_Handler,
		},
		{
			MethodName: "split_node",
			Handler:    _SparkService_SplitNode_Handler,
		},
		{
			MethodName: "finalize_split",
			Handler:    _SparkService_FinalizeSplit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spark.proto",
}
