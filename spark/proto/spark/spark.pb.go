// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0
// source: spark.proto

package spark

import (
	common "github.com/lightsparkdev/spark-go/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransferStatus int32

const (
	TransferStatus_TRANSFER_STATUS_INITIATED TransferStatus = 0
	TransferStatus_TRANSFER_STATUS_COMPLETED TransferStatus = 1
	TransferStatus_TRANSFER_STATUS_CLAIMING  TransferStatus = 2
	TransferStatus_TRANSFER_STATUS_EXPIRED   TransferStatus = 3
)

// Enum value maps for TransferStatus.
var (
	TransferStatus_name = map[int32]string{
		0: "TRANSFER_STATUS_INITIATED",
		1: "TRANSFER_STATUS_COMPLETED",
		2: "TRANSFER_STATUS_CLAIMING",
		3: "TRANSFER_STATUS_EXPIRED",
	}
	TransferStatus_value = map[string]int32{
		"TRANSFER_STATUS_INITIATED": 0,
		"TRANSFER_STATUS_COMPLETED": 1,
		"TRANSFER_STATUS_CLAIMING":  2,
		"TRANSFER_STATUS_EXPIRED":   3,
	}
)

func (x TransferStatus) Enum() *TransferStatus {
	p := new(TransferStatus)
	*p = x
	return p
}

func (x TransferStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_spark_proto_enumTypes[0].Descriptor()
}

func (TransferStatus) Type() protoreflect.EnumType {
	return &file_spark_proto_enumTypes[0]
}

func (x TransferStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferStatus.Descriptor instead.
func (TransferStatus) EnumDescriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{0}
}

type GenerateDepositAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigningPublicKey  []byte `protobuf:"bytes,1,opt,name=signing_public_key,json=signingPublicKey,proto3" json:"signing_public_key,omitempty"`
	IdentityPublicKey []byte `protobuf:"bytes,2,opt,name=identity_public_key,json=identityPublicKey,proto3" json:"identity_public_key,omitempty"`
}

func (x *GenerateDepositAddressRequest) Reset() {
	*x = GenerateDepositAddressRequest{}
	mi := &file_spark_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateDepositAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDepositAddressRequest) ProtoMessage() {}

func (x *GenerateDepositAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDepositAddressRequest.ProtoReflect.Descriptor instead.
func (*GenerateDepositAddressRequest) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateDepositAddressRequest) GetSigningPublicKey() []byte {
	if x != nil {
		return x.SigningPublicKey
	}
	return nil
}

func (x *GenerateDepositAddressRequest) GetIdentityPublicKey() []byte {
	if x != nil {
		return x.IdentityPublicKey
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	VerifyingKey []byte `protobuf:"bytes,2,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_spark_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{1}
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Address) GetVerifyingKey() []byte {
	if x != nil {
		return x.VerifyingKey
	}
	return nil
}

type GenerateDepositAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepositAddress *Address `protobuf:"bytes,1,opt,name=deposit_address,json=depositAddress,proto3" json:"deposit_address,omitempty"`
}

func (x *GenerateDepositAddressResponse) Reset() {
	*x = GenerateDepositAddressResponse{}
	mi := &file_spark_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateDepositAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDepositAddressResponse) ProtoMessage() {}

func (x *GenerateDepositAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDepositAddressResponse.ProtoReflect.Descriptor instead.
func (*GenerateDepositAddressResponse) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{2}
}

func (x *GenerateDepositAddressResponse) GetDepositAddress() *Address {
	if x != nil {
		return x.DepositAddress
	}
	return nil
}

type UTXO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout uint32 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
}

func (x *UTXO) Reset() {
	*x = UTXO{}
	mi := &file_spark_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UTXO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UTXO) ProtoMessage() {}

func (x *UTXO) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UTXO.ProtoReflect.Descriptor instead.
func (*UTXO) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{3}
}

func (x *UTXO) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *UTXO) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

type SigningJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigningPublicKey       []byte                    `protobuf:"bytes,1,opt,name=signing_public_key,json=signingPublicKey,proto3" json:"signing_public_key,omitempty"`
	RawTx                  []byte                    `protobuf:"bytes,2,opt,name=raw_tx,json=rawTx,proto3" json:"raw_tx,omitempty"`
	SigningNonceCommitment *common.SigningCommitment `protobuf:"bytes,3,opt,name=signing_nonce_commitment,json=signingNonceCommitment,proto3" json:"signing_nonce_commitment,omitempty"`
}

func (x *SigningJob) Reset() {
	*x = SigningJob{}
	mi := &file_spark_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningJob) ProtoMessage() {}

func (x *SigningJob) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningJob.ProtoReflect.Descriptor instead.
func (*SigningJob) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{4}
}

func (x *SigningJob) GetSigningPublicKey() []byte {
	if x != nil {
		return x.SigningPublicKey
	}
	return nil
}

func (x *SigningJob) GetRawTx() []byte {
	if x != nil {
		return x.RawTx
	}
	return nil
}

func (x *SigningJob) GetSigningNonceCommitment() *common.SigningCommitment {
	if x != nil {
		return x.SigningNonceCommitment
	}
	return nil
}

type SigningResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeys              map[string][]byte                    `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SigningNonceCommitments map[string]*common.SigningCommitment `protobuf:"bytes,2,rep,name=signing_nonce_commitments,json=signingNonceCommitments,proto3" json:"signing_nonce_commitments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SignatureShares         map[string][]byte                    `protobuf:"bytes,3,rep,name=signature_shares,json=signatureShares,proto3" json:"signature_shares,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SigningResult) Reset() {
	*x = SigningResult{}
	mi := &file_spark_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningResult) ProtoMessage() {}

func (x *SigningResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningResult.ProtoReflect.Descriptor instead.
func (*SigningResult) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{5}
}

func (x *SigningResult) GetPublicKeys() map[string][]byte {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *SigningResult) GetSigningNonceCommitments() map[string]*common.SigningCommitment {
	if x != nil {
		return x.SigningNonceCommitments
	}
	return nil
}

func (x *SigningResult) GetSignatureShares() map[string][]byte {
	if x != nil {
		return x.SignatureShares
	}
	return nil
}

type NodeSignatureShares struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId                string         `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeTxSigningResult   *SigningResult `protobuf:"bytes,2,opt,name=node_tx_signing_result,json=nodeTxSigningResult,proto3" json:"node_tx_signing_result,omitempty"`
	RefundTxSigningResult *SigningResult `protobuf:"bytes,3,opt,name=refund_tx_signing_result,json=refundTxSigningResult,proto3" json:"refund_tx_signing_result,omitempty"`
	VerifyingKey          []byte         `protobuf:"bytes,4,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
}

func (x *NodeSignatureShares) Reset() {
	*x = NodeSignatureShares{}
	mi := &file_spark_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeSignatureShares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSignatureShares) ProtoMessage() {}

func (x *NodeSignatureShares) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSignatureShares.ProtoReflect.Descriptor instead.
func (*NodeSignatureShares) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{6}
}

func (x *NodeSignatureShares) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeSignatureShares) GetNodeTxSigningResult() *SigningResult {
	if x != nil {
		return x.NodeTxSigningResult
	}
	return nil
}

func (x *NodeSignatureShares) GetRefundTxSigningResult() *SigningResult {
	if x != nil {
		return x.RefundTxSigningResult
	}
	return nil
}

func (x *NodeSignatureShares) GetVerifyingKey() []byte {
	if x != nil {
		return x.VerifyingKey
	}
	return nil
}

type NodeSignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId            string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeTxSignature   []byte `protobuf:"bytes,2,opt,name=node_tx_signature,json=nodeTxSignature,proto3" json:"node_tx_signature,omitempty"`
	RefundTxSignature []byte `protobuf:"bytes,3,opt,name=refund_tx_signature,json=refundTxSignature,proto3" json:"refund_tx_signature,omitempty"`
}

func (x *NodeSignatures) Reset() {
	*x = NodeSignatures{}
	mi := &file_spark_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeSignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSignatures) ProtoMessage() {}

func (x *NodeSignatures) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSignatures.ProtoReflect.Descriptor instead.
func (*NodeSignatures) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{7}
}

func (x *NodeSignatures) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeSignatures) GetNodeTxSignature() []byte {
	if x != nil {
		return x.NodeTxSignature
	}
	return nil
}

func (x *NodeSignatures) GetRefundTxSignature() []byte {
	if x != nil {
		return x.RefundTxSignature
	}
	return nil
}

type StartTreeCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityPublicKey  []byte      `protobuf:"bytes,1,opt,name=identity_public_key,json=identityPublicKey,proto3" json:"identity_public_key,omitempty"`
	OnChainUtxo        *UTXO       `protobuf:"bytes,2,opt,name=on_chain_utxo,json=onChainUtxo,proto3" json:"on_chain_utxo,omitempty"`
	RootTxSigningJob   *SigningJob `protobuf:"bytes,3,opt,name=root_tx_signing_job,json=rootTxSigningJob,proto3" json:"root_tx_signing_job,omitempty"`
	RefundTxSigningJob *SigningJob `protobuf:"bytes,4,opt,name=refund_tx_signing_job,json=refundTxSigningJob,proto3" json:"refund_tx_signing_job,omitempty"`
}

func (x *StartTreeCreationRequest) Reset() {
	*x = StartTreeCreationRequest{}
	mi := &file_spark_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTreeCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTreeCreationRequest) ProtoMessage() {}

func (x *StartTreeCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTreeCreationRequest.ProtoReflect.Descriptor instead.
func (*StartTreeCreationRequest) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{8}
}

func (x *StartTreeCreationRequest) GetIdentityPublicKey() []byte {
	if x != nil {
		return x.IdentityPublicKey
	}
	return nil
}

func (x *StartTreeCreationRequest) GetOnChainUtxo() *UTXO {
	if x != nil {
		return x.OnChainUtxo
	}
	return nil
}

func (x *StartTreeCreationRequest) GetRootTxSigningJob() *SigningJob {
	if x != nil {
		return x.RootTxSigningJob
	}
	return nil
}

func (x *StartTreeCreationRequest) GetRefundTxSigningJob() *SigningJob {
	if x != nil {
		return x.RefundTxSigningJob
	}
	return nil
}

type StartTreeCreationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeId                  string               `protobuf:"bytes,1,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
	RootNodeSignatureShares *NodeSignatureShares `protobuf:"bytes,2,opt,name=root_node_signature_shares,json=rootNodeSignatureShares,proto3" json:"root_node_signature_shares,omitempty"`
}

func (x *StartTreeCreationResponse) Reset() {
	*x = StartTreeCreationResponse{}
	mi := &file_spark_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTreeCreationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTreeCreationResponse) ProtoMessage() {}

func (x *StartTreeCreationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTreeCreationResponse.ProtoReflect.Descriptor instead.
func (*StartTreeCreationResponse) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{9}
}

func (x *StartTreeCreationResponse) GetTreeId() string {
	if x != nil {
		return x.TreeId
	}
	return ""
}

func (x *StartTreeCreationResponse) GetRootNodeSignatureShares() *NodeSignatureShares {
	if x != nil {
		return x.RootNodeSignatureShares
	}
	return nil
}

type TreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TreeId       string  `protobuf:"bytes,2,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
	Value        uint64  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	ParentNodeId *string `protobuf:"bytes,4,opt,name=parent_node_id,json=parentNodeId,proto3,oneof" json:"parent_node_id,omitempty"`
	NodeTx       []byte  `protobuf:"bytes,5,opt,name=node_tx,json=nodeTx,proto3" json:"node_tx,omitempty"`
	RefundTx     []byte  `protobuf:"bytes,6,opt,name=refund_tx,json=refundTx,proto3" json:"refund_tx,omitempty"`
	Vout         uint32  `protobuf:"varint,7,opt,name=vout,proto3" json:"vout,omitempty"`
	VerifyingKey []byte  `protobuf:"bytes,8,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
}

func (x *TreeNode) Reset() {
	*x = TreeNode{}
	mi := &file_spark_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNode) ProtoMessage() {}

func (x *TreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNode.ProtoReflect.Descriptor instead.
func (*TreeNode) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{10}
}

func (x *TreeNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeNode) GetTreeId() string {
	if x != nil {
		return x.TreeId
	}
	return ""
}

func (x *TreeNode) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TreeNode) GetParentNodeId() string {
	if x != nil && x.ParentNodeId != nil {
		return *x.ParentNodeId
	}
	return ""
}

func (x *TreeNode) GetNodeTx() []byte {
	if x != nil {
		return x.NodeTx
	}
	return nil
}

func (x *TreeNode) GetRefundTx() []byte {
	if x != nil {
		return x.RefundTx
	}
	return nil
}

func (x *TreeNode) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *TreeNode) GetVerifyingKey() []byte {
	if x != nil {
		return x.VerifyingKey
	}
	return nil
}

type Split struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigningPublicKey []byte      `protobuf:"bytes,1,opt,name=signing_public_key,json=signingPublicKey,proto3" json:"signing_public_key,omitempty"`
	RefundSigningJob *SigningJob `protobuf:"bytes,2,opt,name=refund_signing_job,json=refundSigningJob,proto3" json:"refund_signing_job,omitempty"`
	Value            uint64      `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Vout             uint32      `protobuf:"varint,4,opt,name=vout,proto3" json:"vout,omitempty"`
}

func (x *Split) Reset() {
	*x = Split{}
	mi := &file_spark_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Split) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Split) ProtoMessage() {}

func (x *Split) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Split.ProtoReflect.Descriptor instead.
func (*Split) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{11}
}

func (x *Split) GetSigningPublicKey() []byte {
	if x != nil {
		return x.SigningPublicKey
	}
	return nil
}

func (x *Split) GetRefundSigningJob() *SigningJob {
	if x != nil {
		return x.RefundSigningJob
	}
	return nil
}

func (x *Split) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Split) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

type SplitNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId             string      `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ParentTxSigningJob *SigningJob `protobuf:"bytes,2,opt,name=parent_tx_signing_job,json=parentTxSigningJob,proto3" json:"parent_tx_signing_job,omitempty"`
	Splits             []*Split    `protobuf:"bytes,3,rep,name=splits,proto3" json:"splits,omitempty"`
}

func (x *SplitNodeRequest) Reset() {
	*x = SplitNodeRequest{}
	mi := &file_spark_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitNodeRequest) ProtoMessage() {}

func (x *SplitNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitNodeRequest.ProtoReflect.Descriptor instead.
func (*SplitNodeRequest) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{12}
}

func (x *SplitNodeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SplitNodeRequest) GetParentTxSigningJob() *SigningJob {
	if x != nil {
		return x.ParentTxSigningJob
	}
	return nil
}

func (x *SplitNodeRequest) GetSplits() []*Split {
	if x != nil {
		return x.Splits
	}
	return nil
}

type SplitResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId                string         `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	RefundTxSigningResult *SigningResult `protobuf:"bytes,2,opt,name=refund_tx_signing_result,json=refundTxSigningResult,proto3" json:"refund_tx_signing_result,omitempty"`
	VerifyingKey          []byte         `protobuf:"bytes,3,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
	UserPublicKey         []byte         `protobuf:"bytes,4,opt,name=user_public_key,json=userPublicKey,proto3" json:"user_public_key,omitempty"`
}

func (x *SplitResult) Reset() {
	*x = SplitResult{}
	mi := &file_spark_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitResult) ProtoMessage() {}

func (x *SplitResult) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitResult.ProtoReflect.Descriptor instead.
func (*SplitResult) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{13}
}

func (x *SplitResult) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SplitResult) GetRefundTxSigningResult() *SigningResult {
	if x != nil {
		return x.RefundTxSigningResult
	}
	return nil
}

func (x *SplitResult) GetVerifyingKey() []byte {
	if x != nil {
		return x.VerifyingKey
	}
	return nil
}

func (x *SplitResult) GetUserPublicKey() []byte {
	if x != nil {
		return x.UserPublicKey
	}
	return nil
}

type SplitNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentNodeId          string         `protobuf:"bytes,1,opt,name=parent_node_id,json=parentNodeId,proto3" json:"parent_node_id,omitempty"`
	ParentTxSigningResult *SigningResult `protobuf:"bytes,2,opt,name=parent_tx_signing_result,json=parentTxSigningResult,proto3" json:"parent_tx_signing_result,omitempty"`
	SplitResults          []*SplitResult `protobuf:"bytes,3,rep,name=split_results,json=splitResults,proto3" json:"split_results,omitempty"`
}

func (x *SplitNodeResponse) Reset() {
	*x = SplitNodeResponse{}
	mi := &file_spark_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitNodeResponse) ProtoMessage() {}

func (x *SplitNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitNodeResponse.ProtoReflect.Descriptor instead.
func (*SplitNodeResponse) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{14}
}

func (x *SplitNodeResponse) GetParentNodeId() string {
	if x != nil {
		return x.ParentNodeId
	}
	return ""
}

func (x *SplitNodeResponse) GetParentTxSigningResult() *SigningResult {
	if x != nil {
		return x.ParentTxSigningResult
	}
	return nil
}

func (x *SplitNodeResponse) GetSplitResults() []*SplitResult {
	if x != nil {
		return x.SplitResults
	}
	return nil
}

type FinalizeNodeSignaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intent         common.SignatureIntent `protobuf:"varint,1,opt,name=intent,proto3,enum=common.SignatureIntent" json:"intent,omitempty"`
	NodeSignatures []*NodeSignatures      `protobuf:"bytes,2,rep,name=node_signatures,json=nodeSignatures,proto3" json:"node_signatures,omitempty"`
}

func (x *FinalizeNodeSignaturesRequest) Reset() {
	*x = FinalizeNodeSignaturesRequest{}
	mi := &file_spark_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeNodeSignaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeNodeSignaturesRequest) ProtoMessage() {}

func (x *FinalizeNodeSignaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeNodeSignaturesRequest.ProtoReflect.Descriptor instead.
func (*FinalizeNodeSignaturesRequest) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{15}
}

func (x *FinalizeNodeSignaturesRequest) GetIntent() common.SignatureIntent {
	if x != nil {
		return x.Intent
	}
	return common.SignatureIntent(0)
}

func (x *FinalizeNodeSignaturesRequest) GetNodeSignatures() []*NodeSignatures {
	if x != nil {
		return x.NodeSignatures
	}
	return nil
}

type FinalizeNodeSignaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*TreeNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *FinalizeNodeSignaturesResponse) Reset() {
	*x = FinalizeNodeSignaturesResponse{}
	mi := &file_spark_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeNodeSignaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeNodeSignaturesResponse) ProtoMessage() {}

func (x *FinalizeNodeSignaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeNodeSignaturesResponse.ProtoReflect.Descriptor instead.
func (*FinalizeNodeSignaturesResponse) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{16}
}

func (x *FinalizeNodeSignaturesResponse) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type PrepareSplitAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId            string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	SigningPublicKeys [][]byte `protobuf:"bytes,2,rep,name=signing_public_keys,json=signingPublicKeys,proto3" json:"signing_public_keys,omitempty"`
}

func (x *PrepareSplitAddressRequest) Reset() {
	*x = PrepareSplitAddressRequest{}
	mi := &file_spark_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareSplitAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSplitAddressRequest) ProtoMessage() {}

func (x *PrepareSplitAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSplitAddressRequest.ProtoReflect.Descriptor instead.
func (*PrepareSplitAddressRequest) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{17}
}

func (x *PrepareSplitAddressRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PrepareSplitAddressRequest) GetSigningPublicKeys() [][]byte {
	if x != nil {
		return x.SigningPublicKeys
	}
	return nil
}

type PrepareSplitAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *PrepareSplitAddressResponse) Reset() {
	*x = PrepareSplitAddressResponse{}
	mi := &file_spark_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareSplitAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSplitAddressResponse) ProtoMessage() {}

func (x *PrepareSplitAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSplitAddressResponse.ProtoReflect.Descriptor instead.
func (*PrepareSplitAddressResponse) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{18}
}

func (x *PrepareSplitAddressResponse) GetAddresses() []*Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type SecretShareTweak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tweak  []byte   `protobuf:"bytes,1,opt,name=tweak,proto3" json:"tweak,omitempty"`
	Proofs [][]byte `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (x *SecretShareTweak) Reset() {
	*x = SecretShareTweak{}
	mi := &file_spark_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretShareTweak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretShareTweak) ProtoMessage() {}

func (x *SecretShareTweak) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretShareTweak.ProtoReflect.Descriptor instead.
func (*SecretShareTweak) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{19}
}

func (x *SecretShareTweak) GetTweak() []byte {
	if x != nil {
		return x.Tweak
	}
	return nil
}

func (x *SecretShareTweak) GetProofs() [][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

type SendLeafKeyTweak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeafId            string            `protobuf:"bytes,1,opt,name=leaf_id,json=leafId,proto3" json:"leaf_id,omitempty"`
	SecretShareTweak  *SecretShareTweak `protobuf:"bytes,2,opt,name=secret_share_tweak,json=secretShareTweak,proto3" json:"secret_share_tweak,omitempty"`
	PubkeySharesTweak map[string][]byte `protobuf:"bytes,3,rep,name=pubkey_shares_tweak,json=pubkeySharesTweak,proto3" json:"pubkey_shares_tweak,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecretCipher      []byte            `protobuf:"bytes,4,opt,name=secret_cipher,json=secretCipher,proto3" json:"secret_cipher,omitempty"`
	// Signature over Sha256(leaf_id||transfer_id||secret_cipher)
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SendLeafKeyTweak) Reset() {
	*x = SendLeafKeyTweak{}
	mi := &file_spark_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendLeafKeyTweak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLeafKeyTweak) ProtoMessage() {}

func (x *SendLeafKeyTweak) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLeafKeyTweak.ProtoReflect.Descriptor instead.
func (*SendLeafKeyTweak) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{20}
}

func (x *SendLeafKeyTweak) GetLeafId() string {
	if x != nil {
		return x.LeafId
	}
	return ""
}

func (x *SendLeafKeyTweak) GetSecretShareTweak() *SecretShareTweak {
	if x != nil {
		return x.SecretShareTweak
	}
	return nil
}

func (x *SendLeafKeyTweak) GetPubkeySharesTweak() map[string][]byte {
	if x != nil {
		return x.PubkeySharesTweak
	}
	return nil
}

func (x *SendLeafKeyTweak) GetSecretCipher() []byte {
	if x != nil {
		return x.SecretCipher
	}
	return nil
}

func (x *SendLeafKeyTweak) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SendTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId                string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	OwnerIdentityPublicKey    []byte                 `protobuf:"bytes,2,opt,name=owner_identity_public_key,json=ownerIdentityPublicKey,proto3" json:"owner_identity_public_key,omitempty"`
	LeavesToSend              []*SendLeafKeyTweak    `protobuf:"bytes,3,rep,name=leaves_to_send,json=leavesToSend,proto3" json:"leaves_to_send,omitempty"`
	ReceiverIdentityPublicKey []byte                 `protobuf:"bytes,4,opt,name=receiver_identity_public_key,json=receiverIdentityPublicKey,proto3" json:"receiver_identity_public_key,omitempty"`
	ExpiryTime                *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
}

func (x *SendTransferRequest) Reset() {
	*x = SendTransferRequest{}
	mi := &file_spark_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransferRequest) ProtoMessage() {}

func (x *SendTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransferRequest.ProtoReflect.Descriptor instead.
func (*SendTransferRequest) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{21}
}

func (x *SendTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *SendTransferRequest) GetOwnerIdentityPublicKey() []byte {
	if x != nil {
		return x.OwnerIdentityPublicKey
	}
	return nil
}

func (x *SendTransferRequest) GetLeavesToSend() []*SendLeafKeyTweak {
	if x != nil {
		return x.LeavesToSend
	}
	return nil
}

func (x *SendTransferRequest) GetReceiverIdentityPublicKey() []byte {
	if x != nil {
		return x.ReceiverIdentityPublicKey
	}
	return nil
}

func (x *SendTransferRequest) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderIdentityPublicKey   []byte                 `protobuf:"bytes,2,opt,name=sender_identity_public_key,json=senderIdentityPublicKey,proto3" json:"sender_identity_public_key,omitempty"`
	ReceiverIdentityPublicKey []byte                 `protobuf:"bytes,3,opt,name=receiver_identity_public_key,json=receiverIdentityPublicKey,proto3" json:"receiver_identity_public_key,omitempty"`
	Status                    TransferStatus         `protobuf:"varint,4,opt,name=status,proto3,enum=spark.TransferStatus" json:"status,omitempty"`
	TotalValue                uint64                 `protobuf:"varint,5,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	ExpiryTime                *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	Leaves                    []*TransferLeaf        `protobuf:"bytes,7,rep,name=leaves,proto3" json:"leaves,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	mi := &file_spark_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{22}
}

func (x *Transfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Transfer) GetSenderIdentityPublicKey() []byte {
	if x != nil {
		return x.SenderIdentityPublicKey
	}
	return nil
}

func (x *Transfer) GetReceiverIdentityPublicKey() []byte {
	if x != nil {
		return x.ReceiverIdentityPublicKey
	}
	return nil
}

func (x *Transfer) GetStatus() TransferStatus {
	if x != nil {
		return x.Status
	}
	return TransferStatus_TRANSFER_STATUS_INITIATED
}

func (x *Transfer) GetTotalValue() uint64 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

func (x *Transfer) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *Transfer) GetLeaves() []*TransferLeaf {
	if x != nil {
		return x.Leaves
	}
	return nil
}

type TransferLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeafId       string `protobuf:"bytes,1,opt,name=leaf_id,json=leafId,proto3" json:"leaf_id,omitempty"`
	SecretCipher []byte `protobuf:"bytes,2,opt,name=secret_cipher,json=secretCipher,proto3" json:"secret_cipher,omitempty"`
	Signature    []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *TransferLeaf) Reset() {
	*x = TransferLeaf{}
	mi := &file_spark_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferLeaf) ProtoMessage() {}

func (x *TransferLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferLeaf.ProtoReflect.Descriptor instead.
func (*TransferLeaf) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{23}
}

func (x *TransferLeaf) GetLeafId() string {
	if x != nil {
		return x.LeafId
	}
	return ""
}

func (x *TransferLeaf) GetSecretCipher() []byte {
	if x != nil {
		return x.SecretCipher
	}
	return nil
}

func (x *TransferLeaf) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SendTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfer *Transfer `protobuf:"bytes,1,opt,name=transfer,proto3" json:"transfer,omitempty"`
}

func (x *SendTransferResponse) Reset() {
	*x = SendTransferResponse{}
	mi := &file_spark_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTransferResponse) ProtoMessage() {}

func (x *SendTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTransferResponse.ProtoReflect.Descriptor instead.
func (*SendTransferResponse) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{24}
}

func (x *SendTransferResponse) GetTransfer() *Transfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

type QueryPendingTransfersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverIdentityPublicKey []byte `protobuf:"bytes,1,opt,name=receiver_identity_public_key,json=receiverIdentityPublicKey,proto3" json:"receiver_identity_public_key,omitempty"`
}

func (x *QueryPendingTransfersRequest) Reset() {
	*x = QueryPendingTransfersRequest{}
	mi := &file_spark_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPendingTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPendingTransfersRequest) ProtoMessage() {}

func (x *QueryPendingTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPendingTransfersRequest.ProtoReflect.Descriptor instead.
func (*QueryPendingTransfersRequest) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{25}
}

func (x *QueryPendingTransfersRequest) GetReceiverIdentityPublicKey() []byte {
	if x != nil {
		return x.ReceiverIdentityPublicKey
	}
	return nil
}

type QueryPendingTransfersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfers []*Transfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (x *QueryPendingTransfersResponse) Reset() {
	*x = QueryPendingTransfersResponse{}
	mi := &file_spark_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryPendingTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPendingTransfersResponse) ProtoMessage() {}

func (x *QueryPendingTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPendingTransfersResponse.ProtoReflect.Descriptor instead.
func (*QueryPendingTransfersResponse) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{26}
}

func (x *QueryPendingTransfersResponse) GetTransfers() []*Transfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type ClaimLeafKeyTweak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeafId            string            `protobuf:"bytes,1,opt,name=leaf_id,json=leafId,proto3" json:"leaf_id,omitempty"`
	SecretShareTweak  *SecretShareTweak `protobuf:"bytes,2,opt,name=secret_share_tweak,json=secretShareTweak,proto3" json:"secret_share_tweak,omitempty"`
	PubkeySharesTweak map[string][]byte `protobuf:"bytes,3,rep,name=pubkey_shares_tweak,json=pubkeySharesTweak,proto3" json:"pubkey_shares_tweak,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClaimLeafKeyTweak) Reset() {
	*x = ClaimLeafKeyTweak{}
	mi := &file_spark_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClaimLeafKeyTweak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimLeafKeyTweak) ProtoMessage() {}

func (x *ClaimLeafKeyTweak) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimLeafKeyTweak.ProtoReflect.Descriptor instead.
func (*ClaimLeafKeyTweak) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{27}
}

func (x *ClaimLeafKeyTweak) GetLeafId() string {
	if x != nil {
		return x.LeafId
	}
	return ""
}

func (x *ClaimLeafKeyTweak) GetSecretShareTweak() *SecretShareTweak {
	if x != nil {
		return x.SecretShareTweak
	}
	return nil
}

func (x *ClaimLeafKeyTweak) GetPubkeySharesTweak() map[string][]byte {
	if x != nil {
		return x.PubkeySharesTweak
	}
	return nil
}

type ClaimTransferTweakKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId             string               `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	OwnerIdentityPublicKey []byte               `protobuf:"bytes,2,opt,name=owner_identity_public_key,json=ownerIdentityPublicKey,proto3" json:"owner_identity_public_key,omitempty"`
	LeavesToReceive        []*ClaimLeafKeyTweak `protobuf:"bytes,3,rep,name=leaves_to_receive,json=leavesToReceive,proto3" json:"leaves_to_receive,omitempty"`
}

func (x *ClaimTransferTweakKeyRequest) Reset() {
	*x = ClaimTransferTweakKeyRequest{}
	mi := &file_spark_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClaimTransferTweakKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimTransferTweakKeyRequest) ProtoMessage() {}

func (x *ClaimTransferTweakKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimTransferTweakKeyRequest.ProtoReflect.Descriptor instead.
func (*ClaimTransferTweakKeyRequest) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{28}
}

func (x *ClaimTransferTweakKeyRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *ClaimTransferTweakKeyRequest) GetOwnerIdentityPublicKey() []byte {
	if x != nil {
		return x.OwnerIdentityPublicKey
	}
	return nil
}

func (x *ClaimTransferTweakKeyRequest) GetLeavesToReceive() []*ClaimLeafKeyTweak {
	if x != nil {
		return x.LeavesToReceive
	}
	return nil
}

type AggregateNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIds    []string    `protobuf:"bytes,1,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	SigningJob *SigningJob `protobuf:"bytes,2,opt,name=signing_job,json=signingJob,proto3" json:"signing_job,omitempty"`
	// Serves as a temporary identity public key, this should be get from auth process.
	OwnerIdentityPublicKey []byte `protobuf:"bytes,3,opt,name=owner_identity_public_key,json=ownerIdentityPublicKey,proto3" json:"owner_identity_public_key,omitempty"`
}

func (x *AggregateNodesRequest) Reset() {
	*x = AggregateNodesRequest{}
	mi := &file_spark_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateNodesRequest) ProtoMessage() {}

func (x *AggregateNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateNodesRequest.ProtoReflect.Descriptor instead.
func (*AggregateNodesRequest) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{29}
}

func (x *AggregateNodesRequest) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

func (x *AggregateNodesRequest) GetSigningJob() *SigningJob {
	if x != nil {
		return x.SigningJob
	}
	return nil
}

func (x *AggregateNodesRequest) GetOwnerIdentityPublicKey() []byte {
	if x != nil {
		return x.OwnerIdentityPublicKey
	}
	return nil
}

type AggregateNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregateSignature *SigningResult `protobuf:"bytes,1,opt,name=aggregate_signature,json=aggregateSignature,proto3" json:"aggregate_signature,omitempty"`
}

func (x *AggregateNodesResponse) Reset() {
	*x = AggregateNodesResponse{}
	mi := &file_spark_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateNodesResponse) ProtoMessage() {}

func (x *AggregateNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateNodesResponse.ProtoReflect.Descriptor instead.
func (*AggregateNodesResponse) Descriptor() ([]byte, []int) {
	return file_spark_proto_rawDescGZIP(), []int{30}
}

func (x *AggregateNodesResponse) GetAggregateSignature() *SigningResult {
	if x != nil {
		return x.AggregateSignature
	}
	return nil
}

var File_spark_proto protoreflect.FileDescriptor

var file_spark_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x7d, 0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22,
	0x48, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x59, 0x0a, 0x1e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x2e, 0x0a, 0x04, 0x55, 0x54, 0x58, 0x4f, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x76, 0x6f, 0x75, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4a, 0x6f, 0x62, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x72, 0x61, 0x77, 0x54, 0x78, 0x12, 0x53, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x85, 0x04,
	0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x45, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x6d, 0x0a, 0x19, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x1c, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x16, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4d, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x15, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x83, 0x02,
	0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x65, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x0d, 0x6f, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x55, 0x54, 0x58, 0x4f, 0x52, 0x0b,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x74, 0x78, 0x6f, 0x12, 0x40, 0x0a, 0x13, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6a,
	0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x10, 0x72, 0x6f, 0x6f,
	0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x12, 0x44, 0x0a,
	0x15, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52,
	0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4a, 0x6f, 0x62, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x1a, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x17, 0x72, 0x6f, 0x6f, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x29, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x54, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x76, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xa0, 0x01, 0x0a,
	0x05, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4a, 0x6f, 0x62, 0x52, 0x10, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x22,
	0x97, 0x01, 0x0a, 0x10, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52,
	0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4a, 0x6f, 0x62, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0b, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x4d, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x78, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x15, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xc1,
	0x01, 0x0a, 0x11, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x18, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x65,
	0x0a, 0x1a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x4b, 0x0a, 0x1b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61,
	0x66, 0x4b, 0x65, 0x79, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x61,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x66,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x52, 0x10, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x12, 0x5e, 0x0a, 0x13, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x77, 0x65, 0x61, 0x6b,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x2e,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x77, 0x65, 0x61,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x44, 0x0a, 0x16,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x77, 0x65, 0x61,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xae, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x65, 0x61, 0x66, 0x4b,
	0x65, 0x79, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x54,
	0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a,
	0x1c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x66,
	0x52, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x66, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x43, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x1c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x19, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x4e, 0x0a, 0x1d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x11, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x65, 0x61, 0x66, 0x4b, 0x65, 0x79, 0x54, 0x77, 0x65, 0x61, 0x6b,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x66, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x12, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x52, 0x10,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x77, 0x65, 0x61, 0x6b,
	0x12, 0x5f, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x5f, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x65, 0x61, 0x66, 0x4b,
	0x65, 0x79, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x2e, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x77, 0x65, 0x61,
	0x6b, 0x1a, 0x44, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x1c, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x65, 0x61,
	0x66, 0x4b, 0x65, 0x79, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x32, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x4a, 0x6f, 0x62, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x5f,
	0x0a, 0x16, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2a,
	0x89, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x32, 0xc6, 0x06, 0x0a, 0x0c,
	0x53, 0x70, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x18,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x18, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x17, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x18, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x77, 0x65, 0x61, 0x6b, 0x5f,
	0x6b, 0x65, 0x79, 0x12, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x77, 0x65, 0x61, 0x6b, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x64, 0x65, 0x76,
	0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spark_proto_rawDescOnce sync.Once
	file_spark_proto_rawDescData = file_spark_proto_rawDesc
)

func file_spark_proto_rawDescGZIP() []byte {
	file_spark_proto_rawDescOnce.Do(func() {
		file_spark_proto_rawDescData = protoimpl.X.CompressGZIP(file_spark_proto_rawDescData)
	})
	return file_spark_proto_rawDescData
}

var file_spark_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spark_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_spark_proto_goTypes = []any{
	(TransferStatus)(0),                    // 0: spark.TransferStatus
	(*GenerateDepositAddressRequest)(nil),  // 1: spark.GenerateDepositAddressRequest
	(*Address)(nil),                        // 2: spark.Address
	(*GenerateDepositAddressResponse)(nil), // 3: spark.GenerateDepositAddressResponse
	(*UTXO)(nil),                           // 4: spark.UTXO
	(*SigningJob)(nil),                     // 5: spark.SigningJob
	(*SigningResult)(nil),                  // 6: spark.SigningResult
	(*NodeSignatureShares)(nil),            // 7: spark.NodeSignatureShares
	(*NodeSignatures)(nil),                 // 8: spark.NodeSignatures
	(*StartTreeCreationRequest)(nil),       // 9: spark.StartTreeCreationRequest
	(*StartTreeCreationResponse)(nil),      // 10: spark.StartTreeCreationResponse
	(*TreeNode)(nil),                       // 11: spark.TreeNode
	(*Split)(nil),                          // 12: spark.Split
	(*SplitNodeRequest)(nil),               // 13: spark.SplitNodeRequest
	(*SplitResult)(nil),                    // 14: spark.SplitResult
	(*SplitNodeResponse)(nil),              // 15: spark.SplitNodeResponse
	(*FinalizeNodeSignaturesRequest)(nil),  // 16: spark.FinalizeNodeSignaturesRequest
	(*FinalizeNodeSignaturesResponse)(nil), // 17: spark.FinalizeNodeSignaturesResponse
	(*PrepareSplitAddressRequest)(nil),     // 18: spark.PrepareSplitAddressRequest
	(*PrepareSplitAddressResponse)(nil),    // 19: spark.PrepareSplitAddressResponse
	(*SecretShareTweak)(nil),               // 20: spark.SecretShareTweak
	(*SendLeafKeyTweak)(nil),               // 21: spark.SendLeafKeyTweak
	(*SendTransferRequest)(nil),            // 22: spark.SendTransferRequest
	(*Transfer)(nil),                       // 23: spark.Transfer
	(*TransferLeaf)(nil),                   // 24: spark.TransferLeaf
	(*SendTransferResponse)(nil),           // 25: spark.SendTransferResponse
	(*QueryPendingTransfersRequest)(nil),   // 26: spark.QueryPendingTransfersRequest
	(*QueryPendingTransfersResponse)(nil),  // 27: spark.QueryPendingTransfersResponse
	(*ClaimLeafKeyTweak)(nil),              // 28: spark.ClaimLeafKeyTweak
	(*ClaimTransferTweakKeyRequest)(nil),   // 29: spark.ClaimTransferTweakKeyRequest
	(*AggregateNodesRequest)(nil),          // 30: spark.AggregateNodesRequest
	(*AggregateNodesResponse)(nil),         // 31: spark.AggregateNodesResponse
	nil,                                    // 32: spark.SigningResult.PublicKeysEntry
	nil,                                    // 33: spark.SigningResult.SigningNonceCommitmentsEntry
	nil,                                    // 34: spark.SigningResult.SignatureSharesEntry
	nil,                                    // 35: spark.SendLeafKeyTweak.PubkeySharesTweakEntry
	nil,                                    // 36: spark.ClaimLeafKeyTweak.PubkeySharesTweakEntry
	(*common.SigningCommitment)(nil),       // 37: common.SigningCommitment
	(common.SignatureIntent)(0),            // 38: common.SignatureIntent
	(*timestamppb.Timestamp)(nil),          // 39: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                  // 40: google.protobuf.Empty
}
var file_spark_proto_depIdxs = []int32{
	2,  // 0: spark.GenerateDepositAddressResponse.deposit_address:type_name -> spark.Address
	37, // 1: spark.SigningJob.signing_nonce_commitment:type_name -> common.SigningCommitment
	32, // 2: spark.SigningResult.public_keys:type_name -> spark.SigningResult.PublicKeysEntry
	33, // 3: spark.SigningResult.signing_nonce_commitments:type_name -> spark.SigningResult.SigningNonceCommitmentsEntry
	34, // 4: spark.SigningResult.signature_shares:type_name -> spark.SigningResult.SignatureSharesEntry
	6,  // 5: spark.NodeSignatureShares.node_tx_signing_result:type_name -> spark.SigningResult
	6,  // 6: spark.NodeSignatureShares.refund_tx_signing_result:type_name -> spark.SigningResult
	4,  // 7: spark.StartTreeCreationRequest.on_chain_utxo:type_name -> spark.UTXO
	5,  // 8: spark.StartTreeCreationRequest.root_tx_signing_job:type_name -> spark.SigningJob
	5,  // 9: spark.StartTreeCreationRequest.refund_tx_signing_job:type_name -> spark.SigningJob
	7,  // 10: spark.StartTreeCreationResponse.root_node_signature_shares:type_name -> spark.NodeSignatureShares
	5,  // 11: spark.Split.refund_signing_job:type_name -> spark.SigningJob
	5,  // 12: spark.SplitNodeRequest.parent_tx_signing_job:type_name -> spark.SigningJob
	12, // 13: spark.SplitNodeRequest.splits:type_name -> spark.Split
	6,  // 14: spark.SplitResult.refund_tx_signing_result:type_name -> spark.SigningResult
	6,  // 15: spark.SplitNodeResponse.parent_tx_signing_result:type_name -> spark.SigningResult
	14, // 16: spark.SplitNodeResponse.split_results:type_name -> spark.SplitResult
	38, // 17: spark.FinalizeNodeSignaturesRequest.intent:type_name -> common.SignatureIntent
	8,  // 18: spark.FinalizeNodeSignaturesRequest.node_signatures:type_name -> spark.NodeSignatures
	11, // 19: spark.FinalizeNodeSignaturesResponse.nodes:type_name -> spark.TreeNode
	2,  // 20: spark.PrepareSplitAddressResponse.addresses:type_name -> spark.Address
	20, // 21: spark.SendLeafKeyTweak.secret_share_tweak:type_name -> spark.SecretShareTweak
	35, // 22: spark.SendLeafKeyTweak.pubkey_shares_tweak:type_name -> spark.SendLeafKeyTweak.PubkeySharesTweakEntry
	21, // 23: spark.SendTransferRequest.leaves_to_send:type_name -> spark.SendLeafKeyTweak
	39, // 24: spark.SendTransferRequest.expiry_time:type_name -> google.protobuf.Timestamp
	0,  // 25: spark.Transfer.status:type_name -> spark.TransferStatus
	39, // 26: spark.Transfer.expiry_time:type_name -> google.protobuf.Timestamp
	24, // 27: spark.Transfer.leaves:type_name -> spark.TransferLeaf
	23, // 28: spark.SendTransferResponse.transfer:type_name -> spark.Transfer
	23, // 29: spark.QueryPendingTransfersResponse.transfers:type_name -> spark.Transfer
	20, // 30: spark.ClaimLeafKeyTweak.secret_share_tweak:type_name -> spark.SecretShareTweak
	36, // 31: spark.ClaimLeafKeyTweak.pubkey_shares_tweak:type_name -> spark.ClaimLeafKeyTweak.PubkeySharesTweakEntry
	28, // 32: spark.ClaimTransferTweakKeyRequest.leaves_to_receive:type_name -> spark.ClaimLeafKeyTweak
	5,  // 33: spark.AggregateNodesRequest.signing_job:type_name -> spark.SigningJob
	6,  // 34: spark.AggregateNodesResponse.aggregate_signature:type_name -> spark.SigningResult
	37, // 35: spark.SigningResult.SigningNonceCommitmentsEntry.value:type_name -> common.SigningCommitment
	1,  // 36: spark.SparkService.generate_deposit_address:input_type -> spark.GenerateDepositAddressRequest
	9,  // 37: spark.SparkService.start_tree_creation:input_type -> spark.StartTreeCreationRequest
	18, // 38: spark.SparkService.prepare_split_address:input_type -> spark.PrepareSplitAddressRequest
	13, // 39: spark.SparkService.split_node:input_type -> spark.SplitNodeRequest
	16, // 40: spark.SparkService.finalize_node_signatures:input_type -> spark.FinalizeNodeSignaturesRequest
	22, // 41: spark.SparkService.send_transfer:input_type -> spark.SendTransferRequest
	26, // 42: spark.SparkService.query_pending_transfers:input_type -> spark.QueryPendingTransfersRequest
	29, // 43: spark.SparkService.claim_transfer_tweak_key:input_type -> spark.ClaimTransferTweakKeyRequest
	30, // 44: spark.SparkService.aggregate_nodes:input_type -> spark.AggregateNodesRequest
	3,  // 45: spark.SparkService.generate_deposit_address:output_type -> spark.GenerateDepositAddressResponse
	10, // 46: spark.SparkService.start_tree_creation:output_type -> spark.StartTreeCreationResponse
	19, // 47: spark.SparkService.prepare_split_address:output_type -> spark.PrepareSplitAddressResponse
	15, // 48: spark.SparkService.split_node:output_type -> spark.SplitNodeResponse
	17, // 49: spark.SparkService.finalize_node_signatures:output_type -> spark.FinalizeNodeSignaturesResponse
	25, // 50: spark.SparkService.send_transfer:output_type -> spark.SendTransferResponse
	27, // 51: spark.SparkService.query_pending_transfers:output_type -> spark.QueryPendingTransfersResponse
	40, // 52: spark.SparkService.claim_transfer_tweak_key:output_type -> google.protobuf.Empty
	31, // 53: spark.SparkService.aggregate_nodes:output_type -> spark.AggregateNodesResponse
	45, // [45:54] is the sub-list for method output_type
	36, // [36:45] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_spark_proto_init() }
func file_spark_proto_init() {
	if File_spark_proto != nil {
		return
	}
	file_spark_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spark_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spark_proto_goTypes,
		DependencyIndexes: file_spark_proto_depIdxs,
		EnumInfos:         file_spark_proto_enumTypes,
		MessageInfos:      file_spark_proto_msgTypes,
	}.Build()
	File_spark_proto = out.File
	file_spark_proto_rawDesc = nil
	file_spark_proto_goTypes = nil
	file_spark_proto_depIdxs = nil
}
