// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: spark_internal.proto

package spark_internal

import (
	context "context"
	spark "github.com/lightsparkdev/spark-go/proto/spark"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SparkInternalService_MarkKeysharesAsUsed_FullMethodName                = "/spark_internal.SparkInternalService/mark_keyshares_as_used"
	SparkInternalService_MarkKeyshareForDepositAddress_FullMethodName      = "/spark_internal.SparkInternalService/mark_keyshare_for_deposit_address"
	SparkInternalService_FinalizeTreeCreation_FullMethodName               = "/spark_internal.SparkInternalService/finalize_tree_creation"
	SparkInternalService_FrostRound1_FullMethodName                        = "/spark_internal.SparkInternalService/frost_round1"
	SparkInternalService_FrostRound2_FullMethodName                        = "/spark_internal.SparkInternalService/frost_round2"
	SparkInternalService_PrepareSplitKeyshares_FullMethodName              = "/spark_internal.SparkInternalService/prepare_split_keyshares"
	SparkInternalService_AggregateNodes_FullMethodName                     = "/spark_internal.SparkInternalService/aggregate_nodes"
	SparkInternalService_FinalizeNodesAggregation_FullMethodName           = "/spark_internal.SparkInternalService/finalize_nodes_aggregation"
	SparkInternalService_FinalizeTransfer_FullMethodName                   = "/spark_internal.SparkInternalService/finalize_transfer"
	SparkInternalService_InitiatePreimageSwap_FullMethodName               = "/spark_internal.SparkInternalService/initiate_preimage_swap"
	SparkInternalService_PrepareTreeAddress_FullMethodName                 = "/spark_internal.SparkInternalService/prepare_tree_address"
	SparkInternalService_InitiateTransfer_FullMethodName                   = "/spark_internal.SparkInternalService/initiate_transfer"
	SparkInternalService_InitiateCooperativeExit_FullMethodName            = "/spark_internal.SparkInternalService/initiate_cooperative_exit"
	SparkInternalService_MarkKeyshareForRevocationPublicKey_FullMethodName = "/spark_internal.SparkInternalService/mark_keyshare_for_revocation_public_key"
	SparkInternalService_MarkKeyshareForTokenTransaction_FullMethodName    = "/spark_internal.SparkInternalService/mark_keyshare_for_token_transaction"
)

// SparkInternalServiceClient is the client API for SparkInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SparkInternalServiceClient interface {
	MarkKeysharesAsUsed(ctx context.Context, in *MarkKeysharesAsUsedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkKeyshareForDepositAddress(ctx context.Context, in *MarkKeyshareForDepositAddressRequest, opts ...grpc.CallOption) (*MarkKeyshareForDepositAddressResponse, error)
	FinalizeTreeCreation(ctx context.Context, in *FinalizeTreeCreationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FrostRound1(ctx context.Context, in *FrostRound1Request, opts ...grpc.CallOption) (*FrostRound1Response, error)
	FrostRound2(ctx context.Context, in *FrostRound2Request, opts ...grpc.CallOption) (*FrostRound2Response, error)
	PrepareSplitKeyshares(ctx context.Context, in *PrepareSplitKeysharesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AggregateNodes(ctx context.Context, in *spark.AggregateNodesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FinalizeNodesAggregation(ctx context.Context, in *FinalizeNodesAggregationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FinalizeTransfer(ctx context.Context, in *FinalizeTransferRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitiatePreimageSwap(ctx context.Context, in *spark.InitiatePreimageSwapRequest, opts ...grpc.CallOption) (*InitiatePreimageSwapResponse, error)
	PrepareTreeAddress(ctx context.Context, in *PrepareTreeAddressRequest, opts ...grpc.CallOption) (*PrepareTreeAddressResponse, error)
	InitiateTransfer(ctx context.Context, in *InitiateTransferRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitiateCooperativeExit(ctx context.Context, in *InitiateCooperativeExitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkKeyshareForRevocationPublicKey(ctx context.Context, in *MarkKeyshareForRevocationPublicKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkKeyshareForTokenTransaction(ctx context.Context, in *MarkKeyshareForTokenTransactionRequest, opts ...grpc.CallOption) (*MarkKeyshareForTokenTransactionResponse, error)
}

type sparkInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSparkInternalServiceClient(cc grpc.ClientConnInterface) SparkInternalServiceClient {
	return &sparkInternalServiceClient{cc}
}

func (c *sparkInternalServiceClient) MarkKeysharesAsUsed(ctx context.Context, in *MarkKeysharesAsUsedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_MarkKeysharesAsUsed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) MarkKeyshareForDepositAddress(ctx context.Context, in *MarkKeyshareForDepositAddressRequest, opts ...grpc.CallOption) (*MarkKeyshareForDepositAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkKeyshareForDepositAddressResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_MarkKeyshareForDepositAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FinalizeTreeCreation(ctx context.Context, in *FinalizeTreeCreationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_FinalizeTreeCreation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FrostRound1(ctx context.Context, in *FrostRound1Request, opts ...grpc.CallOption) (*FrostRound1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FrostRound1Response)
	err := c.cc.Invoke(ctx, SparkInternalService_FrostRound1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FrostRound2(ctx context.Context, in *FrostRound2Request, opts ...grpc.CallOption) (*FrostRound2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FrostRound2Response)
	err := c.cc.Invoke(ctx, SparkInternalService_FrostRound2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) PrepareSplitKeyshares(ctx context.Context, in *PrepareSplitKeysharesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_PrepareSplitKeyshares_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) AggregateNodes(ctx context.Context, in *spark.AggregateNodesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_AggregateNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FinalizeNodesAggregation(ctx context.Context, in *FinalizeNodesAggregationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_FinalizeNodesAggregation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FinalizeTransfer(ctx context.Context, in *FinalizeTransferRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_FinalizeTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) InitiatePreimageSwap(ctx context.Context, in *spark.InitiatePreimageSwapRequest, opts ...grpc.CallOption) (*InitiatePreimageSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiatePreimageSwapResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_InitiatePreimageSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) PrepareTreeAddress(ctx context.Context, in *PrepareTreeAddressRequest, opts ...grpc.CallOption) (*PrepareTreeAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareTreeAddressResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_PrepareTreeAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) InitiateTransfer(ctx context.Context, in *InitiateTransferRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_InitiateTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) InitiateCooperativeExit(ctx context.Context, in *InitiateCooperativeExitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_InitiateCooperativeExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) MarkKeyshareForRevocationPublicKey(ctx context.Context, in *MarkKeyshareForRevocationPublicKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_MarkKeyshareForRevocationPublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) MarkKeyshareForTokenTransaction(ctx context.Context, in *MarkKeyshareForTokenTransactionRequest, opts ...grpc.CallOption) (*MarkKeyshareForTokenTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkKeyshareForTokenTransactionResponse)
	err := c.cc.Invoke(ctx, SparkInternalService_MarkKeyshareForTokenTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SparkInternalServiceServer is the server API for SparkInternalService service.
// All implementations must embed UnimplementedSparkInternalServiceServer
// for forward compatibility.
type SparkInternalServiceServer interface {
	MarkKeysharesAsUsed(context.Context, *MarkKeysharesAsUsedRequest) (*emptypb.Empty, error)
	MarkKeyshareForDepositAddress(context.Context, *MarkKeyshareForDepositAddressRequest) (*MarkKeyshareForDepositAddressResponse, error)
	FinalizeTreeCreation(context.Context, *FinalizeTreeCreationRequest) (*emptypb.Empty, error)
	FrostRound1(context.Context, *FrostRound1Request) (*FrostRound1Response, error)
	FrostRound2(context.Context, *FrostRound2Request) (*FrostRound2Response, error)
	PrepareSplitKeyshares(context.Context, *PrepareSplitKeysharesRequest) (*emptypb.Empty, error)
	AggregateNodes(context.Context, *spark.AggregateNodesRequest) (*emptypb.Empty, error)
	FinalizeNodesAggregation(context.Context, *FinalizeNodesAggregationRequest) (*emptypb.Empty, error)
	FinalizeTransfer(context.Context, *FinalizeTransferRequest) (*emptypb.Empty, error)
	InitiatePreimageSwap(context.Context, *spark.InitiatePreimageSwapRequest) (*InitiatePreimageSwapResponse, error)
	PrepareTreeAddress(context.Context, *PrepareTreeAddressRequest) (*PrepareTreeAddressResponse, error)
	InitiateTransfer(context.Context, *InitiateTransferRequest) (*emptypb.Empty, error)
	InitiateCooperativeExit(context.Context, *InitiateCooperativeExitRequest) (*emptypb.Empty, error)
	MarkKeyshareForRevocationPublicKey(context.Context, *MarkKeyshareForRevocationPublicKeyRequest) (*emptypb.Empty, error)
	MarkKeyshareForTokenTransaction(context.Context, *MarkKeyshareForTokenTransactionRequest) (*MarkKeyshareForTokenTransactionResponse, error)
	mustEmbedUnimplementedSparkInternalServiceServer()
}

// UnimplementedSparkInternalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSparkInternalServiceServer struct{}

func (UnimplementedSparkInternalServiceServer) MarkKeysharesAsUsed(context.Context, *MarkKeysharesAsUsedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkKeysharesAsUsed not implemented")
}
func (UnimplementedSparkInternalServiceServer) MarkKeyshareForDepositAddress(context.Context, *MarkKeyshareForDepositAddressRequest) (*MarkKeyshareForDepositAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkKeyshareForDepositAddress not implemented")
}
func (UnimplementedSparkInternalServiceServer) FinalizeTreeCreation(context.Context, *FinalizeTreeCreationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeTreeCreation not implemented")
}
func (UnimplementedSparkInternalServiceServer) FrostRound1(context.Context, *FrostRound1Request) (*FrostRound1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrostRound1 not implemented")
}
func (UnimplementedSparkInternalServiceServer) FrostRound2(context.Context, *FrostRound2Request) (*FrostRound2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrostRound2 not implemented")
}
func (UnimplementedSparkInternalServiceServer) PrepareSplitKeyshares(context.Context, *PrepareSplitKeysharesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareSplitKeyshares not implemented")
}
func (UnimplementedSparkInternalServiceServer) AggregateNodes(context.Context, *spark.AggregateNodesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateNodes not implemented")
}
func (UnimplementedSparkInternalServiceServer) FinalizeNodesAggregation(context.Context, *FinalizeNodesAggregationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeNodesAggregation not implemented")
}
func (UnimplementedSparkInternalServiceServer) FinalizeTransfer(context.Context, *FinalizeTransferRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeTransfer not implemented")
}
func (UnimplementedSparkInternalServiceServer) InitiatePreimageSwap(context.Context, *spark.InitiatePreimageSwapRequest) (*InitiatePreimageSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePreimageSwap not implemented")
}
func (UnimplementedSparkInternalServiceServer) PrepareTreeAddress(context.Context, *PrepareTreeAddressRequest) (*PrepareTreeAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareTreeAddress not implemented")
}
func (UnimplementedSparkInternalServiceServer) InitiateTransfer(context.Context, *InitiateTransferRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTransfer not implemented")
}
func (UnimplementedSparkInternalServiceServer) InitiateCooperativeExit(context.Context, *InitiateCooperativeExitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateCooperativeExit not implemented")
}
func (UnimplementedSparkInternalServiceServer) MarkKeyshareForRevocationPublicKey(context.Context, *MarkKeyshareForRevocationPublicKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkKeyshareForRevocationPublicKey not implemented")
}
func (UnimplementedSparkInternalServiceServer) MarkKeyshareForTokenTransaction(context.Context, *MarkKeyshareForTokenTransactionRequest) (*MarkKeyshareForTokenTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkKeyshareForTokenTransaction not implemented")
}
func (UnimplementedSparkInternalServiceServer) mustEmbedUnimplementedSparkInternalServiceServer() {}
func (UnimplementedSparkInternalServiceServer) testEmbeddedByValue()                              {}

// UnsafeSparkInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SparkInternalServiceServer will
// result in compilation errors.
type UnsafeSparkInternalServiceServer interface {
	mustEmbedUnimplementedSparkInternalServiceServer()
}

func RegisterSparkInternalServiceServer(s grpc.ServiceRegistrar, srv SparkInternalServiceServer) {
	// If the following call pancis, it indicates UnimplementedSparkInternalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SparkInternalService_ServiceDesc, srv)
}

func _SparkInternalService_MarkKeysharesAsUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkKeysharesAsUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).MarkKeysharesAsUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_MarkKeysharesAsUsed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).MarkKeysharesAsUsed(ctx, req.(*MarkKeysharesAsUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_MarkKeyshareForDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkKeyshareForDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).MarkKeyshareForDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_MarkKeyshareForDepositAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).MarkKeyshareForDepositAddress(ctx, req.(*MarkKeyshareForDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FinalizeTreeCreation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeTreeCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FinalizeTreeCreation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FinalizeTreeCreation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FinalizeTreeCreation(ctx, req.(*FinalizeTreeCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FrostRound1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrostRound1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FrostRound1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FrostRound1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FrostRound1(ctx, req.(*FrostRound1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FrostRound2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrostRound2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FrostRound2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FrostRound2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FrostRound2(ctx, req.(*FrostRound2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_PrepareSplitKeyshares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareSplitKeysharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).PrepareSplitKeyshares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_PrepareSplitKeyshares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).PrepareSplitKeyshares(ctx, req.(*PrepareSplitKeysharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_AggregateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spark.AggregateNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).AggregateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_AggregateNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).AggregateNodes(ctx, req.(*spark.AggregateNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FinalizeNodesAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeNodesAggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FinalizeNodesAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FinalizeNodesAggregation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FinalizeNodesAggregation(ctx, req.(*FinalizeNodesAggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FinalizeTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FinalizeTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FinalizeTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FinalizeTransfer(ctx, req.(*FinalizeTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_InitiatePreimageSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spark.InitiatePreimageSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).InitiatePreimageSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_InitiatePreimageSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).InitiatePreimageSwap(ctx, req.(*spark.InitiatePreimageSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_PrepareTreeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareTreeAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).PrepareTreeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_PrepareTreeAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).PrepareTreeAddress(ctx, req.(*PrepareTreeAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_InitiateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).InitiateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_InitiateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).InitiateTransfer(ctx, req.(*InitiateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_InitiateCooperativeExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateCooperativeExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).InitiateCooperativeExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_InitiateCooperativeExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).InitiateCooperativeExit(ctx, req.(*InitiateCooperativeExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_MarkKeyshareForRevocationPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkKeyshareForRevocationPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).MarkKeyshareForRevocationPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_MarkKeyshareForRevocationPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).MarkKeyshareForRevocationPublicKey(ctx, req.(*MarkKeyshareForRevocationPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_MarkKeyshareForTokenTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkKeyshareForTokenTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).MarkKeyshareForTokenTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_MarkKeyshareForTokenTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).MarkKeyshareForTokenTransaction(ctx, req.(*MarkKeyshareForTokenTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SparkInternalService_ServiceDesc is the grpc.ServiceDesc for SparkInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SparkInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spark_internal.SparkInternalService",
	HandlerType: (*SparkInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "mark_keyshares_as_used",
			Handler:    _SparkInternalService_MarkKeysharesAsUsed_Handler,
		},
		{
			MethodName: "mark_keyshare_for_deposit_address",
			Handler:    _SparkInternalService_MarkKeyshareForDepositAddress_Handler,
		},
		{
			MethodName: "finalize_tree_creation",
			Handler:    _SparkInternalService_FinalizeTreeCreation_Handler,
		},
		{
			MethodName: "frost_round1",
			Handler:    _SparkInternalService_FrostRound1_Handler,
		},
		{
			MethodName: "frost_round2",
			Handler:    _SparkInternalService_FrostRound2_Handler,
		},
		{
			MethodName: "prepare_split_keyshares",
			Handler:    _SparkInternalService_PrepareSplitKeyshares_Handler,
		},
		{
			MethodName: "aggregate_nodes",
			Handler:    _SparkInternalService_AggregateNodes_Handler,
		},
		{
			MethodName: "finalize_nodes_aggregation",
			Handler:    _SparkInternalService_FinalizeNodesAggregation_Handler,
		},
		{
			MethodName: "finalize_transfer",
			Handler:    _SparkInternalService_FinalizeTransfer_Handler,
		},
		{
			MethodName: "initiate_preimage_swap",
			Handler:    _SparkInternalService_InitiatePreimageSwap_Handler,
		},
		{
			MethodName: "prepare_tree_address",
			Handler:    _SparkInternalService_PrepareTreeAddress_Handler,
		},
		{
			MethodName: "initiate_transfer",
			Handler:    _SparkInternalService_InitiateTransfer_Handler,
		},
		{
			MethodName: "initiate_cooperative_exit",
			Handler:    _SparkInternalService_InitiateCooperativeExit_Handler,
		},
		{
			MethodName: "mark_keyshare_for_revocation_public_key",
			Handler:    _SparkInternalService_MarkKeyshareForRevocationPublicKey_Handler,
		},
		{
			MethodName: "mark_keyshare_for_token_transaction",
			Handler:    _SparkInternalService_MarkKeyshareForTokenTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spark_internal.proto",
}
