// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: spark_internal.proto

package spark_internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SparkInternalService_MarkKeysharesAsUsed_FullMethodName            = "/spark_internal.SparkInternalService/mark_keyshares_as_used"
	SparkInternalService_MarkKeyshareForDepositAddress_FullMethodName  = "/spark_internal.SparkInternalService/mark_keyshare_for_deposit_address"
	SparkInternalService_InternalFinalizeNodeSignatures_FullMethodName = "/spark_internal.SparkInternalService/internal_finalize_node_signatures"
	SparkInternalService_FrostRound1_FullMethodName                    = "/spark_internal.SparkInternalService/frost_round1"
	SparkInternalService_FrostRound2_FullMethodName                    = "/spark_internal.SparkInternalService/frost_round2"
	SparkInternalService_PrepareSplitKeyshares_FullMethodName          = "/spark_internal.SparkInternalService/prepare_split_keyshares"
)

// SparkInternalServiceClient is the client API for SparkInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SparkInternalServiceClient interface {
	MarkKeysharesAsUsed(ctx context.Context, in *MarkKeysharesAsUsedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MarkKeyshareForDepositAddress(ctx context.Context, in *MarkKeyshareForDepositAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InternalFinalizeNodeSignatures(ctx context.Context, in *InternalFinalizeNodeSignaturesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FrostRound1(ctx context.Context, in *FrostRound1Request, opts ...grpc.CallOption) (*FrostRound1Response, error)
	FrostRound2(ctx context.Context, in *FrostRound2Request, opts ...grpc.CallOption) (*FrostRound2Response, error)
	PrepareSplitKeyshares(ctx context.Context, in *PrepareSplitKeysharesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sparkInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSparkInternalServiceClient(cc grpc.ClientConnInterface) SparkInternalServiceClient {
	return &sparkInternalServiceClient{cc}
}

func (c *sparkInternalServiceClient) MarkKeysharesAsUsed(ctx context.Context, in *MarkKeysharesAsUsedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_MarkKeysharesAsUsed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) MarkKeyshareForDepositAddress(ctx context.Context, in *MarkKeyshareForDepositAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_MarkKeyshareForDepositAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) InternalFinalizeNodeSignatures(ctx context.Context, in *InternalFinalizeNodeSignaturesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_InternalFinalizeNodeSignatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FrostRound1(ctx context.Context, in *FrostRound1Request, opts ...grpc.CallOption) (*FrostRound1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FrostRound1Response)
	err := c.cc.Invoke(ctx, SparkInternalService_FrostRound1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) FrostRound2(ctx context.Context, in *FrostRound2Request, opts ...grpc.CallOption) (*FrostRound2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FrostRound2Response)
	err := c.cc.Invoke(ctx, SparkInternalService_FrostRound2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkInternalServiceClient) PrepareSplitKeyshares(ctx context.Context, in *PrepareSplitKeysharesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SparkInternalService_PrepareSplitKeyshares_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SparkInternalServiceServer is the server API for SparkInternalService service.
// All implementations must embed UnimplementedSparkInternalServiceServer
// for forward compatibility.
type SparkInternalServiceServer interface {
	MarkKeysharesAsUsed(context.Context, *MarkKeysharesAsUsedRequest) (*emptypb.Empty, error)
	MarkKeyshareForDepositAddress(context.Context, *MarkKeyshareForDepositAddressRequest) (*emptypb.Empty, error)
	InternalFinalizeNodeSignatures(context.Context, *InternalFinalizeNodeSignaturesRequest) (*emptypb.Empty, error)
	FrostRound1(context.Context, *FrostRound1Request) (*FrostRound1Response, error)
	FrostRound2(context.Context, *FrostRound2Request) (*FrostRound2Response, error)
	PrepareSplitKeyshares(context.Context, *PrepareSplitKeysharesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSparkInternalServiceServer()
}

// UnimplementedSparkInternalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSparkInternalServiceServer struct{}

func (UnimplementedSparkInternalServiceServer) MarkKeysharesAsUsed(context.Context, *MarkKeysharesAsUsedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkKeysharesAsUsed not implemented")
}
func (UnimplementedSparkInternalServiceServer) MarkKeyshareForDepositAddress(context.Context, *MarkKeyshareForDepositAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkKeyshareForDepositAddress not implemented")
}
func (UnimplementedSparkInternalServiceServer) InternalFinalizeNodeSignatures(context.Context, *InternalFinalizeNodeSignaturesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalFinalizeNodeSignatures not implemented")
}
func (UnimplementedSparkInternalServiceServer) FrostRound1(context.Context, *FrostRound1Request) (*FrostRound1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrostRound1 not implemented")
}
func (UnimplementedSparkInternalServiceServer) FrostRound2(context.Context, *FrostRound2Request) (*FrostRound2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrostRound2 not implemented")
}
func (UnimplementedSparkInternalServiceServer) PrepareSplitKeyshares(context.Context, *PrepareSplitKeysharesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareSplitKeyshares not implemented")
}
func (UnimplementedSparkInternalServiceServer) mustEmbedUnimplementedSparkInternalServiceServer() {}
func (UnimplementedSparkInternalServiceServer) testEmbeddedByValue()                              {}

// UnsafeSparkInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SparkInternalServiceServer will
// result in compilation errors.
type UnsafeSparkInternalServiceServer interface {
	mustEmbedUnimplementedSparkInternalServiceServer()
}

func RegisterSparkInternalServiceServer(s grpc.ServiceRegistrar, srv SparkInternalServiceServer) {
	// If the following call pancis, it indicates UnimplementedSparkInternalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SparkInternalService_ServiceDesc, srv)
}

func _SparkInternalService_MarkKeysharesAsUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkKeysharesAsUsedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).MarkKeysharesAsUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_MarkKeysharesAsUsed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).MarkKeysharesAsUsed(ctx, req.(*MarkKeysharesAsUsedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_MarkKeyshareForDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkKeyshareForDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).MarkKeyshareForDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_MarkKeyshareForDepositAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).MarkKeyshareForDepositAddress(ctx, req.(*MarkKeyshareForDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_InternalFinalizeNodeSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalFinalizeNodeSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).InternalFinalizeNodeSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_InternalFinalizeNodeSignatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).InternalFinalizeNodeSignatures(ctx, req.(*InternalFinalizeNodeSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FrostRound1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrostRound1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FrostRound1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FrostRound1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FrostRound1(ctx, req.(*FrostRound1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_FrostRound2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrostRound2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).FrostRound2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_FrostRound2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).FrostRound2(ctx, req.(*FrostRound2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkInternalService_PrepareSplitKeyshares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareSplitKeysharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkInternalServiceServer).PrepareSplitKeyshares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SparkInternalService_PrepareSplitKeyshares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkInternalServiceServer).PrepareSplitKeyshares(ctx, req.(*PrepareSplitKeysharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SparkInternalService_ServiceDesc is the grpc.ServiceDesc for SparkInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SparkInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spark_internal.SparkInternalService",
	HandlerType: (*SparkInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "mark_keyshares_as_used",
			Handler:    _SparkInternalService_MarkKeysharesAsUsed_Handler,
		},
		{
			MethodName: "mark_keyshare_for_deposit_address",
			Handler:    _SparkInternalService_MarkKeyshareForDepositAddress_Handler,
		},
		{
			MethodName: "internal_finalize_node_signatures",
			Handler:    _SparkInternalService_InternalFinalizeNodeSignatures_Handler,
		},
		{
			MethodName: "frost_round1",
			Handler:    _SparkInternalService_FrostRound1_Handler,
		},
		{
			MethodName: "frost_round2",
			Handler:    _SparkInternalService_FrostRound2_Handler,
		},
		{
			MethodName: "prepare_split_keyshares",
			Handler:    _SparkInternalService_PrepareSplitKeyshares_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spark_internal.proto",
}
