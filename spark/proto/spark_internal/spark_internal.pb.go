// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: spark_internal.proto

package spark_internal

import (
	common "github.com/lightsparkdev/spark-go/proto/common"
	spark "github.com/lightsparkdev/spark-go/proto/spark"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarkKeysharesAsUsedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyshareId []string `protobuf:"bytes,1,rep,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
}

func (x *MarkKeysharesAsUsedRequest) Reset() {
	*x = MarkKeysharesAsUsedRequest{}
	mi := &file_spark_internal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkKeysharesAsUsedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkKeysharesAsUsedRequest) ProtoMessage() {}

func (x *MarkKeysharesAsUsedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkKeysharesAsUsedRequest.ProtoReflect.Descriptor instead.
func (*MarkKeysharesAsUsedRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{0}
}

func (x *MarkKeysharesAsUsedRequest) GetKeyshareId() []string {
	if x != nil {
		return x.KeyshareId
	}
	return nil
}

type MarkKeyshareForDepositAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyshareId             string `protobuf:"bytes,1,opt,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	Address                string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	OwnerIdentityPublicKey []byte `protobuf:"bytes,3,opt,name=owner_identity_public_key,json=ownerIdentityPublicKey,proto3" json:"owner_identity_public_key,omitempty"`
	OwnerSigningPublicKey  []byte `protobuf:"bytes,4,opt,name=owner_signing_public_key,json=ownerSigningPublicKey,proto3" json:"owner_signing_public_key,omitempty"`
}

func (x *MarkKeyshareForDepositAddressRequest) Reset() {
	*x = MarkKeyshareForDepositAddressRequest{}
	mi := &file_spark_internal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkKeyshareForDepositAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkKeyshareForDepositAddressRequest) ProtoMessage() {}

func (x *MarkKeyshareForDepositAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkKeyshareForDepositAddressRequest.ProtoReflect.Descriptor instead.
func (*MarkKeyshareForDepositAddressRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{1}
}

func (x *MarkKeyshareForDepositAddressRequest) GetKeyshareId() string {
	if x != nil {
		return x.KeyshareId
	}
	return ""
}

func (x *MarkKeyshareForDepositAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MarkKeyshareForDepositAddressRequest) GetOwnerIdentityPublicKey() []byte {
	if x != nil {
		return x.OwnerIdentityPublicKey
	}
	return nil
}

func (x *MarkKeyshareForDepositAddressRequest) GetOwnerSigningPublicKey() []byte {
	if x != nil {
		return x.OwnerSigningPublicKey
	}
	return nil
}

type MarkKeyshareForDepositAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressSignature []byte `protobuf:"bytes,1,opt,name=address_signature,json=addressSignature,proto3" json:"address_signature,omitempty"`
}

func (x *MarkKeyshareForDepositAddressResponse) Reset() {
	*x = MarkKeyshareForDepositAddressResponse{}
	mi := &file_spark_internal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkKeyshareForDepositAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkKeyshareForDepositAddressResponse) ProtoMessage() {}

func (x *MarkKeyshareForDepositAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkKeyshareForDepositAddressResponse.ProtoReflect.Descriptor instead.
func (*MarkKeyshareForDepositAddressResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{2}
}

func (x *MarkKeyshareForDepositAddressResponse) GetAddressSignature() []byte {
	if x != nil {
		return x.AddressSignature
	}
	return nil
}

type FrostRound1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyshareIds []string `protobuf:"bytes,1,rep,name=keyshare_ids,json=keyshareIds,proto3" json:"keyshare_ids,omitempty"`
}

func (x *FrostRound1Request) Reset() {
	*x = FrostRound1Request{}
	mi := &file_spark_internal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound1Request) ProtoMessage() {}

func (x *FrostRound1Request) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound1Request.ProtoReflect.Descriptor instead.
func (*FrostRound1Request) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{3}
}

func (x *FrostRound1Request) GetKeyshareIds() []string {
	if x != nil {
		return x.KeyshareIds
	}
	return nil
}

type FrostRound1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigningCommitments []*common.SigningCommitment `protobuf:"bytes,1,rep,name=signing_commitments,json=signingCommitments,proto3" json:"signing_commitments,omitempty"`
}

func (x *FrostRound1Response) Reset() {
	*x = FrostRound1Response{}
	mi := &file_spark_internal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound1Response) ProtoMessage() {}

func (x *FrostRound1Response) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound1Response.ProtoReflect.Descriptor instead.
func (*FrostRound1Response) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{4}
}

func (x *FrostRound1Response) GetSigningCommitments() []*common.SigningCommitment {
	if x != nil {
		return x.SigningCommitments
	}
	return nil
}

type SigningJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the signing job.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The message to sign.
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The secret package from DKG round 3.
	KeyshareId string `protobuf:"bytes,3,opt,name=keyshare_id,json=keyshareId,proto3" json:"keyshare_id,omitempty"`
	// The verifying key. This should be the total public key for both user and StatechainEntity.
	VerifyingKey []byte `protobuf:"bytes,4,opt,name=verifying_key,json=verifyingKey,proto3" json:"verifying_key,omitempty"`
	// The commitments for all participants of the statechain.
	Commitments map[string]*common.SigningCommitment `protobuf:"bytes,5,rep,name=commitments,proto3" json:"commitments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The commitments for all participants of the user.
	UserCommitments *common.SigningCommitment `protobuf:"bytes,6,opt,name=user_commitments,json=userCommitments,proto3" json:"user_commitments,omitempty"`
}

func (x *SigningJob) Reset() {
	*x = SigningJob{}
	mi := &file_spark_internal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SigningJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningJob) ProtoMessage() {}

func (x *SigningJob) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningJob.ProtoReflect.Descriptor instead.
func (*SigningJob) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{5}
}

func (x *SigningJob) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *SigningJob) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SigningJob) GetKeyshareId() string {
	if x != nil {
		return x.KeyshareId
	}
	return ""
}

func (x *SigningJob) GetVerifyingKey() []byte {
	if x != nil {
		return x.VerifyingKey
	}
	return nil
}

func (x *SigningJob) GetCommitments() map[string]*common.SigningCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *SigningJob) GetUserCommitments() *common.SigningCommitment {
	if x != nil {
		return x.UserCommitments
	}
	return nil
}

type FrostRound2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigningJobs []*SigningJob `protobuf:"bytes,1,rep,name=signing_jobs,json=signingJobs,proto3" json:"signing_jobs,omitempty"`
}

func (x *FrostRound2Request) Reset() {
	*x = FrostRound2Request{}
	mi := &file_spark_internal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound2Request) ProtoMessage() {}

func (x *FrostRound2Request) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound2Request.ProtoReflect.Descriptor instead.
func (*FrostRound2Request) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{6}
}

func (x *FrostRound2Request) GetSigningJobs() []*SigningJob {
	if x != nil {
		return x.SigningJobs
	}
	return nil
}

type FrostRound2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]*common.SigningResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FrostRound2Response) Reset() {
	*x = FrostRound2Response{}
	mi := &file_spark_internal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrostRound2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostRound2Response) ProtoMessage() {}

func (x *FrostRound2Response) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostRound2Response.ProtoReflect.Descriptor instead.
func (*FrostRound2Response) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{7}
}

func (x *FrostRound2Response) GetResults() map[string]*common.SigningResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type PrepareSplitKeysharesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId              string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	TargetKeyshareId    string   `protobuf:"bytes,2,opt,name=target_keyshare_id,json=targetKeyshareId,proto3" json:"target_keyshare_id,omitempty"`
	SelectedKeyshareIds []string `protobuf:"bytes,3,rep,name=selected_keyshare_ids,json=selectedKeyshareIds,proto3" json:"selected_keyshare_ids,omitempty"`
	LastKeyshareId      string   `protobuf:"bytes,4,opt,name=last_keyshare_id,json=lastKeyshareId,proto3" json:"last_keyshare_id,omitempty"`
}

func (x *PrepareSplitKeysharesRequest) Reset() {
	*x = PrepareSplitKeysharesRequest{}
	mi := &file_spark_internal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareSplitKeysharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareSplitKeysharesRequest) ProtoMessage() {}

func (x *PrepareSplitKeysharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareSplitKeysharesRequest.ProtoReflect.Descriptor instead.
func (*PrepareSplitKeysharesRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{8}
}

func (x *PrepareSplitKeysharesRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PrepareSplitKeysharesRequest) GetTargetKeyshareId() string {
	if x != nil {
		return x.TargetKeyshareId
	}
	return ""
}

func (x *PrepareSplitKeysharesRequest) GetSelectedKeyshareIds() []string {
	if x != nil {
		return x.SelectedKeyshareIds
	}
	return nil
}

func (x *PrepareSplitKeysharesRequest) GetLastKeyshareId() string {
	if x != nil {
		return x.LastKeyshareId
	}
	return ""
}

type FinalizeTreeCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*TreeNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *FinalizeTreeCreationRequest) Reset() {
	*x = FinalizeTreeCreationRequest{}
	mi := &file_spark_internal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeTreeCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeTreeCreationRequest) ProtoMessage() {}

func (x *FinalizeTreeCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeTreeCreationRequest.ProtoReflect.Descriptor instead.
func (*FinalizeTreeCreationRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{9}
}

func (x *FinalizeTreeCreationRequest) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type FinalizeNodeSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentNodeId string      `protobuf:"bytes,1,opt,name=parent_node_id,json=parentNodeId,proto3" json:"parent_node_id,omitempty"`
	ChildNodes   []*TreeNode `protobuf:"bytes,2,rep,name=child_nodes,json=childNodes,proto3" json:"child_nodes,omitempty"`
}

func (x *FinalizeNodeSplitRequest) Reset() {
	*x = FinalizeNodeSplitRequest{}
	mi := &file_spark_internal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeNodeSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeNodeSplitRequest) ProtoMessage() {}

func (x *FinalizeNodeSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeNodeSplitRequest.ProtoReflect.Descriptor instead.
func (*FinalizeNodeSplitRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{10}
}

func (x *FinalizeNodeSplitRequest) GetParentNodeId() string {
	if x != nil {
		return x.ParentNodeId
	}
	return ""
}

func (x *FinalizeNodeSplitRequest) GetChildNodes() []*TreeNode {
	if x != nil {
		return x.ChildNodes
	}
	return nil
}

type FinalizeNodesAggregationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*TreeNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *FinalizeNodesAggregationRequest) Reset() {
	*x = FinalizeNodesAggregationRequest{}
	mi := &file_spark_internal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeNodesAggregationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeNodesAggregationRequest) ProtoMessage() {}

func (x *FinalizeNodesAggregationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeNodesAggregationRequest.ProtoReflect.Descriptor instead.
func (*FinalizeNodesAggregationRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{11}
}

func (x *FinalizeNodesAggregationRequest) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type FinalizeTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferId string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Nodes      []*TreeNode            `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *FinalizeTransferRequest) Reset() {
	*x = FinalizeTransferRequest{}
	mi := &file_spark_internal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeTransferRequest) ProtoMessage() {}

func (x *FinalizeTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeTransferRequest.ProtoReflect.Descriptor instead.
func (*FinalizeTransferRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{12}
}

func (x *FinalizeTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FinalizeTransferRequest) GetNodes() []*TreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *FinalizeTransferRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type TreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value               uint64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	VerifyingPubkey     []byte  `protobuf:"bytes,3,opt,name=verifying_pubkey,json=verifyingPubkey,proto3" json:"verifying_pubkey,omitempty"`
	OwnerIdentityPubkey []byte  `protobuf:"bytes,4,opt,name=owner_identity_pubkey,json=ownerIdentityPubkey,proto3" json:"owner_identity_pubkey,omitempty"`
	OwnerSigningPubkey  []byte  `protobuf:"bytes,5,opt,name=owner_signing_pubkey,json=ownerSigningPubkey,proto3" json:"owner_signing_pubkey,omitempty"`
	RawTx               []byte  `protobuf:"bytes,6,opt,name=raw_tx,json=rawTx,proto3" json:"raw_tx,omitempty"`
	RawRefundTx         []byte  `protobuf:"bytes,7,opt,name=raw_refund_tx,json=rawRefundTx,proto3" json:"raw_refund_tx,omitempty"`
	TreeId              string  `protobuf:"bytes,8,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
	ParentNodeId        *string `protobuf:"bytes,9,opt,name=parent_node_id,json=parentNodeId,proto3,oneof" json:"parent_node_id,omitempty"`
	SigningKeyshareId   string  `protobuf:"bytes,10,opt,name=signing_keyshare_id,json=signingKeyshareId,proto3" json:"signing_keyshare_id,omitempty"`
	Vout                uint32  `protobuf:"varint,11,opt,name=vout,proto3" json:"vout,omitempty"`
	RefundTimelock      uint32  `protobuf:"varint,12,opt,name=refund_timelock,json=refundTimelock,proto3" json:"refund_timelock,omitempty"`
}

func (x *TreeNode) Reset() {
	*x = TreeNode{}
	mi := &file_spark_internal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNode) ProtoMessage() {}

func (x *TreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNode.ProtoReflect.Descriptor instead.
func (*TreeNode) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{13}
}

func (x *TreeNode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TreeNode) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TreeNode) GetVerifyingPubkey() []byte {
	if x != nil {
		return x.VerifyingPubkey
	}
	return nil
}

func (x *TreeNode) GetOwnerIdentityPubkey() []byte {
	if x != nil {
		return x.OwnerIdentityPubkey
	}
	return nil
}

func (x *TreeNode) GetOwnerSigningPubkey() []byte {
	if x != nil {
		return x.OwnerSigningPubkey
	}
	return nil
}

func (x *TreeNode) GetRawTx() []byte {
	if x != nil {
		return x.RawTx
	}
	return nil
}

func (x *TreeNode) GetRawRefundTx() []byte {
	if x != nil {
		return x.RawRefundTx
	}
	return nil
}

func (x *TreeNode) GetTreeId() string {
	if x != nil {
		return x.TreeId
	}
	return ""
}

func (x *TreeNode) GetParentNodeId() string {
	if x != nil && x.ParentNodeId != nil {
		return *x.ParentNodeId
	}
	return ""
}

func (x *TreeNode) GetSigningKeyshareId() string {
	if x != nil {
		return x.SigningKeyshareId
	}
	return ""
}

func (x *TreeNode) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *TreeNode) GetRefundTimelock() uint32 {
	if x != nil {
		return x.RefundTimelock
	}
	return 0
}

type GetPreimageShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentHash       []byte                    `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	UserSignedRefunds []*spark.UserSignedRefund `protobuf:"bytes,2,rep,name=user_signed_refunds,json=userSignedRefunds,proto3" json:"user_signed_refunds,omitempty"`
	InvoiceAmount     *spark.InvoiceAmount      `protobuf:"bytes,3,opt,name=invoice_amount,json=invoiceAmount,proto3" json:"invoice_amount,omitempty"`
}

func (x *GetPreimageShareRequest) Reset() {
	*x = GetPreimageShareRequest{}
	mi := &file_spark_internal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreimageShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreimageShareRequest) ProtoMessage() {}

func (x *GetPreimageShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreimageShareRequest.ProtoReflect.Descriptor instead.
func (*GetPreimageShareRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{14}
}

func (x *GetPreimageShareRequest) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *GetPreimageShareRequest) GetUserSignedRefunds() []*spark.UserSignedRefund {
	if x != nil {
		return x.UserSignedRefunds
	}
	return nil
}

func (x *GetPreimageShareRequest) GetInvoiceAmount() *spark.InvoiceAmount {
	if x != nil {
		return x.InvoiceAmount
	}
	return nil
}

type GetPreimageShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreimageShare []byte `protobuf:"bytes,1,opt,name=preimage_share,json=preimageShare,proto3" json:"preimage_share,omitempty"`
}

func (x *GetPreimageShareResponse) Reset() {
	*x = GetPreimageShareResponse{}
	mi := &file_spark_internal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPreimageShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPreimageShareResponse) ProtoMessage() {}

func (x *GetPreimageShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPreimageShareResponse.ProtoReflect.Descriptor instead.
func (*GetPreimageShareResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{15}
}

func (x *GetPreimageShareResponse) GetPreimageShare() []byte {
	if x != nil {
		return x.PreimageShare
	}
	return nil
}

type PrepareTreeAddressNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigningKeyshareId string                    `protobuf:"bytes,1,opt,name=signing_keyshare_id,json=signingKeyshareId,proto3" json:"signing_keyshare_id,omitempty"`
	UserPublicKey     []byte                    `protobuf:"bytes,2,opt,name=user_public_key,json=userPublicKey,proto3" json:"user_public_key,omitempty"`
	Children          []*PrepareTreeAddressNode `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *PrepareTreeAddressNode) Reset() {
	*x = PrepareTreeAddressNode{}
	mi := &file_spark_internal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareTreeAddressNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareTreeAddressNode) ProtoMessage() {}

func (x *PrepareTreeAddressNode) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareTreeAddressNode.ProtoReflect.Descriptor instead.
func (*PrepareTreeAddressNode) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{16}
}

func (x *PrepareTreeAddressNode) GetSigningKeyshareId() string {
	if x != nil {
		return x.SigningKeyshareId
	}
	return ""
}

func (x *PrepareTreeAddressNode) GetUserPublicKey() []byte {
	if x != nil {
		return x.UserPublicKey
	}
	return nil
}

func (x *PrepareTreeAddressNode) GetChildren() []*PrepareTreeAddressNode {
	if x != nil {
		return x.Children
	}
	return nil
}

type PrepareTreeAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetKeyshareId string                  `protobuf:"bytes,1,opt,name=target_keyshare_id,json=targetKeyshareId,proto3" json:"target_keyshare_id,omitempty"`
	Node             *PrepareTreeAddressNode `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	// TODO: This should be removed once we have a proper auth process.
	UserIdentityPublicKey []byte `protobuf:"bytes,3,opt,name=user_identity_public_key,json=userIdentityPublicKey,proto3" json:"user_identity_public_key,omitempty"`
}

func (x *PrepareTreeAddressRequest) Reset() {
	*x = PrepareTreeAddressRequest{}
	mi := &file_spark_internal_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareTreeAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareTreeAddressRequest) ProtoMessage() {}

func (x *PrepareTreeAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareTreeAddressRequest.ProtoReflect.Descriptor instead.
func (*PrepareTreeAddressRequest) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{17}
}

func (x *PrepareTreeAddressRequest) GetTargetKeyshareId() string {
	if x != nil {
		return x.TargetKeyshareId
	}
	return ""
}

func (x *PrepareTreeAddressRequest) GetNode() *PrepareTreeAddressNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *PrepareTreeAddressRequest) GetUserIdentityPublicKey() []byte {
	if x != nil {
		return x.UserIdentityPublicKey
	}
	return nil
}

type PrepareTreeAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signatures map[string][]byte `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PrepareTreeAddressResponse) Reset() {
	*x = PrepareTreeAddressResponse{}
	mi := &file_spark_internal_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareTreeAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareTreeAddressResponse) ProtoMessage() {}

func (x *PrepareTreeAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spark_internal_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareTreeAddressResponse.ProtoReflect.Descriptor instead.
func (*PrepareTreeAddressResponse) Descriptor() ([]byte, []int) {
	return file_spark_internal_proto_rawDescGZIP(), []int{18}
}

func (x *PrepareTreeAddressResponse) GetSignatures() map[string][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

var File_spark_internal_proto protoreflect.FileDescriptor

var file_spark_internal_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x3d, 0x0a, 0x1a, 0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x41, 0x73, 0x55, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0xd5,
	0x01, 0x0a, 0x24, 0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65,
	0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x18, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x15, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x54, 0x0a, 0x25, 0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65,
	0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x37, 0x0a, 0x12,
	0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x13, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x13,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x0a, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b,
	0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x4d,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x59, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53,
	0x0a, 0x12, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4a,
	0x6f, 0x62, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x72,
	0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x1c, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x22, 0x4d, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x7b, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x1f,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0xa4, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc0, 0x03, 0x0a, 0x08, 0x54, 0x72, 0x65, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x61,
	0x77, 0x5f, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x61, 0x77, 0x54,
	0x78, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x74, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x54, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x47, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x22, 0xb4, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x65, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x37, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73,
	0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x32, 0xc8, 0x09, 0x0a, 0x14, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x16,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x41, 0x73, 0x55, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a,
	0x21, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x34, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65,
	0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x65, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x31, 0x12, 0x22, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x12, 0x22, 0x2e,
	0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46,
	0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x13, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x12, 0x28, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x70, 0x61, 0x72,
	0x6b, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x27, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x14, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x65, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x38,
	0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b,
	0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spark_internal_proto_rawDescOnce sync.Once
	file_spark_internal_proto_rawDescData = file_spark_internal_proto_rawDesc
)

func file_spark_internal_proto_rawDescGZIP() []byte {
	file_spark_internal_proto_rawDescOnce.Do(func() {
		file_spark_internal_proto_rawDescData = protoimpl.X.CompressGZIP(file_spark_internal_proto_rawDescData)
	})
	return file_spark_internal_proto_rawDescData
}

var file_spark_internal_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_spark_internal_proto_goTypes = []any{
	(*MarkKeysharesAsUsedRequest)(nil),            // 0: spark_internal.MarkKeysharesAsUsedRequest
	(*MarkKeyshareForDepositAddressRequest)(nil),  // 1: spark_internal.MarkKeyshareForDepositAddressRequest
	(*MarkKeyshareForDepositAddressResponse)(nil), // 2: spark_internal.MarkKeyshareForDepositAddressResponse
	(*FrostRound1Request)(nil),                    // 3: spark_internal.FrostRound1Request
	(*FrostRound1Response)(nil),                   // 4: spark_internal.FrostRound1Response
	(*SigningJob)(nil),                            // 5: spark_internal.SigningJob
	(*FrostRound2Request)(nil),                    // 6: spark_internal.FrostRound2Request
	(*FrostRound2Response)(nil),                   // 7: spark_internal.FrostRound2Response
	(*PrepareSplitKeysharesRequest)(nil),          // 8: spark_internal.PrepareSplitKeysharesRequest
	(*FinalizeTreeCreationRequest)(nil),           // 9: spark_internal.FinalizeTreeCreationRequest
	(*FinalizeNodeSplitRequest)(nil),              // 10: spark_internal.FinalizeNodeSplitRequest
	(*FinalizeNodesAggregationRequest)(nil),       // 11: spark_internal.FinalizeNodesAggregationRequest
	(*FinalizeTransferRequest)(nil),               // 12: spark_internal.FinalizeTransferRequest
	(*TreeNode)(nil),                              // 13: spark_internal.TreeNode
	(*GetPreimageShareRequest)(nil),               // 14: spark_internal.GetPreimageShareRequest
	(*GetPreimageShareResponse)(nil),              // 15: spark_internal.GetPreimageShareResponse
	(*PrepareTreeAddressNode)(nil),                // 16: spark_internal.PrepareTreeAddressNode
	(*PrepareTreeAddressRequest)(nil),             // 17: spark_internal.PrepareTreeAddressRequest
	(*PrepareTreeAddressResponse)(nil),            // 18: spark_internal.PrepareTreeAddressResponse
	nil,                                           // 19: spark_internal.SigningJob.CommitmentsEntry
	nil,                                           // 20: spark_internal.FrostRound2Response.ResultsEntry
	nil,                                           // 21: spark_internal.PrepareTreeAddressResponse.SignaturesEntry
	(*common.SigningCommitment)(nil),              // 22: common.SigningCommitment
	(*timestamppb.Timestamp)(nil),                 // 23: google.protobuf.Timestamp
	(*spark.UserSignedRefund)(nil),                // 24: spark.UserSignedRefund
	(*spark.InvoiceAmount)(nil),                   // 25: spark.InvoiceAmount
	(*common.SigningResult)(nil),                  // 26: common.SigningResult
	(*spark.AggregateNodesRequest)(nil),           // 27: spark.AggregateNodesRequest
	(*emptypb.Empty)(nil),                         // 28: google.protobuf.Empty
}
var file_spark_internal_proto_depIdxs = []int32{
	22, // 0: spark_internal.FrostRound1Response.signing_commitments:type_name -> common.SigningCommitment
	19, // 1: spark_internal.SigningJob.commitments:type_name -> spark_internal.SigningJob.CommitmentsEntry
	22, // 2: spark_internal.SigningJob.user_commitments:type_name -> common.SigningCommitment
	5,  // 3: spark_internal.FrostRound2Request.signing_jobs:type_name -> spark_internal.SigningJob
	20, // 4: spark_internal.FrostRound2Response.results:type_name -> spark_internal.FrostRound2Response.ResultsEntry
	13, // 5: spark_internal.FinalizeTreeCreationRequest.nodes:type_name -> spark_internal.TreeNode
	13, // 6: spark_internal.FinalizeNodeSplitRequest.child_nodes:type_name -> spark_internal.TreeNode
	13, // 7: spark_internal.FinalizeNodesAggregationRequest.nodes:type_name -> spark_internal.TreeNode
	13, // 8: spark_internal.FinalizeTransferRequest.nodes:type_name -> spark_internal.TreeNode
	23, // 9: spark_internal.FinalizeTransferRequest.timestamp:type_name -> google.protobuf.Timestamp
	24, // 10: spark_internal.GetPreimageShareRequest.user_signed_refunds:type_name -> spark.UserSignedRefund
	25, // 11: spark_internal.GetPreimageShareRequest.invoice_amount:type_name -> spark.InvoiceAmount
	16, // 12: spark_internal.PrepareTreeAddressNode.children:type_name -> spark_internal.PrepareTreeAddressNode
	16, // 13: spark_internal.PrepareTreeAddressRequest.node:type_name -> spark_internal.PrepareTreeAddressNode
	21, // 14: spark_internal.PrepareTreeAddressResponse.signatures:type_name -> spark_internal.PrepareTreeAddressResponse.SignaturesEntry
	22, // 15: spark_internal.SigningJob.CommitmentsEntry.value:type_name -> common.SigningCommitment
	26, // 16: spark_internal.FrostRound2Response.ResultsEntry.value:type_name -> common.SigningResult
	0,  // 17: spark_internal.SparkInternalService.mark_keyshares_as_used:input_type -> spark_internal.MarkKeysharesAsUsedRequest
	1,  // 18: spark_internal.SparkInternalService.mark_keyshare_for_deposit_address:input_type -> spark_internal.MarkKeyshareForDepositAddressRequest
	9,  // 19: spark_internal.SparkInternalService.finalize_tree_creation:input_type -> spark_internal.FinalizeTreeCreationRequest
	3,  // 20: spark_internal.SparkInternalService.frost_round1:input_type -> spark_internal.FrostRound1Request
	6,  // 21: spark_internal.SparkInternalService.frost_round2:input_type -> spark_internal.FrostRound2Request
	8,  // 22: spark_internal.SparkInternalService.prepare_split_keyshares:input_type -> spark_internal.PrepareSplitKeysharesRequest
	10, // 23: spark_internal.SparkInternalService.finalize_node_split:input_type -> spark_internal.FinalizeNodeSplitRequest
	27, // 24: spark_internal.SparkInternalService.aggregate_nodes:input_type -> spark.AggregateNodesRequest
	11, // 25: spark_internal.SparkInternalService.finalize_nodes_aggregation:input_type -> spark_internal.FinalizeNodesAggregationRequest
	12, // 26: spark_internal.SparkInternalService.finalize_transfer:input_type -> spark_internal.FinalizeTransferRequest
	14, // 27: spark_internal.SparkInternalService.get_preimage_share:input_type -> spark_internal.GetPreimageShareRequest
	17, // 28: spark_internal.SparkInternalService.prepare_tree_address:input_type -> spark_internal.PrepareTreeAddressRequest
	28, // 29: spark_internal.SparkInternalService.mark_keyshares_as_used:output_type -> google.protobuf.Empty
	2,  // 30: spark_internal.SparkInternalService.mark_keyshare_for_deposit_address:output_type -> spark_internal.MarkKeyshareForDepositAddressResponse
	28, // 31: spark_internal.SparkInternalService.finalize_tree_creation:output_type -> google.protobuf.Empty
	4,  // 32: spark_internal.SparkInternalService.frost_round1:output_type -> spark_internal.FrostRound1Response
	7,  // 33: spark_internal.SparkInternalService.frost_round2:output_type -> spark_internal.FrostRound2Response
	28, // 34: spark_internal.SparkInternalService.prepare_split_keyshares:output_type -> google.protobuf.Empty
	28, // 35: spark_internal.SparkInternalService.finalize_node_split:output_type -> google.protobuf.Empty
	28, // 36: spark_internal.SparkInternalService.aggregate_nodes:output_type -> google.protobuf.Empty
	28, // 37: spark_internal.SparkInternalService.finalize_nodes_aggregation:output_type -> google.protobuf.Empty
	28, // 38: spark_internal.SparkInternalService.finalize_transfer:output_type -> google.protobuf.Empty
	15, // 39: spark_internal.SparkInternalService.get_preimage_share:output_type -> spark_internal.GetPreimageShareResponse
	18, // 40: spark_internal.SparkInternalService.prepare_tree_address:output_type -> spark_internal.PrepareTreeAddressResponse
	29, // [29:41] is the sub-list for method output_type
	17, // [17:29] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_spark_internal_proto_init() }
func file_spark_internal_proto_init() {
	if File_spark_internal_proto != nil {
		return
	}
	file_spark_internal_proto_msgTypes[13].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spark_internal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spark_internal_proto_goTypes,
		DependencyIndexes: file_spark_internal_proto_depIdxs,
		MessageInfos:      file_spark_internal_proto_msgTypes,
	}.Build()
	File_spark_internal_proto = out.File
	file_spark_internal_proto_rawDesc = nil
	file_spark_internal_proto_goTypes = nil
	file_spark_internal_proto_depIdxs = nil
}
