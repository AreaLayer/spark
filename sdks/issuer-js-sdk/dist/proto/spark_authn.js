// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: spark_authn.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "spark_authn";
function createBaseChallenge() {
    return { version: 0, timestamp: 0, nonce: new Uint8Array(0), publicKey: new Uint8Array(0) };
}
export const Challenge = {
    encode(message, writer = new BinaryWriter()) {
        if (message.version !== 0) {
            writer.uint32(8).int32(message.version);
        }
        if (message.timestamp !== 0) {
            writer.uint32(16).int64(message.timestamp);
        }
        if (message.nonce.length !== 0) {
            writer.uint32(26).bytes(message.nonce);
        }
        if (message.publicKey.length !== 0) {
            writer.uint32(34).bytes(message.publicKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.version = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.timestamp = longToNumber(reader.int64());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nonce = reader.bytes();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.publicKey = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? globalThis.Number(object.version) : 0,
            timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
            nonce: isSet(object.nonce) ? bytesFromBase64(object.nonce) : new Uint8Array(0),
            publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== 0) {
            obj.version = Math.round(message.version);
        }
        if (message.timestamp !== 0) {
            obj.timestamp = Math.round(message.timestamp);
        }
        if (message.nonce.length !== 0) {
            obj.nonce = base64FromBytes(message.nonce);
        }
        if (message.publicKey.length !== 0) {
            obj.publicKey = base64FromBytes(message.publicKey);
        }
        return obj;
    },
    create(base) {
        return Challenge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseChallenge();
        message.version = object.version ?? 0;
        message.timestamp = object.timestamp ?? 0;
        message.nonce = object.nonce ?? new Uint8Array(0);
        message.publicKey = object.publicKey ?? new Uint8Array(0);
        return message;
    },
};
function createBaseProtectedChallenge() {
    return { version: 0, challenge: undefined, serverHmac: new Uint8Array(0) };
}
export const ProtectedChallenge = {
    encode(message, writer = new BinaryWriter()) {
        if (message.version !== 0) {
            writer.uint32(8).int32(message.version);
        }
        if (message.challenge !== undefined) {
            Challenge.encode(message.challenge, writer.uint32(18).fork()).join();
        }
        if (message.serverHmac.length !== 0) {
            writer.uint32(26).bytes(message.serverHmac);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProtectedChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.version = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.challenge = Challenge.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.serverHmac = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? globalThis.Number(object.version) : 0,
            challenge: isSet(object.challenge) ? Challenge.fromJSON(object.challenge) : undefined,
            serverHmac: isSet(object.serverHmac) ? bytesFromBase64(object.serverHmac) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== 0) {
            obj.version = Math.round(message.version);
        }
        if (message.challenge !== undefined) {
            obj.challenge = Challenge.toJSON(message.challenge);
        }
        if (message.serverHmac.length !== 0) {
            obj.serverHmac = base64FromBytes(message.serverHmac);
        }
        return obj;
    },
    create(base) {
        return ProtectedChallenge.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProtectedChallenge();
        message.version = object.version ?? 0;
        message.challenge = (object.challenge !== undefined && object.challenge !== null)
            ? Challenge.fromPartial(object.challenge)
            : undefined;
        message.serverHmac = object.serverHmac ?? new Uint8Array(0);
        return message;
    },
};
function createBaseGetChallengeRequest() {
    return { publicKey: new Uint8Array(0) };
}
export const GetChallengeRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.publicKey.length !== 0) {
            writer.uint32(10).bytes(message.publicKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetChallengeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.publicKey = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.publicKey.length !== 0) {
            obj.publicKey = base64FromBytes(message.publicKey);
        }
        return obj;
    },
    create(base) {
        return GetChallengeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetChallengeRequest();
        message.publicKey = object.publicKey ?? new Uint8Array(0);
        return message;
    },
};
function createBaseGetChallengeResponse() {
    return { protectedChallenge: undefined };
}
export const GetChallengeResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.protectedChallenge !== undefined) {
            ProtectedChallenge.encode(message.protectedChallenge, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetChallengeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.protectedChallenge = ProtectedChallenge.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            protectedChallenge: isSet(object.protectedChallenge)
                ? ProtectedChallenge.fromJSON(object.protectedChallenge)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.protectedChallenge !== undefined) {
            obj.protectedChallenge = ProtectedChallenge.toJSON(message.protectedChallenge);
        }
        return obj;
    },
    create(base) {
        return GetChallengeResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetChallengeResponse();
        message.protectedChallenge = (object.protectedChallenge !== undefined && object.protectedChallenge !== null)
            ? ProtectedChallenge.fromPartial(object.protectedChallenge)
            : undefined;
        return message;
    },
};
function createBaseVerifyChallengeRequest() {
    return { protectedChallenge: undefined, signature: new Uint8Array(0), publicKey: new Uint8Array(0) };
}
export const VerifyChallengeRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.protectedChallenge !== undefined) {
            ProtectedChallenge.encode(message.protectedChallenge, writer.uint32(10).fork()).join();
        }
        if (message.signature.length !== 0) {
            writer.uint32(18).bytes(message.signature);
        }
        if (message.publicKey.length !== 0) {
            writer.uint32(26).bytes(message.publicKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyChallengeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.protectedChallenge = ProtectedChallenge.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.signature = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.publicKey = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            protectedChallenge: isSet(object.protectedChallenge)
                ? ProtectedChallenge.fromJSON(object.protectedChallenge)
                : undefined,
            signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(0),
            publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.protectedChallenge !== undefined) {
            obj.protectedChallenge = ProtectedChallenge.toJSON(message.protectedChallenge);
        }
        if (message.signature.length !== 0) {
            obj.signature = base64FromBytes(message.signature);
        }
        if (message.publicKey.length !== 0) {
            obj.publicKey = base64FromBytes(message.publicKey);
        }
        return obj;
    },
    create(base) {
        return VerifyChallengeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyChallengeRequest();
        message.protectedChallenge = (object.protectedChallenge !== undefined && object.protectedChallenge !== null)
            ? ProtectedChallenge.fromPartial(object.protectedChallenge)
            : undefined;
        message.signature = object.signature ?? new Uint8Array(0);
        message.publicKey = object.publicKey ?? new Uint8Array(0);
        return message;
    },
};
function createBaseVerifyChallengeResponse() {
    return { sessionToken: "", expirationTimestamp: 0 };
}
export const VerifyChallengeResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sessionToken !== "") {
            writer.uint32(10).string(message.sessionToken);
        }
        if (message.expirationTimestamp !== 0) {
            writer.uint32(16).int64(message.expirationTimestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVerifyChallengeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sessionToken = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.expirationTimestamp = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sessionToken: isSet(object.sessionToken) ? globalThis.String(object.sessionToken) : "",
            expirationTimestamp: isSet(object.expirationTimestamp) ? globalThis.Number(object.expirationTimestamp) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sessionToken !== "") {
            obj.sessionToken = message.sessionToken;
        }
        if (message.expirationTimestamp !== 0) {
            obj.expirationTimestamp = Math.round(message.expirationTimestamp);
        }
        return obj;
    },
    create(base) {
        return VerifyChallengeResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVerifyChallengeResponse();
        message.sessionToken = object.sessionToken ?? "";
        message.expirationTimestamp = object.expirationTimestamp ?? 0;
        return message;
    },
};
export const SparkAuthnServiceDefinition = {
    name: "SparkAuthnService",
    fullName: "spark_authn.SparkAuthnService",
    methods: {
        /** Request a new authentication challenge for a public key */
        get_challenge: {
            name: "get_challenge",
            requestType: GetChallengeRequest,
            requestStream: false,
            responseType: GetChallengeResponse,
            responseStream: false,
            options: {},
        },
        /** Verify a signed challenge and return a session token */
        verify_challenge: {
            name: "verify_challenge",
            requestType: VerifyChallengeRequest,
            requestStream: false,
            responseType: VerifyChallengeResponse,
            responseStream: false,
            options: {},
        },
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=spark_authn.js.map