// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: common.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "common";
export var SignatureIntent;
(function (SignatureIntent) {
    SignatureIntent[SignatureIntent["CREATION"] = 0] = "CREATION";
    SignatureIntent[SignatureIntent["TRANSFER"] = 1] = "TRANSFER";
    SignatureIntent[SignatureIntent["AGGREGATE"] = 2] = "AGGREGATE";
    SignatureIntent[SignatureIntent["REFRESH"] = 3] = "REFRESH";
    SignatureIntent[SignatureIntent["EXTEND"] = 4] = "EXTEND";
    SignatureIntent[SignatureIntent["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SignatureIntent || (SignatureIntent = {}));
export function signatureIntentFromJSON(object) {
    switch (object) {
        case 0:
        case "CREATION":
            return SignatureIntent.CREATION;
        case 1:
        case "TRANSFER":
            return SignatureIntent.TRANSFER;
        case 2:
        case "AGGREGATE":
            return SignatureIntent.AGGREGATE;
        case 3:
        case "REFRESH":
            return SignatureIntent.REFRESH;
        case 4:
        case "EXTEND":
            return SignatureIntent.EXTEND;
        case -1:
        case "UNRECOGNIZED":
        default:
            return SignatureIntent.UNRECOGNIZED;
    }
}
export function signatureIntentToJSON(object) {
    switch (object) {
        case SignatureIntent.CREATION:
            return "CREATION";
        case SignatureIntent.TRANSFER:
            return "TRANSFER";
        case SignatureIntent.AGGREGATE:
            return "AGGREGATE";
        case SignatureIntent.REFRESH:
            return "REFRESH";
        case SignatureIntent.EXTEND:
            return "EXTEND";
        case SignatureIntent.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBasePackageMap() {
    return { packages: {} };
}
export const PackageMap = {
    encode(message, writer = new BinaryWriter()) {
        Object.entries(message.packages).forEach(([key, value]) => {
            PackageMap_PackagesEntry.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePackageMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = PackageMap_PackagesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.packages[entry1.key] = entry1.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            packages: isObject(object.packages)
                ? Object.entries(object.packages).reduce((acc, [key, value]) => {
                    acc[key] = bytesFromBase64(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.packages) {
            const entries = Object.entries(message.packages);
            if (entries.length > 0) {
                obj.packages = {};
                entries.forEach(([k, v]) => {
                    obj.packages[k] = base64FromBytes(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return PackageMap.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePackageMap();
        message.packages = Object.entries(object.packages ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        return message;
    },
};
function createBasePackageMap_PackagesEntry() {
    return { key: "", value: new Uint8Array(0) };
}
export const PackageMap_PackagesEntry = {
    encode(message, writer = new BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePackageMap_PackagesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return PackageMap_PackagesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePackageMap_PackagesEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? new Uint8Array(0);
        return message;
    },
};
function createBaseSigningCommitment() {
    return { hiding: new Uint8Array(0), binding: new Uint8Array(0) };
}
export const SigningCommitment = {
    encode(message, writer = new BinaryWriter()) {
        if (message.hiding.length !== 0) {
            writer.uint32(10).bytes(message.hiding);
        }
        if (message.binding.length !== 0) {
            writer.uint32(18).bytes(message.binding);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSigningCommitment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.hiding = reader.bytes();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.binding = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hiding: isSet(object.hiding) ? bytesFromBase64(object.hiding) : new Uint8Array(0),
            binding: isSet(object.binding) ? bytesFromBase64(object.binding) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.hiding.length !== 0) {
            obj.hiding = base64FromBytes(message.hiding);
        }
        if (message.binding.length !== 0) {
            obj.binding = base64FromBytes(message.binding);
        }
        return obj;
    },
    create(base) {
        return SigningCommitment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSigningCommitment();
        message.hiding = object.hiding ?? new Uint8Array(0);
        message.binding = object.binding ?? new Uint8Array(0);
        return message;
    },
};
function createBaseSigningResult() {
    return { signatureShare: new Uint8Array(0) };
}
export const SigningResult = {
    encode(message, writer = new BinaryWriter()) {
        if (message.signatureShare.length !== 0) {
            writer.uint32(10).bytes(message.signatureShare);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSigningResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.signatureShare = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signatureShare: isSet(object.signatureShare) ? bytesFromBase64(object.signatureShare) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.signatureShare.length !== 0) {
            obj.signatureShare = base64FromBytes(message.signatureShare);
        }
        return obj;
    },
    create(base) {
        return SigningResult.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSigningResult();
        message.signatureShare = object.signatureShare ?? new Uint8Array(0);
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=common.js.map