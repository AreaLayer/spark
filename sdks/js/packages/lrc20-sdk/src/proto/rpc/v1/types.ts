// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: rpc/v1/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp.js";

export const protobufPackage = "rpc.v1";

export enum Layer {
  L1 = 0,
  SPARK = 1,
  UNRECOGNIZED = -1,
}

export function layerFromJSON(object: any): Layer {
  switch (object) {
    case 0:
    case "L1":
      return Layer.L1;
    case 1:
    case "SPARK":
      return Layer.SPARK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Layer.UNRECOGNIZED;
  }
}

export function layerToJSON(object: Layer): string {
  switch (object) {
    case Layer.L1:
      return "L1";
    case Layer.SPARK:
      return "SPARK";
    case Layer.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum OperationType {
  /** USER_TRANSFER - User operations */
  USER_TRANSFER = 0,
  USER_BURN = 1,
  /** ISSUER_ANNOUNCE - Issuer operations */
  ISSUER_ANNOUNCE = 2,
  ISSUER_MINT = 3,
  ISSUER_TRANSFER = 4,
  ISSUER_FREEZE = 5,
  ISSUER_UNFREEZE = 6,
  ISSUER_BURN = 7,
  UNRECOGNIZED = -1,
}

export function operationTypeFromJSON(object: any): OperationType {
  switch (object) {
    case 0:
    case "USER_TRANSFER":
      return OperationType.USER_TRANSFER;
    case 1:
    case "USER_BURN":
      return OperationType.USER_BURN;
    case 2:
    case "ISSUER_ANNOUNCE":
      return OperationType.ISSUER_ANNOUNCE;
    case 3:
    case "ISSUER_MINT":
      return OperationType.ISSUER_MINT;
    case 4:
    case "ISSUER_TRANSFER":
      return OperationType.ISSUER_TRANSFER;
    case 5:
    case "ISSUER_FREEZE":
      return OperationType.ISSUER_FREEZE;
    case 6:
    case "ISSUER_UNFREEZE":
      return OperationType.ISSUER_UNFREEZE;
    case 7:
    case "ISSUER_BURN":
      return OperationType.ISSUER_BURN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationType.UNRECOGNIZED;
  }
}

export function operationTypeToJSON(object: OperationType): string {
  switch (object) {
    case OperationType.USER_TRANSFER:
      return "USER_TRANSFER";
    case OperationType.USER_BURN:
      return "USER_BURN";
    case OperationType.ISSUER_ANNOUNCE:
      return "ISSUER_ANNOUNCE";
    case OperationType.ISSUER_MINT:
      return "ISSUER_MINT";
    case OperationType.ISSUER_TRANSFER:
      return "ISSUER_TRANSFER";
    case OperationType.ISSUER_FREEZE:
      return "ISSUER_FREEZE";
    case OperationType.ISSUER_UNFREEZE:
      return "ISSUER_UNFREEZE";
    case OperationType.ISSUER_BURN:
      return "ISSUER_BURN";
    case OperationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum OnChainTransactionStatus {
  PENDING = 0,
  CONFIRMED = 1,
  WAITING_MINED = 2,
  MINED = 3,
  ATTACHING = 4,
  ATTACHED = 5,
  UNRECOGNIZED = -1,
}

export function onChainTransactionStatusFromJSON(object: any): OnChainTransactionStatus {
  switch (object) {
    case 0:
    case "PENDING":
      return OnChainTransactionStatus.PENDING;
    case 1:
    case "CONFIRMED":
      return OnChainTransactionStatus.CONFIRMED;
    case 2:
    case "WAITING_MINED":
      return OnChainTransactionStatus.WAITING_MINED;
    case 3:
    case "MINED":
      return OnChainTransactionStatus.MINED;
    case 4:
    case "ATTACHING":
      return OnChainTransactionStatus.ATTACHING;
    case 5:
    case "ATTACHED":
      return OnChainTransactionStatus.ATTACHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OnChainTransactionStatus.UNRECOGNIZED;
  }
}

export function onChainTransactionStatusToJSON(object: OnChainTransactionStatus): string {
  switch (object) {
    case OnChainTransactionStatus.PENDING:
      return "PENDING";
    case OnChainTransactionStatus.CONFIRMED:
      return "CONFIRMED";
    case OnChainTransactionStatus.WAITING_MINED:
      return "WAITING_MINED";
    case OnChainTransactionStatus.MINED:
      return "MINED";
    case OnChainTransactionStatus.ATTACHING:
      return "ATTACHING";
    case OnChainTransactionStatus.ATTACHED:
      return "ATTACHED";
    case OnChainTransactionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SparkTransactionStatus {
  STARTED = 0,
  SIGNED = 1,
  FINALIZED = 2,
  UNRECOGNIZED = -1,
}

export function sparkTransactionStatusFromJSON(object: any): SparkTransactionStatus {
  switch (object) {
    case 0:
    case "STARTED":
      return SparkTransactionStatus.STARTED;
    case 1:
    case "SIGNED":
      return SparkTransactionStatus.SIGNED;
    case 2:
    case "FINALIZED":
      return SparkTransactionStatus.FINALIZED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SparkTransactionStatus.UNRECOGNIZED;
  }
}

export function sparkTransactionStatusToJSON(object: SparkTransactionStatus): string {
  switch (object) {
    case SparkTransactionStatus.STARTED:
      return "STARTED";
    case SparkTransactionStatus.SIGNED:
      return "SIGNED";
    case SparkTransactionStatus.FINALIZED:
      return "FINALIZED";
    case SparkTransactionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Transaction {
  transaction?:
    | { $case: "onChain"; onChain: OnChainTransaction }
    | { $case: "spark"; spark: SparkTransaction }
    | undefined;
}

export interface ListAllTokenTransactionsCursor {
  /** tx_hash of the last tx fetched */
  lastTransactionHash: Uint8Array;
  /** whether the last_tx_hash is on chain */
  layer: Layer;
}

export interface OnChainTokenOutput {
  rawTx: Uint8Array;
  vout: number;
  amountSats: number;
  tokenPublicKey?: string | undefined;
  tokenAmount?: Uint8Array | undefined;
}

export interface OnChainTransaction {
  operationType: OperationType;
  transactionHash: Uint8Array;
  rawtx: Uint8Array;
  status: OnChainTransactionStatus;
  inputs: OnChainTokenOutput[];
  outputs: OnChainTokenOutput[];
  broadcastedAt: Date | undefined;
  confirmedAt: Date | undefined;
}

export interface SparkTransaction {
  operationType: OperationType;
  transactionHash: Uint8Array;
  status: SparkTransactionStatus;
  confirmedAt: Date | undefined;
  leavesToCreate: SparkLeaf[];
  leavesToSpend: SparkLeaf[];
  sparkOperatorIdentityPublicKeys: Uint8Array[];
}

export interface SparkLeaf {
  tokenPublicKey: Uint8Array;
  id: string;
  ownerPublicKey: Uint8Array;
  revocationPublicKey: Uint8Array;
  withdrawalBondSats: number;
  withdrawalLocktime: number;
  tokenAmount: Uint8Array;
  createTxHash: Uint8Array;
  createTxVoutIndex: number;
  spendTxHash?: Uint8Array | undefined;
  spendTxVoutIndex?: number | undefined;
  isFrozen?: boolean | undefined;
}

function createBaseTransaction(): Transaction {
  return { transaction: undefined };
}

export const Transaction: MessageFns<Transaction> = {
  encode(message: Transaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.transaction?.$case) {
      case "onChain":
        OnChainTransaction.encode(message.transaction.onChain, writer.uint32(10).fork()).join();
        break;
      case "spark":
        SparkTransaction.encode(message.transaction.spark, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transaction = { $case: "onChain", onChain: OnChainTransaction.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transaction = { $case: "spark", spark: SparkTransaction.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transaction {
    return {
      transaction: isSet(object.onChain)
        ? { $case: "onChain", onChain: OnChainTransaction.fromJSON(object.onChain) }
        : isSet(object.spark)
        ? { $case: "spark", spark: SparkTransaction.fromJSON(object.spark) }
        : undefined,
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.transaction?.$case === "onChain") {
      obj.onChain = OnChainTransaction.toJSON(message.transaction.onChain);
    } else if (message.transaction?.$case === "spark") {
      obj.spark = SparkTransaction.toJSON(message.transaction.spark);
    }
    return obj;
  },

  create(base?: DeepPartial<Transaction>): Transaction {
    return Transaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Transaction>): Transaction {
    const message = createBaseTransaction();
    switch (object.transaction?.$case) {
      case "onChain": {
        if (object.transaction?.onChain !== undefined && object.transaction?.onChain !== null) {
          message.transaction = {
            $case: "onChain",
            onChain: OnChainTransaction.fromPartial(object.transaction.onChain),
          };
        }
        break;
      }
      case "spark": {
        if (object.transaction?.spark !== undefined && object.transaction?.spark !== null) {
          message.transaction = { $case: "spark", spark: SparkTransaction.fromPartial(object.transaction.spark) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseListAllTokenTransactionsCursor(): ListAllTokenTransactionsCursor {
  return { lastTransactionHash: new Uint8Array(0), layer: 0 };
}

export const ListAllTokenTransactionsCursor: MessageFns<ListAllTokenTransactionsCursor> = {
  encode(message: ListAllTokenTransactionsCursor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastTransactionHash.length !== 0) {
      writer.uint32(10).bytes(message.lastTransactionHash);
    }
    if (message.layer !== 0) {
      writer.uint32(16).int32(message.layer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAllTokenTransactionsCursor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllTokenTransactionsCursor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lastTransactionHash = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllTokenTransactionsCursor {
    return {
      lastTransactionHash: isSet(object.lastTransactionHash)
        ? bytesFromBase64(object.lastTransactionHash)
        : new Uint8Array(0),
      layer: isSet(object.layer) ? layerFromJSON(object.layer) : 0,
    };
  },

  toJSON(message: ListAllTokenTransactionsCursor): unknown {
    const obj: any = {};
    if (message.lastTransactionHash.length !== 0) {
      obj.lastTransactionHash = base64FromBytes(message.lastTransactionHash);
    }
    if (message.layer !== 0) {
      obj.layer = layerToJSON(message.layer);
    }
    return obj;
  },

  create(base?: DeepPartial<ListAllTokenTransactionsCursor>): ListAllTokenTransactionsCursor {
    return ListAllTokenTransactionsCursor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAllTokenTransactionsCursor>): ListAllTokenTransactionsCursor {
    const message = createBaseListAllTokenTransactionsCursor();
    message.lastTransactionHash = object.lastTransactionHash ?? new Uint8Array(0);
    message.layer = object.layer ?? 0;
    return message;
  },
};

function createBaseOnChainTokenOutput(): OnChainTokenOutput {
  return { rawTx: new Uint8Array(0), vout: 0, amountSats: 0, tokenPublicKey: undefined, tokenAmount: undefined };
}

export const OnChainTokenOutput: MessageFns<OnChainTokenOutput> = {
  encode(message: OnChainTokenOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rawTx.length !== 0) {
      writer.uint32(10).bytes(message.rawTx);
    }
    if (message.vout !== 0) {
      writer.uint32(16).uint32(message.vout);
    }
    if (message.amountSats !== 0) {
      writer.uint32(24).uint64(message.amountSats);
    }
    if (message.tokenPublicKey !== undefined) {
      writer.uint32(34).string(message.tokenPublicKey);
    }
    if (message.tokenAmount !== undefined) {
      writer.uint32(42).bytes(message.tokenAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnChainTokenOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnChainTokenOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rawTx = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.vout = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amountSats = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenPublicKey = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tokenAmount = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnChainTokenOutput {
    return {
      rawTx: isSet(object.rawTx) ? bytesFromBase64(object.rawTx) : new Uint8Array(0),
      vout: isSet(object.vout) ? globalThis.Number(object.vout) : 0,
      amountSats: isSet(object.amountSats) ? globalThis.Number(object.amountSats) : 0,
      tokenPublicKey: isSet(object.tokenPublicKey) ? globalThis.String(object.tokenPublicKey) : undefined,
      tokenAmount: isSet(object.tokenAmount) ? bytesFromBase64(object.tokenAmount) : undefined,
    };
  },

  toJSON(message: OnChainTokenOutput): unknown {
    const obj: any = {};
    if (message.rawTx.length !== 0) {
      obj.rawTx = base64FromBytes(message.rawTx);
    }
    if (message.vout !== 0) {
      obj.vout = Math.round(message.vout);
    }
    if (message.amountSats !== 0) {
      obj.amountSats = Math.round(message.amountSats);
    }
    if (message.tokenPublicKey !== undefined) {
      obj.tokenPublicKey = message.tokenPublicKey;
    }
    if (message.tokenAmount !== undefined) {
      obj.tokenAmount = base64FromBytes(message.tokenAmount);
    }
    return obj;
  },

  create(base?: DeepPartial<OnChainTokenOutput>): OnChainTokenOutput {
    return OnChainTokenOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OnChainTokenOutput>): OnChainTokenOutput {
    const message = createBaseOnChainTokenOutput();
    message.rawTx = object.rawTx ?? new Uint8Array(0);
    message.vout = object.vout ?? 0;
    message.amountSats = object.amountSats ?? 0;
    message.tokenPublicKey = object.tokenPublicKey ?? undefined;
    message.tokenAmount = object.tokenAmount ?? undefined;
    return message;
  },
};

function createBaseOnChainTransaction(): OnChainTransaction {
  return {
    operationType: 0,
    transactionHash: new Uint8Array(0),
    rawtx: new Uint8Array(0),
    status: 0,
    inputs: [],
    outputs: [],
    broadcastedAt: undefined,
    confirmedAt: undefined,
  };
}

export const OnChainTransaction: MessageFns<OnChainTransaction> = {
  encode(message: OnChainTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationType !== 0) {
      writer.uint32(8).int32(message.operationType);
    }
    if (message.transactionHash.length !== 0) {
      writer.uint32(18).bytes(message.transactionHash);
    }
    if (message.rawtx.length !== 0) {
      writer.uint32(26).bytes(message.rawtx);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    for (const v of message.inputs) {
      OnChainTokenOutput.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.outputs) {
      OnChainTokenOutput.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.broadcastedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.broadcastedAt), writer.uint32(58).fork()).join();
    }
    if (message.confirmedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.confirmedAt), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnChainTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnChainTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operationType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transactionHash = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rawtx = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.inputs.push(OnChainTokenOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.outputs.push(OnChainTokenOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.broadcastedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.confirmedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnChainTransaction {
    return {
      operationType: isSet(object.operationType) ? operationTypeFromJSON(object.operationType) : 0,
      transactionHash: isSet(object.transactionHash) ? bytesFromBase64(object.transactionHash) : new Uint8Array(0),
      rawtx: isSet(object.rawtx) ? bytesFromBase64(object.rawtx) : new Uint8Array(0),
      status: isSet(object.status) ? onChainTransactionStatusFromJSON(object.status) : 0,
      inputs: globalThis.Array.isArray(object?.inputs)
        ? object.inputs.map((e: any) => OnChainTokenOutput.fromJSON(e))
        : [],
      outputs: globalThis.Array.isArray(object?.outputs)
        ? object.outputs.map((e: any) => OnChainTokenOutput.fromJSON(e))
        : [],
      broadcastedAt: isSet(object.broadcastedAt) ? fromJsonTimestamp(object.broadcastedAt) : undefined,
      confirmedAt: isSet(object.confirmedAt) ? fromJsonTimestamp(object.confirmedAt) : undefined,
    };
  },

  toJSON(message: OnChainTransaction): unknown {
    const obj: any = {};
    if (message.operationType !== 0) {
      obj.operationType = operationTypeToJSON(message.operationType);
    }
    if (message.transactionHash.length !== 0) {
      obj.transactionHash = base64FromBytes(message.transactionHash);
    }
    if (message.rawtx.length !== 0) {
      obj.rawtx = base64FromBytes(message.rawtx);
    }
    if (message.status !== 0) {
      obj.status = onChainTransactionStatusToJSON(message.status);
    }
    if (message.inputs?.length) {
      obj.inputs = message.inputs.map((e) => OnChainTokenOutput.toJSON(e));
    }
    if (message.outputs?.length) {
      obj.outputs = message.outputs.map((e) => OnChainTokenOutput.toJSON(e));
    }
    if (message.broadcastedAt !== undefined) {
      obj.broadcastedAt = message.broadcastedAt.toISOString();
    }
    if (message.confirmedAt !== undefined) {
      obj.confirmedAt = message.confirmedAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<OnChainTransaction>): OnChainTransaction {
    return OnChainTransaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OnChainTransaction>): OnChainTransaction {
    const message = createBaseOnChainTransaction();
    message.operationType = object.operationType ?? 0;
    message.transactionHash = object.transactionHash ?? new Uint8Array(0);
    message.rawtx = object.rawtx ?? new Uint8Array(0);
    message.status = object.status ?? 0;
    message.inputs = object.inputs?.map((e) => OnChainTokenOutput.fromPartial(e)) || [];
    message.outputs = object.outputs?.map((e) => OnChainTokenOutput.fromPartial(e)) || [];
    message.broadcastedAt = object.broadcastedAt ?? undefined;
    message.confirmedAt = object.confirmedAt ?? undefined;
    return message;
  },
};

function createBaseSparkTransaction(): SparkTransaction {
  return {
    operationType: 0,
    transactionHash: new Uint8Array(0),
    status: 0,
    confirmedAt: undefined,
    leavesToCreate: [],
    leavesToSpend: [],
    sparkOperatorIdentityPublicKeys: [],
  };
}

export const SparkTransaction: MessageFns<SparkTransaction> = {
  encode(message: SparkTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationType !== 0) {
      writer.uint32(8).int32(message.operationType);
    }
    if (message.transactionHash.length !== 0) {
      writer.uint32(18).bytes(message.transactionHash);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.confirmedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.confirmedAt), writer.uint32(34).fork()).join();
    }
    for (const v of message.leavesToCreate) {
      SparkLeaf.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.leavesToSpend) {
      SparkLeaf.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.sparkOperatorIdentityPublicKeys) {
      writer.uint32(58).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SparkTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSparkTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operationType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transactionHash = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.confirmedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.leavesToCreate.push(SparkLeaf.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.leavesToSpend.push(SparkLeaf.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sparkOperatorIdentityPublicKeys.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SparkTransaction {
    return {
      operationType: isSet(object.operationType) ? operationTypeFromJSON(object.operationType) : 0,
      transactionHash: isSet(object.transactionHash) ? bytesFromBase64(object.transactionHash) : new Uint8Array(0),
      status: isSet(object.status) ? sparkTransactionStatusFromJSON(object.status) : 0,
      confirmedAt: isSet(object.confirmedAt) ? fromJsonTimestamp(object.confirmedAt) : undefined,
      leavesToCreate: globalThis.Array.isArray(object?.leavesToCreate)
        ? object.leavesToCreate.map((e: any) => SparkLeaf.fromJSON(e))
        : [],
      leavesToSpend: globalThis.Array.isArray(object?.leavesToSpend)
        ? object.leavesToSpend.map((e: any) => SparkLeaf.fromJSON(e))
        : [],
      sparkOperatorIdentityPublicKeys: globalThis.Array.isArray(object?.sparkOperatorIdentityPublicKeys)
        ? object.sparkOperatorIdentityPublicKeys.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: SparkTransaction): unknown {
    const obj: any = {};
    if (message.operationType !== 0) {
      obj.operationType = operationTypeToJSON(message.operationType);
    }
    if (message.transactionHash.length !== 0) {
      obj.transactionHash = base64FromBytes(message.transactionHash);
    }
    if (message.status !== 0) {
      obj.status = sparkTransactionStatusToJSON(message.status);
    }
    if (message.confirmedAt !== undefined) {
      obj.confirmedAt = message.confirmedAt.toISOString();
    }
    if (message.leavesToCreate?.length) {
      obj.leavesToCreate = message.leavesToCreate.map((e) => SparkLeaf.toJSON(e));
    }
    if (message.leavesToSpend?.length) {
      obj.leavesToSpend = message.leavesToSpend.map((e) => SparkLeaf.toJSON(e));
    }
    if (message.sparkOperatorIdentityPublicKeys?.length) {
      obj.sparkOperatorIdentityPublicKeys = message.sparkOperatorIdentityPublicKeys.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SparkTransaction>): SparkTransaction {
    return SparkTransaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SparkTransaction>): SparkTransaction {
    const message = createBaseSparkTransaction();
    message.operationType = object.operationType ?? 0;
    message.transactionHash = object.transactionHash ?? new Uint8Array(0);
    message.status = object.status ?? 0;
    message.confirmedAt = object.confirmedAt ?? undefined;
    message.leavesToCreate = object.leavesToCreate?.map((e) => SparkLeaf.fromPartial(e)) || [];
    message.leavesToSpend = object.leavesToSpend?.map((e) => SparkLeaf.fromPartial(e)) || [];
    message.sparkOperatorIdentityPublicKeys = object.sparkOperatorIdentityPublicKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseSparkLeaf(): SparkLeaf {
  return {
    tokenPublicKey: new Uint8Array(0),
    id: "",
    ownerPublicKey: new Uint8Array(0),
    revocationPublicKey: new Uint8Array(0),
    withdrawalBondSats: 0,
    withdrawalLocktime: 0,
    tokenAmount: new Uint8Array(0),
    createTxHash: new Uint8Array(0),
    createTxVoutIndex: 0,
    spendTxHash: undefined,
    spendTxVoutIndex: undefined,
    isFrozen: undefined,
  };
}

export const SparkLeaf: MessageFns<SparkLeaf> = {
  encode(message: SparkLeaf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tokenPublicKey.length !== 0) {
      writer.uint32(10).bytes(message.tokenPublicKey);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.ownerPublicKey.length !== 0) {
      writer.uint32(26).bytes(message.ownerPublicKey);
    }
    if (message.revocationPublicKey.length !== 0) {
      writer.uint32(34).bytes(message.revocationPublicKey);
    }
    if (message.withdrawalBondSats !== 0) {
      writer.uint32(40).uint64(message.withdrawalBondSats);
    }
    if (message.withdrawalLocktime !== 0) {
      writer.uint32(48).uint64(message.withdrawalLocktime);
    }
    if (message.tokenAmount.length !== 0) {
      writer.uint32(58).bytes(message.tokenAmount);
    }
    if (message.createTxHash.length !== 0) {
      writer.uint32(66).bytes(message.createTxHash);
    }
    if (message.createTxVoutIndex !== 0) {
      writer.uint32(72).uint32(message.createTxVoutIndex);
    }
    if (message.spendTxHash !== undefined) {
      writer.uint32(82).bytes(message.spendTxHash);
    }
    if (message.spendTxVoutIndex !== undefined) {
      writer.uint32(88).uint32(message.spendTxVoutIndex);
    }
    if (message.isFrozen !== undefined) {
      writer.uint32(96).bool(message.isFrozen);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SparkLeaf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSparkLeaf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenPublicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ownerPublicKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.revocationPublicKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.withdrawalBondSats = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.withdrawalLocktime = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tokenAmount = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createTxHash = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.createTxVoutIndex = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.spendTxHash = reader.bytes();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.spendTxVoutIndex = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isFrozen = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SparkLeaf {
    return {
      tokenPublicKey: isSet(object.tokenPublicKey) ? bytesFromBase64(object.tokenPublicKey) : new Uint8Array(0),
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      ownerPublicKey: isSet(object.ownerPublicKey) ? bytesFromBase64(object.ownerPublicKey) : new Uint8Array(0),
      revocationPublicKey: isSet(object.revocationPublicKey)
        ? bytesFromBase64(object.revocationPublicKey)
        : new Uint8Array(0),
      withdrawalBondSats: isSet(object.withdrawalBondSats) ? globalThis.Number(object.withdrawalBondSats) : 0,
      withdrawalLocktime: isSet(object.withdrawalLocktime) ? globalThis.Number(object.withdrawalLocktime) : 0,
      tokenAmount: isSet(object.tokenAmount) ? bytesFromBase64(object.tokenAmount) : new Uint8Array(0),
      createTxHash: isSet(object.createTxHash) ? bytesFromBase64(object.createTxHash) : new Uint8Array(0),
      createTxVoutIndex: isSet(object.createTxVoutIndex) ? globalThis.Number(object.createTxVoutIndex) : 0,
      spendTxHash: isSet(object.spendTxHash) ? bytesFromBase64(object.spendTxHash) : undefined,
      spendTxVoutIndex: isSet(object.spendTxVoutIndex) ? globalThis.Number(object.spendTxVoutIndex) : undefined,
      isFrozen: isSet(object.isFrozen) ? globalThis.Boolean(object.isFrozen) : undefined,
    };
  },

  toJSON(message: SparkLeaf): unknown {
    const obj: any = {};
    if (message.tokenPublicKey.length !== 0) {
      obj.tokenPublicKey = base64FromBytes(message.tokenPublicKey);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.ownerPublicKey.length !== 0) {
      obj.ownerPublicKey = base64FromBytes(message.ownerPublicKey);
    }
    if (message.revocationPublicKey.length !== 0) {
      obj.revocationPublicKey = base64FromBytes(message.revocationPublicKey);
    }
    if (message.withdrawalBondSats !== 0) {
      obj.withdrawalBondSats = Math.round(message.withdrawalBondSats);
    }
    if (message.withdrawalLocktime !== 0) {
      obj.withdrawalLocktime = Math.round(message.withdrawalLocktime);
    }
    if (message.tokenAmount.length !== 0) {
      obj.tokenAmount = base64FromBytes(message.tokenAmount);
    }
    if (message.createTxHash.length !== 0) {
      obj.createTxHash = base64FromBytes(message.createTxHash);
    }
    if (message.createTxVoutIndex !== 0) {
      obj.createTxVoutIndex = Math.round(message.createTxVoutIndex);
    }
    if (message.spendTxHash !== undefined) {
      obj.spendTxHash = base64FromBytes(message.spendTxHash);
    }
    if (message.spendTxVoutIndex !== undefined) {
      obj.spendTxVoutIndex = Math.round(message.spendTxVoutIndex);
    }
    if (message.isFrozen !== undefined) {
      obj.isFrozen = message.isFrozen;
    }
    return obj;
  },

  create(base?: DeepPartial<SparkLeaf>): SparkLeaf {
    return SparkLeaf.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SparkLeaf>): SparkLeaf {
    const message = createBaseSparkLeaf();
    message.tokenPublicKey = object.tokenPublicKey ?? new Uint8Array(0);
    message.id = object.id ?? "";
    message.ownerPublicKey = object.ownerPublicKey ?? new Uint8Array(0);
    message.revocationPublicKey = object.revocationPublicKey ?? new Uint8Array(0);
    message.withdrawalBondSats = object.withdrawalBondSats ?? 0;
    message.withdrawalLocktime = object.withdrawalLocktime ?? 0;
    message.tokenAmount = object.tokenAmount ?? new Uint8Array(0);
    message.createTxHash = object.createTxHash ?? new Uint8Array(0);
    message.createTxVoutIndex = object.createTxVoutIndex ?? 0;
    message.spendTxHash = object.spendTxHash ?? undefined;
    message.spendTxVoutIndex = object.spendTxVoutIndex ?? undefined;
    message.isFrozen = object.isFrozen ?? undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
