// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: rpc/v1/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "../../google/protobuf/timestamp.js";
import {
  ListAllTokenTransactionsCursor,
  OperationType,
  operationTypeFromJSON,
  operationTypeToJSON,
  Transaction,
} from "./types.js";

export const protobufPackage = "rpc.v1";

export interface ListAllTokenTransactionsRequest {
  cursor?: ListAllTokenTransactionsCursor | undefined;
  pageSize?:
    | number
    | undefined;
  /** optional filters */
  ownerPublicKey?: Uint8Array | undefined;
  tokenPublicKey?: Uint8Array | undefined;
  beforeTimestamp?: Date | undefined;
  afterTimestamp?: Date | undefined;
  operationTypes: OperationType[];
}

export interface ListAllTokenTransactionsResponse {
  transactions: Transaction[];
  nextCursor?: ListAllTokenTransactionsCursor | undefined;
}

function createBaseListAllTokenTransactionsRequest(): ListAllTokenTransactionsRequest {
  return {
    cursor: undefined,
    pageSize: undefined,
    ownerPublicKey: undefined,
    tokenPublicKey: undefined,
    beforeTimestamp: undefined,
    afterTimestamp: undefined,
    operationTypes: [],
  };
}

export const ListAllTokenTransactionsRequest: MessageFns<ListAllTokenTransactionsRequest> = {
  encode(message: ListAllTokenTransactionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cursor !== undefined) {
      ListAllTokenTransactionsCursor.encode(message.cursor, writer.uint32(10).fork()).join();
    }
    if (message.pageSize !== undefined) {
      writer.uint32(16).uint32(message.pageSize);
    }
    if (message.ownerPublicKey !== undefined) {
      writer.uint32(26).bytes(message.ownerPublicKey);
    }
    if (message.tokenPublicKey !== undefined) {
      writer.uint32(34).bytes(message.tokenPublicKey);
    }
    if (message.beforeTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.beforeTimestamp), writer.uint32(42).fork()).join();
    }
    if (message.afterTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.afterTimestamp), writer.uint32(50).fork()).join();
    }
    writer.uint32(58).fork();
    for (const v of message.operationTypes) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAllTokenTransactionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllTokenTransactionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cursor = ListAllTokenTransactionsCursor.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ownerPublicKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenPublicKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.beforeTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.afterTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.operationTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.operationTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllTokenTransactionsRequest {
    return {
      cursor: isSet(object.cursor) ? ListAllTokenTransactionsCursor.fromJSON(object.cursor) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
      ownerPublicKey: isSet(object.ownerPublicKey) ? bytesFromBase64(object.ownerPublicKey) : undefined,
      tokenPublicKey: isSet(object.tokenPublicKey) ? bytesFromBase64(object.tokenPublicKey) : undefined,
      beforeTimestamp: isSet(object.beforeTimestamp) ? fromJsonTimestamp(object.beforeTimestamp) : undefined,
      afterTimestamp: isSet(object.afterTimestamp) ? fromJsonTimestamp(object.afterTimestamp) : undefined,
      operationTypes: globalThis.Array.isArray(object?.operationTypes)
        ? object.operationTypes.map((e: any) => operationTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: ListAllTokenTransactionsRequest): unknown {
    const obj: any = {};
    if (message.cursor !== undefined) {
      obj.cursor = ListAllTokenTransactionsCursor.toJSON(message.cursor);
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.ownerPublicKey !== undefined) {
      obj.ownerPublicKey = base64FromBytes(message.ownerPublicKey);
    }
    if (message.tokenPublicKey !== undefined) {
      obj.tokenPublicKey = base64FromBytes(message.tokenPublicKey);
    }
    if (message.beforeTimestamp !== undefined) {
      obj.beforeTimestamp = message.beforeTimestamp.toISOString();
    }
    if (message.afterTimestamp !== undefined) {
      obj.afterTimestamp = message.afterTimestamp.toISOString();
    }
    if (message.operationTypes?.length) {
      obj.operationTypes = message.operationTypes.map((e) => operationTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListAllTokenTransactionsRequest>): ListAllTokenTransactionsRequest {
    return ListAllTokenTransactionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAllTokenTransactionsRequest>): ListAllTokenTransactionsRequest {
    const message = createBaseListAllTokenTransactionsRequest();
    message.cursor = (object.cursor !== undefined && object.cursor !== null)
      ? ListAllTokenTransactionsCursor.fromPartial(object.cursor)
      : undefined;
    message.pageSize = object.pageSize ?? undefined;
    message.ownerPublicKey = object.ownerPublicKey ?? undefined;
    message.tokenPublicKey = object.tokenPublicKey ?? undefined;
    message.beforeTimestamp = object.beforeTimestamp ?? undefined;
    message.afterTimestamp = object.afterTimestamp ?? undefined;
    message.operationTypes = object.operationTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseListAllTokenTransactionsResponse(): ListAllTokenTransactionsResponse {
  return { transactions: [], nextCursor: undefined };
}

export const ListAllTokenTransactionsResponse: MessageFns<ListAllTokenTransactionsResponse> = {
  encode(message: ListAllTokenTransactionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.transactions) {
      Transaction.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextCursor !== undefined) {
      ListAllTokenTransactionsCursor.encode(message.nextCursor, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAllTokenTransactionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllTokenTransactionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactions.push(Transaction.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextCursor = ListAllTokenTransactionsCursor.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllTokenTransactionsResponse {
    return {
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => Transaction.fromJSON(e))
        : [],
      nextCursor: isSet(object.nextCursor) ? ListAllTokenTransactionsCursor.fromJSON(object.nextCursor) : undefined,
    };
  },

  toJSON(message: ListAllTokenTransactionsResponse): unknown {
    const obj: any = {};
    if (message.transactions?.length) {
      obj.transactions = message.transactions.map((e) => Transaction.toJSON(e));
    }
    if (message.nextCursor !== undefined) {
      obj.nextCursor = ListAllTokenTransactionsCursor.toJSON(message.nextCursor);
    }
    return obj;
  },

  create(base?: DeepPartial<ListAllTokenTransactionsResponse>): ListAllTokenTransactionsResponse {
    return ListAllTokenTransactionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAllTokenTransactionsResponse>): ListAllTokenTransactionsResponse {
    const message = createBaseListAllTokenTransactionsResponse();
    message.transactions = object.transactions?.map((e) => Transaction.fromPartial(e)) || [];
    message.nextCursor = (object.nextCursor !== undefined && object.nextCursor !== null)
      ? ListAllTokenTransactionsCursor.fromPartial(object.nextCursor)
      : undefined;
    return message;
  },
};

export type SparkServiceDefinition = typeof SparkServiceDefinition;
export const SparkServiceDefinition = {
  name: "SparkService",
  fullName: "rpc.v1.SparkService",
  methods: {
    listTransactions: {
      name: "ListTransactions",
      requestType: ListAllTokenTransactionsRequest,
      requestStream: false,
      responseType: ListAllTokenTransactionsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface SparkServiceImplementation<CallContextExt = {}> {
  listTransactions(
    request: ListAllTokenTransactionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAllTokenTransactionsResponse>>;
}

export interface SparkServiceClient<CallOptionsExt = {}> {
  listTransactions(
    request: DeepPartial<ListAllTokenTransactionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAllTokenTransactionsResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
