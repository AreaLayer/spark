// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: mock.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "mock";

export interface SetMockOnchainTxRequest {
  txid: string;
  tx: string;
}

function createBaseSetMockOnchainTxRequest(): SetMockOnchainTxRequest {
  return { txid: "", tx: "" };
}

export const SetMockOnchainTxRequest: MessageFns<SetMockOnchainTxRequest> = {
  encode(message: SetMockOnchainTxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txid !== "") {
      writer.uint32(10).string(message.txid);
    }
    if (message.tx !== "") {
      writer.uint32(18).string(message.tx);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetMockOnchainTxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetMockOnchainTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tx = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetMockOnchainTxRequest {
    return {
      txid: isSet(object.txid) ? globalThis.String(object.txid) : "",
      tx: isSet(object.tx) ? globalThis.String(object.tx) : "",
    };
  },

  toJSON(message: SetMockOnchainTxRequest): unknown {
    const obj: any = {};
    if (message.txid !== "") {
      obj.txid = message.txid;
    }
    if (message.tx !== "") {
      obj.tx = message.tx;
    }
    return obj;
  },

  create(base?: DeepPartial<SetMockOnchainTxRequest>): SetMockOnchainTxRequest {
    return SetMockOnchainTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetMockOnchainTxRequest>): SetMockOnchainTxRequest {
    const message = createBaseSetMockOnchainTxRequest();
    message.txid = object.txid ?? "";
    message.tx = object.tx ?? "";
    return message;
  },
};

export type MockServiceDefinition = typeof MockServiceDefinition;
export const MockServiceDefinition = {
  name: "MockService",
  fullName: "mock.MockService",
  methods: {
    set_mock_onchain_tx: {
      name: "set_mock_onchain_tx",
      requestType: SetMockOnchainTxRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface MockServiceImplementation<CallContextExt = {}> {
  set_mock_onchain_tx(
    request: SetMockOnchainTxRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface MockServiceClient<CallOptionsExt = {}> {
  set_mock_onchain_tx(
    request: DeepPartial<SetMockOnchainTxRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
