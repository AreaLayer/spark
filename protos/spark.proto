syntax = "proto3";

package spark;

option go_package = "github.com/lightsparkdev/spark-go/proto/spark";
import "common.proto";

service SparkService {
    rpc generate_deposit_address(GenerateDepositAddressRequest) returns (GenerateDepositAddressResponse) {}
    rpc start_tree_creation(StartTreeCreationRequest) returns (StartTreeCreationResponse) {}

    rpc split_node(SplitNodeRequest) returns (SplitNodeResponse) {}
    rpc finalize_split(FinalizeSplitRequest) returns (FinalizeSplitResponse) {}
}

message GenerateDepositAddressRequest {
    bytes signing_public_key = 1;
    bytes identity_public_key = 2;
}

message GenerateDepositAddressResponse {
    string address = 1;
}

message UTXO {
    string txid = 1;
    uint32 vout = 2;
}

message SigningJob {
    bytes signing_public_key = 1;
    string raw_tx_hex = 2;
    common.SigningCommitment signing_nonce_commitment = 3;
}


message SigningResult {
    map<string, bytes> public_keys = 1;
    map<string, common.SigningCommitment> signing_nonce_commitments = 2;
    map<string, bytes> signature_shares = 3;
}

message NodeSignatureShares {
    string node_id = 1;
    SigningResult node_tx_signing_result = 2;
    SigningResult refund_tx_signing_result = 3;
}

message NodeSignatures {
    string node_id = 1;
    bytes node_tx_signature = 2;
    bytes refund_tx_signature = 3;
}

message StartTreeCreationRequest {
    bytes identity_public_key = 1;
    UTXO on_chain_utxo = 2;
    SigningJob root_tx_signing_job = 3;
    SigningJob refund_tx_signing_job = 4;
}


message StartTreeCreationResponse {
    string tree_id = 1;
    NodeSignatureShares root_node_signature_shares = 2;
}

message Split {
    bytes signing_public_key = 1;
    SigningJob node_signing_job = 2;
    SigningJob refund_signing_job = 3;
}

message SplitNodeRequest {
    string node_id = 1;
    repeated Split splits = 2;
}

message SplitResult {
    string node_id = 1;
    NodeSignatureShares node_signatures = 2;
    bytes verifying_key = 3;
    bytes user_public_key = 4;
}

message SplitNodeResponse {
    repeated SplitResult split_results = 1;
}

message FinalizeSplitRequest {
    string splitted_node_id = 1;
    repeated NodeSignatures split_signatures = 2;
}

message FinalizeSplitResponse {
}