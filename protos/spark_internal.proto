syntax = "proto3";

package spark;

option go_package = "github.com/lightsparkdev/spark-go/proto";
import "google/protobuf/empty.proto";
import "frost.proto";

service SparkInternalService {
    rpc mark_keyshares_as_used(MarkKeysharesAsUsedRequest) returns (google.protobuf.Empty) {}
    rpc mark_keyshare_for_deposit_address(MarkKeyshareForDepositAddressRequest) returns (google.protobuf.Empty) {}

    rpc frost_round1(FrostRound1Request) returns (FrostRound1Response) {}
    rpc frost_round2(FrostRound2Request) returns (FrostRound2Response) {}
}

message MarkKeysharesAsUsedRequest {
    repeated string keyshare_id = 1;
}

message MarkKeyshareForDepositAddressRequest {
    string keyshare_id = 1;
    string address = 2;
    bytes owner_identity_public_key = 3;
}

message FrostRound1Request {
    repeated string keyshare_ids = 1;
}

message FrostRound1Response {   
    repeated frost.SigningCommitment signing_commitments = 1;
}

message SigningJob {
    // The unique identifier for the signing job.
    string job_id = 1;
    
    // The message to sign.
    bytes message = 2;

    // The secret package from DKG round 3.
    string keyshare_id = 3;

    // The verifying key. This should be the total public key for both user and StatechainEntity.
    bytes verifying_key = 4;

    // The commitments for all participants of the statechain.
    map<string, frost.SigningCommitment> commitments = 5;

    // The commitments for all participants of the user.
    frost.SigningCommitment user_commitments = 6;
}

message FrostRound2Request {
    repeated SigningJob signing_jobs = 1;
}

message FrostRound2Response {
    map<string, frost.SigningResult> results = 1;
}
