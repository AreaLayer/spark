syntax = "proto3";

package spark;

option go_package = "github.com/lightsparkdev/spark-go/proto/spark_tree";

service SparkTreeService {
    rpc get_leaf_denomination_counts(GetLeafDenominationCountsRequest) returns (GetLeafDenominationCountsResponse) {}
    rpc find_leaves_to_give_user(FindLeavesToGiveUserRequest) returns (FindLeavesToGiveUserResponse) {}
    rpc find_leaves_to_take_from_user(FindLeavesToTakeFromUserRequest) returns (FindLeavesToTakeFromUserResponse) {}
    rpc propose_tree_denominations(ProposeTreeDenominationsRequest) returns (ProposeTreeDenominationsResponse) {}
}

message GetLeafDenominationCountsRequest {
    bytes owner_identity_public_key = 1;
}

message GetLeafDenominationCountsResponse {
    map<uint64, uint64> counts = 1;
}

message FindLeavesToGiveUserRequest {
    bytes ssp_identity_public_key = 1;
    bytes user_identity_public_key = 2;
    uint64 amount_sats = 3;
}

message FindLeavesToGiveUserResponse {
    repeated bytes leaves = 1;
}

message FindLeavesToTakeFromUserRequest {
    bytes ssp_identity_public_key = 1;
    bytes user_identity_public_key = 2;
    uint64 amount_sats = 3;
}

message FindLeavesToTakeFromUserResponse {
    // The leaves that the user will give to the SSP.
    repeated bytes leaves_to_take = 1;
    // The leaves that the SSP will give to the user.
    repeated bytes leaves_to_swap = 2;
}

message ProposeTreeDenominationsRequest {
    bytes ssp_identity_public_key = 1;
    uint64 max_amount_sats = 2;
    uint64 max_tree_depth = 3;
}

message ProposeTreeDenominationsResponse {
    repeated uint64 small_denominations = 1;
    repeated uint64 large_denominations = 2;
}