name: socket-security-workflow
run-name: Socket Security Github Action
# For now, we are just running on PRs that are pushed to main. We should run more
# aggressively in the future when we want to inform developers proactively about
# new, risky dependencies.
on:
  push:
    branches:
      - main

    paths:
      - "apps/Spark/Spark.xcodeproj/project.pbxproj"
      - "sdks/js/yarn.lock"
      - "signer/spark-frost/Cargo.toml"
      - "signer/Cargo.lock"
      - "signer/Cargo.toml"
      - "signer/spark-frost-uniffi/spark-frost-python/requirements.txt"
      - "signer/spark-frost-uniffi/spark-frost-python/setup.py"
      - "spark/go.mod"
      - "spark/go.sum"
      - "tools/paylightning/Cargo.lock"
      - "tools/paylightning/Cargo.toml"
      # Changes to the Socket workflow should also trigger a scan, since we're
      # likely changing settings of how scans should work.
      - ".github/workflows/socket.yaml"

jobs:
  socket-security:
    permissions:
      issues: write
      contents: read
      pull-requests: write
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
      - name: Get changed files
        id: changed-files
        run: |
            if ${{ github.event_name == 'pull_request' }}; then
                echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
            else
                echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
            fi
            echo $GITHUB_OUTPUT
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: "pipenv"
          cache-dependency-path: "tools/Pipfile.lock"
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      - name: Install dependencies
        working-directory: "tools"
        run: pipenv sync --dev
      - name: Get PR State
        if: github.event_name == 'pull_request'
        run: echo "EVENT_ACTION=${{ github.event.action }}" >> $GITHUB_ENV
      - name: Check if Default Branch
        if: ${{ always() && format('refs/heads/{0}', github.event.repository.default_branch) == github.ref }}
        run: echo "DEFAULT_BRANCH=1" >> $GITHUB_ENV
      - uses: actions/github-script@v7
        id: get_pr_data
        with:
          script: |
              let data = (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data[0];
              if (data === undefined) {
                data = {
                  'number': null,
                  'title': null
                }
              }
              
              return data;
      - name: Save Pull Request Number
        run: |
          echo "PR_NUMBER=${{ fromJson(steps.get_pr_data.outputs.result).number || github.event.issue.number || github.event.number }}"  >> $GITHUB_ENV
      - name: Run scan
        # We use tools as the working directory since that's where our
        # pipenv tooling resides. However, we want to scan the entire project,
        # so we set a target path up one level.
        working-directory: "tools"
        env:
          SOCKET_SECURITY_API_KEY: ${{ secrets.SOCKET_API_KEY }}
          GH_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          CHANGED_FILES=$(echo "${{ steps.changed-files.outputs.changed_files }}" | tr " " "\n")
          FILES=""
          while IFS= read -r line; do
            FILES="$FILES\"$line\","
          done <<< "$CHANGED_FILES"
          FILES=$(echo $FILES | sed 's/,*$//')
          pipenv run socketcli --files "[$FILES]" --scm github --repo ${{ github.event.repository.name }} --branch "${{ github.ref_name }}" $(if [ ! -z $DEFAULT_BRANCH ]; then echo "--default-branch"; fi) --commit-sha "${GITHUB_SHA}" --pr-number $(if [ -z $PR_NUMBER ]; then echo 0; else echo $PR_NUMBER; fi) --committer "${GITHUB_ACTOR}" --commit-message "${COMMIT_MESSAGE}" --ignore-commit-files --target-path ..

